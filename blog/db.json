{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/polaris-images/android-chrome-192x192.png","path":"polaris-images/android-chrome-192x192.png","modified":0,"renderable":0},{"_id":"source/polaris-images/android-chrome-256x256.png","path":"polaris-images/android-chrome-256x256.png","modified":0,"renderable":0},{"_id":"source/polaris-images/apple-touch-icon.png","path":"polaris-images/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/polaris-images/browserconfig.xml","path":"polaris-images/browserconfig.xml","modified":0,"renderable":0},{"_id":"source/polaris-images/favicon-16x16.png","path":"polaris-images/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/polaris-images/favicon-32x32.png","path":"polaris-images/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/polaris-images/favicon.ico","path":"polaris-images/favicon.ico","modified":0,"renderable":0},{"_id":"source/polaris-images/mstile-150x150.png","path":"polaris-images/mstile-150x150.png","modified":0,"renderable":0},{"_id":"source/polaris-images/safari-pinned-tab.svg","path":"polaris-images/safari-pinned-tab.svg","modified":0,"renderable":0},{"_id":"source/polaris-images/site.webmanifest","path":"polaris-images/site.webmanifest","modified":0,"renderable":0},{"_id":"source/polaris-images/android-chrome-512x512.png","path":"polaris-images/android-chrome-512x512.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"source/polaris-images/avatar/avatar.png","path":"polaris-images/avatar/avatar.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"43eb0149c78e464c695f0dd758bb8c59353182b3","modified":1555062862522},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1555062862524},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1555062862526},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1555062862528},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1555062862529},{"_id":"themes/next/.gitignore","hash":"69e702b833c6aa9646ad24c45dd9cf00ab5ce6b9","modified":1555062862563},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1555062862564},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1555062862567},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1555062862569},{"_id":"themes/next/README.md","hash":"3f72e5a5051ca2bdaccdda684c46dc4fdb4413a6","modified":1555062862570},{"_id":"themes/next/_config.yml","hash":"9b2bdb754bda3a17d6c54db95d91a06c07a59569","modified":1557228638232},{"_id":"themes/next/bower.json","hash":"3c1c82d1644f5690534e71feed8df82e563748e0","modified":1555062862574},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1555062862575},{"_id":"themes/next/gulpfile.coffee","hash":"6407d9063bd88ede299ff7c2a59cf2c82e079476","modified":1555062862618},{"_id":"themes/next/package.json","hash":"23449a55881f7316766c0fcf3ce4c93adbc6076b","modified":1555062862815},{"_id":"source/_posts/Linux初阶.md","hash":"547a0d9b95f0ef5677dc009488e0b8f56ef07327","modified":1559396714077},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1557226267146},{"_id":"source/_posts/人生记录三.md","hash":"649cf3cd3a9a70e898649f3e1ccab7ba04350506","modified":1555041404327},{"_id":"source/_posts/人生记录二.md","hash":"497ed6fd2cebed086dbb1f305f2a72ffe1968f50","modified":1555041396123},{"_id":"source/_posts/人生记录四.md","hash":"586dba01f612c2d068f47384821b095cf19c4661","modified":1555041412341},{"_id":"source/_posts/霍爱简评.md","hash":"a81df9406b14f788619f76775b09a871cded2085","modified":1556262019033},{"_id":"source/polaris-images/android-chrome-192x192.png","hash":"eaa5359a9db972d1590d1e73bda682eb285a1b1e","modified":1556253620581},{"_id":"source/polaris-images/android-chrome-256x256.png","hash":"d260ae2f198da0a4ed1bdcfed19a7cad151a476c","modified":1556242845471},{"_id":"source/polaris-images/apple-touch-icon.png","hash":"797efd8443a64e2395fff25fa05c971a4dc40fea","modified":1556253620640},{"_id":"source/polaris-images/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1556253620677},{"_id":"source/polaris-images/favicon-16x16.png","hash":"fe94abcb1ffb5309a013bcd4dca46ea487932a8c","modified":1556253620740},{"_id":"source/polaris-images/favicon-32x32.png","hash":"64df69a55ebd8131c8614855fe8ebb637a801010","modified":1556253620769},{"_id":"source/polaris-images/favicon.ico","hash":"d264427d1ad7bcab9ffd16c44193ddb46719cd12","modified":1556253620714},{"_id":"source/polaris-images/mstile-150x150.png","hash":"0c7d76f764285712eb9c08dec6a77c2ffcaea6f4","modified":1556253620817},{"_id":"source/polaris-images/safari-pinned-tab.svg","hash":"b957ec20d81dcddd0b321c3e75960e15cdac5e84","modified":1556253620854},{"_id":"source/polaris-images/site.webmanifest","hash":"13e5aa58eb2182d8ace63266856c8cc29c47c083","modified":1556253620898},{"_id":"source/categories/index.md","hash":"4b7a52b2416484cf74c77eeba9061c544133cd52","modified":1556264549412},{"_id":"source/tags/index.md","hash":"da11ffdbfcac4dc6b7ef8cc4102a9da0b91a1cab","modified":1556264579171},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"f7ddb7faed8031a9f40eae4ee7bb48c1bc50fd14","modified":1555062862531},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"78756d8a45b22bdaa51f12b06907bff44afee83e","modified":1555062862533},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1555062862535},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"66e529edef048f3fab87d9670fa8999f483292bf","modified":1555062862543},{"_id":"themes/next/.github/auto_assign.yml","hash":"9fe0dbe3f6edc59bf10ea25b14eba0e92e2c8f42","modified":1555062862545},{"_id":"themes/next/.github/config.yml","hash":"cbd06d0c40afa9fdf056765120e9085826b00d20","modified":1555062862549},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"e06053d417579ed967a94166deb6bda5ce41d805","modified":1555062862551},{"_id":"themes/next/.github/lock.yml","hash":"4f1070097b614b24050f238694127e3573ce8472","modified":1555062862552},{"_id":"themes/next/.github/mergeable.yml","hash":"1105a6eb0d4ee1b1bf1554c5c51a47160abed62a","modified":1555062862554},{"_id":"themes/next/.github/release-drafter.yml","hash":"0f826b5ea4646008e2e147dca8b4842ecf96d093","modified":1555062862555},{"_id":"themes/next/.github/stale.yml","hash":"85975c43d606c39b91c0ad32197154be9d482a09","modified":1555062862557},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1555062862558},{"_id":"themes/next/.github/weekly-digest.yml","hash":"6db3bcad65c3156de298f6a3ffd3ba887af4aa4f","modified":1555062862561},{"_id":"themes/next/.github/topissuebot.yml","hash":"5091c3bc6f3df303d16d853ce65a302601c1e875","modified":1555062862560},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1e49c08b446678336b2eacc8bf581faca969f34b","modified":1555062862581},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1555062862579},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1555062862583},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1555062862584},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1555062862586},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1555062862587},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1555062862589},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1555062862590},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1555062862592},{"_id":"themes/next/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1555062862620},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1555062862622},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1555062862623},{"_id":"themes/next/languages/es.yml","hash":"db1a9f2af477212544c830c2dd986400e26ddd6a","modified":1555062862625},{"_id":"themes/next/languages/fr.yml","hash":"2429c90dad5bb865e3a969be2b373f19b3a77b3b","modified":1555062862627},{"_id":"themes/next/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1555062862629},{"_id":"themes/next/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1555062862631},{"_id":"themes/next/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1555062862634},{"_id":"themes/next/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1555062862635},{"_id":"themes/next/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1555062862637},{"_id":"themes/next/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1555062862638},{"_id":"themes/next/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1555062862640},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1555062862641},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1555062862643},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1555062862645},{"_id":"themes/next/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1555062862647},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1555062862648},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1555062862649},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1555062862651},{"_id":"themes/next/layout/_layout.swig","hash":"7c2e4841a320ae7ac74b25074c173de750e06ca1","modified":1556259197353},{"_id":"themes/next/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1555062862803},{"_id":"themes/next/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1555062862805},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1555062862807},{"_id":"themes/next/layout/page.swig","hash":"5d06ee8f477ffc39932d0251aa792ffcaf8faf14","modified":1555062862809},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1555062862810},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1555062862812},{"_id":"themes/next/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1555062862814},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1555062862823},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1555062862826},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1555062863203},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1555062863204},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1555062863206},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555062863108},{"_id":"source/polaris-images/android-chrome-512x512.png","hash":"478431276dadc58598b2bb67baebc63ff6effca7","modified":1556253620585},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"245917ffaa296bc2d9a85444acf639077ca25944","modified":1555062862539},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"59b2b45e151972bbe08582cde22f398e58832765","modified":1555062862540},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"795b8ddb251da8e2327299d5f7dbf446fb9867c6","modified":1555062862537},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"ae22e700b7c63c60746321719a20d34022ad78d9","modified":1555062862542},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1555062862597},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1555062862595},{"_id":"themes/next/docs/ru/README.md","hash":"aeb95129ab1da9ec41786bfa86dc32c739ee6358","modified":1555062862598},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1555062862600},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"018a259694f4a8c7c384e1f323531442cba5fbf3","modified":1555062862604},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"aaf25d304793344e2d026062768c93005723f5c6","modified":1555062862602},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"508caa37443407860d03f4d8bd56b007585125ef","modified":1555062862605},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1555062862607},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1555062862610},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1555062862612},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"734b371a0dd910eb9fe087f50c95ce35340bb832","modified":1555062862614},{"_id":"themes/next/docs/zh-CN/README.md","hash":"058c4c6f17c144d88d64c0b12cbd4f1c9fc61522","modified":1555062862615},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1555062862617},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1555062862654},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1555062862656},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1555062862655},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1555062862663},{"_id":"themes/next/layout/_macro/post.swig","hash":"31ba947998f0c962b04ae7f42f9d3db934209a79","modified":1555062862665},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"91017f58f83d9505ce99109fffdc51c032bf017e","modified":1555062862666},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d0b9e841d55c974d02f43823a06a2627f8e46431","modified":1555062862668},{"_id":"themes/next/layout/_partials/footer.swig","hash":"9a79dde1412b1b1473380e8b6cacfe1930ed321b","modified":1555062862670},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"1ad13269b43b900356f3bdab7947d6a86f035a2c","modified":1555062862673},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1555062862692},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1555062862693},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"cccd93d30787675010b1a74ef02eb5b813ec1d96","modified":1555062862717},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"c2e8f4b3a2bf991320ecc827dcdc227399ad5b51","modified":1555062862719},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"50c3ae6b50f173ae70f8c3312f7c6da1097eb9b6","modified":1555062862720},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1555062862722},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"8a992b7fe42b9c1a5eb9d937b0827aed91586d94","modified":1555062862733},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4130f995f0c4f81a44266194ecae9df96fad174c","modified":1555062862735},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1555062862759},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1555062862761},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"87182367d7954457cb2498bbfa9445c03c2d619e","modified":1555062862762},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"07fc0ae1a30c5aa9269d6efdaec598164b1d191c","modified":1555062862777},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"80dfc0879866e6512cb67590a3b2d8741a66f980","modified":1555062862784},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1555062862786},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1555062862788},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"4ae61c7efb16e962385bfe522a38c4d29cdcccbe","modified":1555062862789},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7cc1294a5fbedf3502688248a433c358339e5ae0","modified":1555062862791},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1555062862793},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1555062862795},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"b44010cd577e4d063c3406772938c4b117ec7b7b","modified":1555062862802},{"_id":"themes/next/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1555062862818},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1555062862820},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1555062862821},{"_id":"themes/next/scripts/tags/button.js","hash":"95a520f6529424a03c7ead6dbfd5e626d672febb","modified":1555062862829},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1555062862830},{"_id":"themes/next/scripts/tags/exturl.js","hash":"f9f25905adecfb8be49def4ff3b0b8bbc6955d84","modified":1555062862833},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a6b2264215c555c553b2c5db85fa90678798d0d5","modified":1555062862834},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"23d839333422375e85d44e476f554faf49973a3c","modified":1555062862836},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1555062862838},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1555062862839},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1555062862841},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1555062862843},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1555062862845},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1555062862846},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1555062862848},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1555062863107},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1555062863110},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555062863112},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1555062863113},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1555062863115},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1555062863117},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1555062863118},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1555062863120},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1555062863121},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1555062863123},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1555062863124},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555062863126},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555062863128},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555062863130},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1555062863132},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555062863133},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1555062863135},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1555062863136},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1555062863138},{"_id":"themes/next/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1555062863140},{"_id":"themes/next/source/js/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1555062863141},{"_id":"themes/next/source/js/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1555062863143},{"_id":"themes/next/source/js/js.cookie.js","hash":"f11e84def0352b7dd6393f1b83e55a40ab468686","modified":1555062863147},{"_id":"themes/next/source/js/motion.js","hash":"d0a6d9dbcc57159e54bbb1f683b86632ae0b78f0","modified":1555062863149},{"_id":"themes/next/source/js/next-boot.js","hash":"696a0c2cf158001576d56b48195ec8e39e835b47","modified":1555062863150},{"_id":"themes/next/source/js/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1555062863152},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1555062863157},{"_id":"themes/next/source/js/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1555062863159},{"_id":"themes/next/source/js/utils.js","hash":"d58033a6a108981c81ac58ee321167047d7a25df","modified":1555062863161},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555062863028},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555062863029},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555062863035},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555062863099},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555062863104},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1555062862660},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1555062862661},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1555062862676},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"fd079a414ca0f42f4cddd00247a9d5a5f58c4d8e","modified":1555062862678},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"466e69a4b4fbdc57f33e60a16b0d87e494385e21","modified":1555062862679},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1555062862681},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1555062862683},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1555062862684},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1555062862686},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"2b905ddd5dea8558c3fd95aacad241da6b6800f4","modified":1555062862688},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1555062862690},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1555062862697},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1555062862699},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"f62b801c7999da67b4bdca9c5e373b9b5ed039dc","modified":1555062862700},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1555062862702},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1555062862705},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1555062862706},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1555062862708},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1555062862710},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1555062862712},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1555062862713},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"647e8677d1ccfb3f7918dd3ea2ff7078504a845d","modified":1555062862715},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1555062862724},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1555062862726},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1555062862728},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7ef07edd2a97a3774229990d2f0a6eefa31bd015","modified":1555062862729},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"828eb9c47f34090c841a2e9a0b3f31b0e4ccf40a","modified":1555062862731},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1555062862737},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1555062862739},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1555062862741},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1555062862742},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1555062862744},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1555062862745},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1555062862747},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"54d7993ae773573ee103c22802b7e98b193e1a3a","modified":1555062862748},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1555062862750},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1555062862751},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"71fb01bcad43bc9410ab19190373b9f7e59215b5","modified":1555062862753},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1555062862754},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1555062862756},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1555062862757},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1555062862765},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1555062862767},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"8b4a94dd80b3bac7c5390c8a7fd377b88c2cb78e","modified":1555062862768},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e86e1ace90a70bb8862f5e6de9dbe7bfc046bee","modified":1555062862770},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"9a4923d2aa5182531ea7a7fb9abe824450026208","modified":1555062862771},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b3818fd0b3028dadf341b6d0b180e1243683de6a","modified":1555062862773},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1555062862774},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1b72c755101c9dfb85da13df9a0abccf37cd1dd2","modified":1555062862776},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1555062862779},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1555062862781},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"767ba29f258db5d2e5baf875a6f36ac1d44df6a3","modified":1555062862783},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1555062862799},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"143ef265c96a8ea2fb93c36c5ffb9c5e940f7693","modified":1555062862797},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1555062862800},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1555062863025},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1555062863027},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1aabac9e37a8f4451c86d09037b3a1f8b30eaf5e","modified":1555062863032},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"21a14a19149f1cb8e011c477f29dd1352675605b","modified":1555062863034},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1555062863096},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1555062863098},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1555062863101},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ebc95eeb8966d17cdc7dd0de009deaef1fe65064","modified":1555062863103},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1555062863154},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1555062863156},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1555062863166},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1555062863164},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1555062863167},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1555062863169},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1555062863171},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1555062863197},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1555062863199},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1555062863200},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1555062863190},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"5c0ca7f801859cff254d2f5b7d1a70d66ff61a8d","modified":1555062862852},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"463817cbbd804ce134cb3e7e721431cb0e1616f2","modified":1555062862853},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"9fd526db0527c71243f05e18086f937dc67b1c3e","modified":1555062862855},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1555062862857},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"997058180065d986e05df72992cc2cbfd7febd7e","modified":1555062862859},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"a4c6ee546a94fd69e5b7a1e4c054ab8cacb73d2a","modified":1555062862894},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"cfa64bd8ee2ff9f943673e339d69341e76fbf031","modified":1555062862925},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"afdd21533db18d846e1a2663b1199761b1bd2c1e","modified":1555062862927},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1555062863000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"40144394fdfe05d400f39f6763f66f75479a2e34","modified":1555062863002},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"35c6fd7eab3779bd9e38b7ba8825ab0c67a1be7a","modified":1555062863004},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"1d21dbfdaca5cdf73ba84f7e6d37ca329c0cf3bd","modified":1555062863018},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"fec36a14080104b5862e9f021eab117d87c5f7c5","modified":1555062863020},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1555062863021},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"107f42aa590ec4ba0765a0bc5d735f0f09edc0ff","modified":1555062863023},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a609ff811f2b2764f5470236fe2fb1f3aa6ccba5","modified":1555062863038},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1555062863041},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"8da8416213127595dfc4d2b358639194647e7bd3","modified":1555062863045},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1555062863048},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"40f266e24af4dedc9497056ab18ebcfda38dd47d","modified":1555062863050},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1555062863052},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1555062863054},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"25f05ed8da68d034dce7f06e0f20f6cd55841070","modified":1555062863056},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"04706657af638f2746ae59520e6fc78577c7682c","modified":1555062863067},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1555062863069},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"234b44cfd03f9c9e3e179ff5fd698ac876341913","modified":1555062863071},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1555062863077},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1555062863078},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"b9619c9827f969ca2e2f5878552362a7b858918f","modified":1555062863083},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"e73d6da74c5755442e831d8fd7d922c5b32bd892","modified":1555062863085},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0b3001909f3446843b226030524ea8498d4d8997","modified":1555062863087},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5b5e0a02a7bf63de9efcd33a4e482939cce5822d","modified":1555062863089},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1555062863091},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"adb7379f3b9001840eb38b260434e89365771a81","modified":1555062863093},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1555062863174},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1555062863176},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1555062863178},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555062863185},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555062863187},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1555062863194},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1555062862862},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"a8f4d4b86acaa34c99111b2dde5d0779cc7e0de6","modified":1555062862864},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"c9cfb4b99e1ec8ec9cf075cb761b8f7fa5fe63fd","modified":1555062862866},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1555062862867},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"33200f60bd6a8bbfc66dd49a239bcc75c2f564c1","modified":1555062862869},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1555062862871},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"3a0efe849587b34f20d4e260028dc799215b0bb3","modified":1555062862873},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"024e8ff40ca881c6fbf45712897e22f58a3811ab","modified":1555062862875},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c1a082e6c1f96187a099c3f4cb5424c0c9fd06e","modified":1555062862878},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1555062862880},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1555062862882},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1555062862884},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1555062862886},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"9a8fb61bd2d184de9d206e62ba8961d1845c5669","modified":1555062862888},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1555062862889},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c27527cdeb9e3a9f447f7238f442a5dc33fde4e6","modified":1555062862891},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1555062862892},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"f3b0d259e991ac86454ae5eac6bc94dc8691d8c9","modified":1555062862898},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1555062862896},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1555062862900},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a73346f999b31355075cd58637946a8950cf6f7e","modified":1555062862902},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"f14cefc99309934d4103a3aa785e1258d858813f","modified":1555062862903},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1555062862905},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d77f85d3af2d7090d84b28ab01c6a49f92eec647","modified":1555062862907},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"13d365ee626c01f17ec664b3f54f51d8b9ee7cf4","modified":1555062862908},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"4aad8e36178faaa71a767af0084d578df4c09f73","modified":1555062862910},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ccd0b1309acff0c676fdcc848a8ae2d05f0369ab","modified":1555062862912},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1555062862914},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1555062862916},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1555062862917},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"c8009fd9598a661b7d23158b5121b6ac266939e9","modified":1555062862919},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1555062862921},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"615fca7dff197a2ca3df674cf963ce70b8525985","modified":1555062862923},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"a5484d8436b2b7862faf6e7309a9e7b88cdd0027","modified":1555062862930},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab1776c5dc537beabb0ab81a0f04e08bebad070b","modified":1555062862931},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"03a4e75e963e3e7cc393d588b1495a88d52e0e40","modified":1555062862933},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"b36eea093bd4b32056b5de6f370ff57e50b25a49","modified":1555062862936},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"e58bb8b7127aa21e8260493a425ec00fcb25d338","modified":1555062862938},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1555062862940},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9204c79c05d620ecd5d411cdf11e27441b6281dc","modified":1555062862942},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"0eadef0381f696de7f88d7dc5f0ddc3cd5d309b3","modified":1555062862944},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"3cb387fa70017f3c24a1a1884461d29deda54585","modified":1555062862946},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"ed3a2960ebce7396d1893bb8e08c99c7d9259140","modified":1555062862948},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"fde59300ec38868676ff5ed495b9dc9b02d07ffc","modified":1555062862950},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1555062862952},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1555062862965},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"b43421291bf85b589e8d0ec853e238d36ab80631","modified":1555062862967},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"020fac447d7a17c03e2802f0f724ae0738088354","modified":1555062862969},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"3baeeb51cfe123e99235ee1816d0e1f6a97c7852","modified":1555062862972},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"54c5398c7bf5b8bd9f38a9ece1dd82a9255f9a30","modified":1555062862974},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"da7a21f5a2f7dcf4c5a4788d7670159ca4132b65","modified":1555062862976},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"4305813408a1cd6aba764a7769b94b081d383d4f","modified":1555062862979},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1555062862984},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"2fbe52f955da41c7a14eb09918bf86a252e4504f","modified":1555062862987},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1555062862988},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"ed8a12982c0497eeb9d7642781abeb801428f83d","modified":1555062862990},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"d9c244b1c3a09a7fccd3c3f732e6fb112a8cd565","modified":1555062862981},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1555062862992},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"35dc9f3990fadff3ea038d4e8ac75923219886ed","modified":1555062862994},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"9801977a23268e36c5deefd270423f6f1a0c3bb2","modified":1555062862996},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7cf42f96ba6b249c75e00dad251ebacf7de61e6c","modified":1555062862997},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1555062863061},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1555062863063},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1555062863081},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555062863183},{"_id":"source/polaris-images/avatar/avatar.png","hash":"787b2636a5007326949962823e560993e777fde9","modified":1556266257062},{"_id":"source/_posts/docker基础.md","hash":"9a3dbf7d7a322b956e923ddfd0266e4c7be232ae","modified":1559396714080},{"_id":"source/_posts/keepalived笔记.md","hash":"949c3d52ce7b7036ebfd1701d228f015a15462dc","modified":1559396714095},{"_id":"source/_posts/mongodb基础.md","hash":"9c12a37054770c801620c413971fd813883b2be8","modified":1559396714098},{"_id":"source/_posts/js进阶及页面调优.txt","hash":"5dcb36c6419737435931494f9f3f03dc9d9346d9","modified":1557411720309},{"_id":"source/_posts/mysql基础.md","hash":"d685ecc1573d0c5378cd7b70d2690a7a5947c547","modified":1559396714100},{"_id":"source/_posts/跨N库分页.md","hash":"c41a2ba609f40bf6f3d34d3471e0cc65a90f0eed","modified":1559396714106},{"_id":"public/categories/index.html","hash":"adc5bb0e26aa8f2fed6df7f793b375953a5ac59b","modified":1559398345801},{"_id":"public/categories/文学/index.html","hash":"b0a2d8c4a9f8b0a3aad770d83842335aa57aa08b","modified":1559398345816},{"_id":"public/archives/2017/02/index.html","hash":"e16ceab9ea6677876239f443ef39a5e0aed9c5a5","modified":1559398345814},{"_id":"public/archives/2017/04/index.html","hash":"8da12fcdd5314a4f447a69e4b8986e26117838e7","modified":1559398345814},{"_id":"public/archives/2017/12/index.html","hash":"54cd4043da36aa17b798752e32c421ac55279412","modified":1559398345815},{"_id":"public/archives/2018/index.html","hash":"73616616f0fa66f625accdda61584a946bee4d58","modified":1559398345815},{"_id":"public/archives/2018/04/index.html","hash":"9455214ae7e017eb2dd17679c40a40ccc7b107bb","modified":1559398345816},{"_id":"public/archives/2019/index.html","hash":"50563e9a3c223dafe59a203495a4c6031406e95e","modified":1559398345816},{"_id":"public/archives/2019/04/index.html","hash":"d5261042ca2e481467db3643e76a9adbe05c288e","modified":1559398345816},{"_id":"public/tags/爱情/index.html","hash":"c1424e46717dcd02b500c5394ced77b78e7f35d2","modified":1559398345816},{"_id":"public/tags/书评/index.html","hash":"24240021e7698514addfe2980c1b057ca786d4d7","modified":1559398345816},{"_id":"public/tags/docker/index.html","hash":"a3f2c5b6208ba0afdd6a63a704a996d964810cc9","modified":1559398345816},{"_id":"public/tags/keepalived/index.html","hash":"2ce4ab28de3393958e9d54e2c6ffb231d8ac90a7","modified":1559398345816},{"_id":"public/tags/nginx/index.html","hash":"cb03560f0fe68ba963ff46ae98e4c925a63c098b","modified":1559398345816},{"_id":"public/tags/mongodb/index.html","hash":"cb6dec6ad04f4c6f5f2443bc973ab23d32aef99c","modified":1559398345816},{"_id":"public/tags/mysql/index.html","hash":"f64581e10ba25a55104ea09e05c1e970085569ec","modified":1559398345816},{"_id":"public/tags/数据库/index.html","hash":"07e11a32caab92f005225bcc426cc595fd7c371e","modified":1559398345816},{"_id":"public/tags/index.html","hash":"c7e61c6e5608811d4a9088d8b61244f8558e74b9","modified":1559398345816},{"_id":"public/2019/04/12/霍爱简评/index.html","hash":"0622645cfb33c27dc720d6895449910601194e6a","modified":1559398345817},{"_id":"public/2018/04/04/hello-world/index.html","hash":"e89e235bf44dfbed65bbb956a58a17172c6b9e39","modified":1559398345817},{"_id":"public/2017/12/15/keepalived笔记/index.html","hash":"35c0a53ba54019301bbcf94d737de55ead2d37f6","modified":1559398345817},{"_id":"public/2017/07/10/mongodb基础/index.html","hash":"4c93002ec3d3c3059febe3d23d9c6cf4cc52a83e","modified":1559398345817},{"_id":"public/2017/07/10/mysql基础/index.html","hash":"ec12863ea4afe83b28e8d0d6c1fbb268d1c34ec3","modified":1559398345817},{"_id":"public/2017/07/07/跨N库分页/index.html","hash":"fd1953e0f904dabc0ed5bbeaadb6de8bc1c02cb6","modified":1559398345817},{"_id":"public/2017/04/26/Linux初阶/index.html","hash":"9efe53d6a08aa951dbbd9dd22cb786c33bd63735","modified":1559398345817},{"_id":"public/2017/02/09/docker基础/index.html","hash":"b8265ce45ab951ff844490427f5a47da1ef5c465","modified":1559398345817},{"_id":"public/categories/技术/index.html","hash":"4a0184d54c0ab2006f5aeabe104e88b15ff80063","modified":1559398345817},{"_id":"public/archives/index.html","hash":"844581da20341daea5ed60b09e955e72315ef6b9","modified":1559398345817},{"_id":"public/archives/2017/index.html","hash":"8ab2fe6ab80338665e49e83ba95d1dd358f6512d","modified":1559398345817},{"_id":"public/archives/2017/07/index.html","hash":"bd088a00615161e723a1ddc865f5652bc0f86795","modified":1559398345817},{"_id":"public/tags/linux/index.html","hash":"d42bfb084f289dc2abeea0a69d835d23bcb55ea1","modified":1559398345817},{"_id":"public/index.html","hash":"17037899156c273a2d5802c7b989e57054bad72d","modified":1559398345817},{"_id":"public/polaris-images/apple-touch-icon.png","hash":"797efd8443a64e2395fff25fa05c971a4dc40fea","modified":1557411954652},{"_id":"public/polaris-images/android-chrome-256x256.png","hash":"d260ae2f198da0a4ed1bdcfed19a7cad151a476c","modified":1557411954652},{"_id":"public/polaris-images/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1557411954652},{"_id":"public/polaris-images/favicon-32x32.png","hash":"64df69a55ebd8131c8614855fe8ebb637a801010","modified":1557411954653},{"_id":"public/polaris-images/favicon-16x16.png","hash":"fe94abcb1ffb5309a013bcd4dca46ea487932a8c","modified":1557411954653},{"_id":"public/polaris-images/favicon.ico","hash":"d264427d1ad7bcab9ffd16c44193ddb46719cd12","modified":1557411954653},{"_id":"public/polaris-images/safari-pinned-tab.svg","hash":"b957ec20d81dcddd0b321c3e75960e15cdac5e84","modified":1557411954653},{"_id":"public/polaris-images/mstile-150x150.png","hash":"0c7d76f764285712eb9c08dec6a77c2ffcaea6f4","modified":1557411954653},{"_id":"public/polaris-images/site.webmanifest","hash":"13e5aa58eb2182d8ace63266856c8cc29c47c083","modified":1557411954653},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1557411954654},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1557411954654},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1557411954654},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1557411954654},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1557411954654},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1557411954655},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1557411954655},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1557411954655},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1557411954655},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1557411954655},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1557411954655},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557411954655},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1557411954655},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1557411954656},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557411954656},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1557411954656},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1557411954656},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1557411954656},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1557411954656},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1557411954656},{"_id":"public/live2dw/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1557411954656},{"_id":"public/live2dw/assets/exp/f02.exp.json","hash":"461fe8077a2289e309ffc7edf561501a7edcce88","modified":1557411954656},{"_id":"public/live2dw/assets/exp/f03.exp.json","hash":"a65382a1a8d8f7034eac2c811b9f122a8b3f1403","modified":1557411954656},{"_id":"public/live2dw/assets/exp/f04.exp.json","hash":"3156286d7e0281e15c637a889aa415eef3224fa7","modified":1557411954656},{"_id":"public/live2dw/assets/exp/f05.exp.json","hash":"1123786fb0bb9c31f7d30cf14b2299f898cdc207","modified":1557411954657},{"_id":"public/live2dw/assets/exp/f06.exp.json","hash":"d962889ec7c563d818ddb5ab1e58cd337b5e62db","modified":1557411954657},{"_id":"public/live2dw/assets/exp/f07.exp.json","hash":"d55366c9bcf382e8273cf1803f65cdb8a4a0d336","modified":1557411954657},{"_id":"public/live2dw/assets/exp/f08.exp.json","hash":"4a9ba4b11d9797f59c7b043d2b807ed8253f3cc4","modified":1557411954657},{"_id":"public/live2dw/assets/haru01.model.json","hash":"cab2aac3d697eafa420e8a02b1f52c1f19666ffd","modified":1557411954657},{"_id":"public/live2dw/assets/haru01.physics.json","hash":"490ab4735f5cddca766344468591c0eb90cda1f7","modified":1557411954657},{"_id":"public/live2dw/assets/haru01.pose.json","hash":"4fb902065bd3f309fa0029fe2505424851fd489f","modified":1557411954657},{"_id":"public/live2dw/assets/mtn/idle_00.mtn","hash":"bbaaafe4de159dd4fb73d137d283c640d3fede53","modified":1557411954657},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"035c196f276ed177239ea05eeaece68b0fda2935","modified":1557411954657},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"82291b3b78339d52f559a65d02b78e0b30180503","modified":1557411954657},{"_id":"public/live2dw/assets/mtn/shake_00.mtn","hash":"7e938c4abe83273766c4562a571301811dea1de6","modified":1557411954657},{"_id":"public/live2dw/assets/mtn/pinchOut_00.mtn","hash":"db831991287e3a4724578f068a68e48168081d5a","modified":1557411954657},{"_id":"public/live2dw/assets/mtn/pinchIn_00.mtn","hash":"ed792ed8226aa5a3e5bf059285b2c95855c11303","modified":1557411954657},{"_id":"public/live2dw/assets/mtn/tapBody_01.mtn","hash":"91fbfe1870f7a0a5f5fdb87c213c41b2a8cb5648","modified":1557411954657},{"_id":"public/live2dw/assets/mtn/flickHead_00.mtn","hash":"66577f6dde2bec905930fba0dd5f06de939c8f1e","modified":1557411954658},{"_id":"public/live2dw/assets/mtn/tapBody_03.mtn","hash":"fcd573576112ad5f4e4b7dc0b750de79f150f971","modified":1557411954658},{"_id":"public/live2dw/assets/mtn/tapBody_04.mtn","hash":"557811c5f4ddbd393542366ef95794b19fc60387","modified":1557411954658},{"_id":"public/live2dw/assets/mtn/tapBody_00.mtn","hash":"4041b2f1f2f4a84454180f9dab14e46d99e135c0","modified":1557411954658},{"_id":"public/live2dw/assets/mtn/tapBody_05.mtn","hash":"5f48e50e938f98636519c370745a39b921907719","modified":1557411954658},{"_id":"public/live2dw/assets/mtn/tapBody_07.mtn","hash":"d299747aaf27377d552ef1f8b4fce9871a65c37d","modified":1557411954658},{"_id":"public/live2dw/assets/mtn/tapBody_09.mtn","hash":"4f50c17dcf352995e51a4d462b9ca7a9e9197d5c","modified":1557411954658},{"_id":"public/live2dw/assets/snd/flickHead_00.mp3","hash":"0b447e7e38eb20f3f7e8ba2a5ea5f521f6e37a26","modified":1557411954658},{"_id":"public/live2dw/assets/mtn/tapBody_08.mtn","hash":"64a03a904d701039bf81e1296ee79537c2e8800e","modified":1557411954658},{"_id":"public/live2dw/assets/mtn/tapBody_02.mtn","hash":"e93a2163cbb85525338e11a520e317329b11fb65","modified":1557411954658},{"_id":"public/live2dw/assets/mtn/tapBody_06.mtn","hash":"3d06ac66c04eb12c64d36551dd85389f0b0ee51f","modified":1557411954658},{"_id":"public/live2dw/assets/snd/shake_00.mp3","hash":"28b245865f200b61cb009dfbd3811d9e9b0748fb","modified":1557411954658},{"_id":"public/live2dw/assets/snd/tapBody_01.mp3","hash":"d3d5607dbe394225e2ee858531b7767f567c4e10","modified":1557411954659},{"_id":"public/live2dw/assets/snd/tapBody_00.mp3","hash":"23c998ca4549b7908aef029d28b6ae22cbfcdc82","modified":1557411954659},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1557411954659},{"_id":"public/live2dw/assets/snd/tapBody_02.mp3","hash":"be111df9ecd006e992f94cb4280c2b66d9cd23ed","modified":1557411954659},{"_id":"public/live2dw/assets/snd/pinchOut_00.mp3","hash":"6872da79e1b515b2c996eecee4ca150e22aa48c0","modified":1557411954659},{"_id":"public/polaris-images/android-chrome-192x192.png","hash":"eaa5359a9db972d1590d1e73bda682eb285a1b1e","modified":1557411955218},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1557411955218},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1557411955219},{"_id":"public/polaris-images/avatar/avatar.png","hash":"787b2636a5007326949962823e560993e777fde9","modified":1557411955219},{"_id":"public/live2dw/assets/moc/haru01.1024/texture_00.png","hash":"f3c4103630bbf0660f793f90a14b51fdb7dfb7ea","modified":1557411955219},{"_id":"public/live2dw/assets/moc/haru01.1024/texture_01.png","hash":"dd05d6b7f8f0d0c167b040f41ffd7c10a3747d96","modified":1557411955219},{"_id":"public/live2dw/assets/snd/pinchIn_00.mp3","hash":"d143662d2c8cfb1150f719d3d55c75d454535690","modified":1557411955220},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1557411955220},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1557411955231},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1557411955232},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1557411955232},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1557411955232},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1557411955232},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1557411955233},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1557411955233},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1557411955233},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1557411955233},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1557411955233},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1557411955233},{"_id":"public/css/main.css","hash":"773399f740f1fbd378407ad4f80d42ad7885991d","modified":1557411955233},{"_id":"public/live2dw/assets/moc/haru01.1024/texture_02.png","hash":"6a1e0b336da79557325da9f58a69a380d67ecbb1","modified":1557411955233},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1557411955251},{"_id":"public/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1557411955251},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1557411955251},{"_id":"public/polaris-images/android-chrome-512x512.png","hash":"478431276dadc58598b2bb67baebc63ff6effca7","modified":1557411955251},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1557411955251},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1557411955252},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1557411955260},{"_id":"public/live2dw/assets/moc/haru01.moc","hash":"d2223b555b3bdbbd955301c4c5bcbe7ebe19bec1","modified":1557411955284},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1557411955286},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1557411955286},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1557411955286},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1557411955436},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1557411955440},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1557411955442},{"_id":"source/_posts/前端调优.md","hash":"9130d981b0c462e3bb8de6e954ffb3fbc381d041","modified":1559396714102},{"_id":"source/_posts/浅谈乐悲观锁.md","hash":"18f3ed6eccb0669ee023e77bc8643fa9e489c0bc","modified":1557491422366},{"_id":"source/_posts/消息推送.md","hash":"dcfb5f6a67f680f5c564ec5795fbe545fae8f84a","modified":1559396714104},{"_id":"public/archives/2019/05/index.html","hash":"eeb07ffda4136d32dce5e200c7cd079248603503","modified":1559398345816},{"_id":"public/tags/思想机制/index.html","hash":"31ee07b03dc7a5a1e6507071285ae5fafa588161","modified":1559398345816},{"_id":"public/2019/05/10/浅谈乐悲观锁/index.html","hash":"6b9d7a28846ef91f55b7c0e91355b9c4b211f4ed","modified":1559398345817},{"_id":"public/archives/page/2/index.html","hash":"a51fe2d0a9077cee522391089db6caf56565ca57","modified":1559398345822},{"_id":"public/tags/JavaScript/index.html","hash":"5fbab007bc9423c4724d1e91c394885190fa711b","modified":1559398345822},{"_id":"public/tags/mpush/index.html","hash":"b24479464a6d9cc032ad567a08f0fe520b95a86a","modified":1559398345822},{"_id":"public/tags/java/index.html","hash":"368f70e26d2b4ecea4813b49b1ea213927704643","modified":1559398345822},{"_id":"public/tags/Apns/index.html","hash":"adf6c7244133fd6f8767eb76d68916974350ae8d","modified":1559398345822},{"_id":"public/tags/android/index.html","hash":"3079bc31aaf3f8ef253646b1f22eaf6618414e80","modified":1559398345822},{"_id":"public/tags/ios/index.html","hash":"4ec3b00a68f55ca4c9b19fea8ae06f6080534741","modified":1559398345822},{"_id":"public/tags/消息推送/index.html","hash":"fe313559ee7f869f3d28aef7803b2c3147024e12","modified":1559398345822},{"_id":"public/2017/07/07/前端调优/index.html","hash":"b768ebad66df2affcc7388aad63e64edf4946bd7","modified":1559398345823},{"_id":"public/2017/02/09/消息推送/index.html","hash":"e3eb16b012ef79c67d19bce8f08f4e0ea3c8e3d7","modified":1559398345823},{"_id":"public/page/2/index.html","hash":"8f998e6f5d0ebae118c62b89de056d80e74b86cc","modified":1559398345823}],"Category":[{"name":"技术","_id":"cjuxqcicc0005dwmdsmwxz0bk"},{"name":"文学","_id":"cjuxqcicz000bdwmdfgtmjg38"}],"Data":[],"Page":[{"title":"文章分类","date":"2019-04-26T07:02:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2019-04-26 15:02:54\ntype: \"categories\"\n---\n","updated":"2019-04-26T07:42:29.412Z","path":"categories/index.html","_id":"cjuxqcibl0001dwmdriwnpq55","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-04-26T07:03:18.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-04-26 15:03:18\ntype: \"tags\"\n---\n","updated":"2019-04-26T07:42:59.171Z","path":"tags/index.html","_id":"cjuxqciby0003dwmd9j1dvkyr","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-04-04T05:39:15.116Z","updated":"2019-05-07T10:51:07.146Z","_id":"cjuxqcib90000dwmd3ej8rpqq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"linux初级","date":"2017-04-26T03:32:30.000Z","_content":"\n# linux学习笔记\n\n## 前言\n学习环境：centos7、centos6.5，两种版本存在部分指令差别。\n\n- deb\ndeb后缀的软件包是for Debian系的（包括Ubuntu），不是给centos安装的。\n如果想安装deb包，要安装dpkg命令~；\n或者是用alien把.deb转化为rpm，然后运行~；\n\n- rpm\nrpm后缀的软件包才是for Redhat系的（包括CentOS）。\n\n- yum\nyum是操作源组（里面各种官方程序），而rpm是操作自己的rpm包（自己下载过来的）\n\n## QA\n### 文件复制信息丢失\n直接从windows拖到vm可能会导致文件缩小（丢失信息）\n### 安装依赖缺失\n使用rpm可能需要依赖包，使用yum安装（yum search ***:查询***的yum源）\n\n### 指令缺失\n如果你的linux采用最小安装（没有图形界面等等），很多命令是默认没有安装的，所以你使用坑二或是在线下载的方式，结果各种错误，此时就需要注意你的网络试试：ip addr；\n\n如果你的ip并没有分配，service network start; 开启网络吧!(记得修改配置文件ONBOOT=yes--开机启动网络).\n\n接着yum search \\*，查询到位置后，yum install \\*。(有的命令需要updatedb,比如locate)\n\n### 阿里云远程登录问题\n阿里云出现了两次不同的登录问题。\n\n#### 问题一\n\n突然有天别人告诉我，所有账户都登录不上（包括root），后来直接通过阿里的控制台登录成功，然后查看原因。\n\n一般远程登录不上，先检查端口22(负责远程连接的端口)，发现root权限竟然无法开放和关闭端口，脚本的所有权已被修改，而且每个文件的所有权都属于某用户，原来他误操作\n\n>$ chmod *** /\n\n当时他没发现可怕的事情，也就没放在心上，之后就炸了。\n\n- 解决方案\n\n因为阿里云是几个同学合伙买的，上面的都是一些个人项目，所以当时直接就直接改了。（暂未发现回退的方案）\n把所有的文件属性都改为root，然后单独修改每个账户的文件夹（包括子文件夹）的权限 (-R：递归修改 子文件)。\n权限修改\n\n>$ chmod -R / \n\n权限组修改\n>$ chgrp \n\n修改文件属性（权限、组等等）\n>$ chown -R tangyb.bxGroup ./polaris \n\n\n\n#### 问题2\n个别用户登录不上（显示建立连接通道，然后就和卡机了一样），查看登录日志（文件：/var/log/secure），发现错误，此用户的进程数过多（默认是1024） 。\n\n- 解决方案\n\n提升进程数（文件：90-nproc.conf）或是关闭此用户下的进程（pkill -u username）。\n\n### 远程问题\n突然某天vm不能远程了，主机不能ping通vm，vm可以ping通主机并且可以上网（采用的nat模式）；\n后改为桥接模式，主机可以连接但是vm无法上网（公司绑定了mac地址），尴尬！\n\n因为以前是可以的，所以不存在网上说的nat不能被远程的情况，仔细想想公司是以10开头的网络，而vm是192开头，根本就不在一个网段,那么原来是怎么通信的？\n\n后来查了下是和两个虚拟网卡有关vmnet1和vmnet8。\n一个是设置私有网络（Host Only）时用来和主机通信的，禁用以后就无法正常使用Host-Only模式了；\n另一个是设置网络地址翻译（NAT）时和主机通讯使用的。\n\n而我上次直接禁用了这两个，如果你只是远程vm，只需打开vmnet8.\n\n### 虚拟机网络切换\n公司网线 和自家wifi 切换\n- vm中新建的centos7无法连接网络（桥接模式，没有复制物理网络连接状态），后来ping宿主ip出现network is unreachable（网络不可达）也没有ifcfg-eth0文件（cent7貌似都没有），直接修改ifcfg-eno167777736文件，改为ONBOOT=yes（开机启动此配置），然后service network start。 ok！搞定\n- 如果 NAT也存在上面的问题unreachable，首页查看宿主机器的默认网关，接着将v8的网关改为一致即可（或是.2，.1）。\n\n在公司的时候，宿主机器的ip和mac是绑定的，NAT模式是可以的。(有的时候会有问题)，主要就是这个网关IP的原因。也可以使用桥接，指定宿主机器的物理网卡\n\n- 桥接相当于你的兄弟机器，大家在一个网段；\n- NAT相当于宿主机器做为路由，虚拟机做为局域网中的一台机器（所以IP为192.168**）。\n\n<img src=\"http://upload-images.jianshu.io/upload_images/3650492-b77ea2470a92bb8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"/>\n\n## 常识\n### 1、依赖 \n下载*.sh文件，并直接运行，会下载相关组件及软件（如google浏览器）\nrpm 文件：rpm -ivh *.rpm\n(rpm安装后有些需要yum 真正安装软件及其依赖)\n\n###  2、解压文件\n  cp -r 源位置 目标位置\n  tar -xvf *.tar.gz  (-v/x:压缩/解压，-v:详细过程，-f:输出/输入文件)\n\n### 3、删除\n循环删除此目录及子文件、文件夹\n>$ rm -rf *\n\n### 4、jdk环境\n默认安装路径：usr/java\n环境配置： etc/profile\n通过export只是临时性，需要在profile加上路径，然后source /etc/profile使环境立即生效。\n\n### 5、查询安装了哪些jdk\n>$ rpm -qa|grep jdk\n\n### 6、卸载相应jdk版本\n>$ rpm -qa | grep java #查询\n>$ rpm -e --nodeps * #卸载相关版本\n\n（找不到openjdksource可以：yum -y remove java *）--貌似没用，先备着(只是删除软件包)\n\n### 7、文件属性\n\n列出文件\n> $ ls -l\n> dr-xr-xr-x   2 root root 4096 Dec 14  2012 bin\n\n其中dr-xr-xr-x为文件属性，每个文件的属性由左边第一部分的10个字符组成。\n第0位字符d代表目录（文件：-，链接文档是：l 等等），后面的符号三个一组，分别是\n第一组：属主权限\n第一组：属组权限\n第一组：其他用户的权限\n\n| 文件属性 |     含义      |  值  |\n| :------: | :-----------: | :--: |\n|    r     | 可读（read）  |  4   |\n|    w     | 可写（write） |  2   |\n|    x     |   可执行（execute）    |  1   |\n|    -     | 无 |  0   |\n\nrwx也可以用数字来代替，如-rw-r--r-- (644) 只有所有者才有读和写的权限，组群和其他人只有读的权限\n**注意**\n第0位可能会出现如下情况\n- 为可执行文件时\n4：SetUID，执行的用户暂时获得属主权限，执行完毕权限消失\n2：SetGID，执行的用户暂时获得属组权限，执行完毕权限消失\n- 为普通目录时\n2：SetGID，普通用户对此目录暂时可获得属组权限\n0：SBIT，普通用户只能删除自己创建的文件/目录（粘滞位）\n\n\n### 8、网络下载\nwget 下载想要的rpm或是其他文件\n\n### 9、sudoers\nsudoers文件的作用是控制用户可以执行哪些指令\n\n### 10、开放端口\n新安装的mysql可能无法远程，如果用户表已经赋权好了，远程连接报10038错误\n>$ firewall-cmd --zone=public --add-port=3306/tcp --permanent #开放3306\n\n>$ firewall-cmd --reload #在不改变状态的条件下重新加载防火墙\n\n上面的指令完全ok，下面的备用\n>$ systemctl stop firewalld.service #停止\n\n>$ systemctl disable firewalld.service #禁用\n\n（centos6.5 service iptables stop）\n神坑：直接stop防火墙，依旧访问不了，必须要先开放端口\n\n### 11、vi编辑器\ngg:第一行\nG：最后一行\nctrl+b:上翻一页\nctrl+f:下翻一页 \n\n/* 从光标开始处向文件尾搜索\n?* 从光标开始处向文件首搜索\nn：在同一方向重复上一次搜索命令(/?的方向决定方向)\n\nshift+v:块选择\nyy:块复制\ndd:剪切当前行\np:粘贴\n\n### 12、epel-release\n安装docker的时候看教程需要安装epel-release包，我记得以前安装过，查询之后才知道这是第三库源，里面有很多程序方便下载而且很多扩展包比官网更新较快（官方以稳定为主）。\nyum install docker（centos7下直接安装，不同版本会不同）\n\n\n### 13、进程操作\nctrl-c 发送 SIGINT 信号给前台进程组中的所有进程。常用于终止正在运行的程序。\nctrl-z 发送 SIGTSTP 信号给前台进程组中的所有进程，常用于挂起一个进程\ncrtl+z 将进程挂起，然后fg/bg把刚刚挂在的程序放在前台/后台运行\n\n### 14、系统版本\n系统版本\n>$ cat  /etc/redhat-release\n内核版本\n>$ uname -r\n\n### 15、查看端口占用\n>$ ps -anp |grep 8080\n\n### 16、golang安装\ngolang的install是默认在/usr/local/bin/ 如果想自己配置，需要在profile添加指定路径。\n>$ export GOROOT=/usr/tangyb/go\n\n>$ export GOPATH=$PATH:$GOROOT/bin\n\n### 17、设置tomcat的https\n- 生成文件 jdk1.7.0_79/bin/keytool -genkey -alias polaris -keyalg RSA -keystore ./polaris.keystore \n\n- 导出证书 jdk1.7.0_79/bin/keytool  -export -alias polaris -keystore ./polaris.keystore -storepass * -rfc -file polaris.cer\n\n- 在server.xml文件的ssl/tls端口 加入keystoreFile=\"/usr/baxia/users/tangyb/tomcat_https/polaris.keystore\" keystorePass=\"huoying3138266\"\n\n**一定要记得在输入name的时候是写入 网站域名，否则会出现无法通过身份验证的红叉**\n参考文章http://www.cnblogs.com/green-hand/p/6514597.html\n\n### 18、rm命令的修改（改为mv） 及 定时清除文件\nrm更改\na、创建回收站，存放删除的文件\nb、创建mv脚本文件\nc、在bashrc将rm捕获并改为调用mv脚本\nd、定时清除回收站的文件\n\n### 19、检索locate\nlocate速度很快，是因为有一个检索库，所以用之前最好updatedb下\n\n### 20、邮件，广播等\nw: 查看在线账户\nwall: 群发消息\nwrite: 个人私发\nmail： 邮件发送\n\n### 21、VMware Tools安装\n\n参考：http://www.epinv.com/post/5217.html\n\n虚拟机-安装VMware Tools\n>$ mkdir /media/mnt    #新建挂载目录\n>$ mount /dev/cdrom    /media/mnt/      #挂载VMware Tools安装盘到/media/mnt/目录\n\n可以移动到安装目录在解压安装\n>$  tar zxvf VMwareTools-9.6.2-1688356.tar.gz #解压\n>$ ./vmware-install.pl  #安装\n\n成功后重启服务器\n\n### 22、系统监控\n空间大小\n>$ du -sm ./logs/   #s:指定的目录，m：按照MB来显示大小\n\n日志ERROR高亮\n>$ tail -f xxx.log | perl -pe 's/(ERROR)/\\e[1;31m$1\\e[0m/g'\n\n### 23、集群网络基本配置\n\n环境：centos 7\n\n设置静态ip(NAT模式)\n修改配置文件 \n/etc/sysconfig/network-scripts/ifcfg-eno16777736\n```\nBOOTPROTO=static #默认dhcp，改为静态分配\nONBOOT=yes  #自启动，默认no\nIPADDR=192.168.118.129   #ip地址，其中192.168.118和NAT模式的子网IP相同 \nGATEWAY=192.168.118.2   #网关，和NAT模式设置的网关相同\nNETMASK=255.255.255.0\nDNS1=192.168.118.2     #和网关相同 或是 114.114.114.114（电信的DNS）或是223.5.5.5（阿里），可在NAT模式菜单中修改\n```\n重启ok, ping百度测试\n>$ service network start\n\n### 24、集群资源共享\n采用scp传送，之前需要准备ssh免密登录\nscp -r 源文件夹  username@ip(或者映射名):目标文件夹\n-r：传输文件夹\n\n### 25、profile与bashrc区别 \n/etc/profile与/etc/bashrc的区别 \nprofile：登录会读取\nbashrc：每次执行bash会读取\n\n前一个主要用来设置一些系统变量,比如JAVA_HOME等等，后面一个主要用来保存一些bash的设置。\n- /etc/profile：此文件为系统的每个用户设置环境信息,当用户第一次登录时，该文件被执行。\n并从/etc/profile.d目录的配置文件中搜集shell的设置。\n\n- /etc/bashrc：为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取。\n- ~/.bash_profile：每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时该文件仅仅执行一次。默认情况下，他设置一些环境变量,执行用户的.bashrc文件。\n- ~/.bashrc：该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时，该文件被读取。\n- ~/.bash_logout：当每次退出系统(退出bash shell)时，执行该文件。\n\n/etc/下的很多文件都是系统级别的\n比如crontab、bashrc、profile（相当于全局）\n而这些文件 每个用户也会 单独拥有\n\n### 26、定时任务crontab\n用户级别：\n\n>$ crontab -e #编辑crontab定时文件\n>$ crontab -l #查看明细列表（不包括系统级别的）\n>$ service crond restart #重启crontab的服务\n\n系统级别：\n>$ /etc/crontab #注意格式，需要添加指定用户\n\n所有的crontab的执行过程 都可以在 /var/log/cron 查看\n(如果任务执行了，没有结果，多注意权限、任务本身等等)","source":"_posts/Linux初阶.md","raw":"---\ntitle: linux初级\ndate: 2017-04-26 11:32:30\ntags:\n- linux\ncategories:\n- 技术\n---\n\n# linux学习笔记\n\n## 前言\n学习环境：centos7、centos6.5，两种版本存在部分指令差别。\n\n- deb\ndeb后缀的软件包是for Debian系的（包括Ubuntu），不是给centos安装的。\n如果想安装deb包，要安装dpkg命令~；\n或者是用alien把.deb转化为rpm，然后运行~；\n\n- rpm\nrpm后缀的软件包才是for Redhat系的（包括CentOS）。\n\n- yum\nyum是操作源组（里面各种官方程序），而rpm是操作自己的rpm包（自己下载过来的）\n\n## QA\n### 文件复制信息丢失\n直接从windows拖到vm可能会导致文件缩小（丢失信息）\n### 安装依赖缺失\n使用rpm可能需要依赖包，使用yum安装（yum search ***:查询***的yum源）\n\n### 指令缺失\n如果你的linux采用最小安装（没有图形界面等等），很多命令是默认没有安装的，所以你使用坑二或是在线下载的方式，结果各种错误，此时就需要注意你的网络试试：ip addr；\n\n如果你的ip并没有分配，service network start; 开启网络吧!(记得修改配置文件ONBOOT=yes--开机启动网络).\n\n接着yum search \\*，查询到位置后，yum install \\*。(有的命令需要updatedb,比如locate)\n\n### 阿里云远程登录问题\n阿里云出现了两次不同的登录问题。\n\n#### 问题一\n\n突然有天别人告诉我，所有账户都登录不上（包括root），后来直接通过阿里的控制台登录成功，然后查看原因。\n\n一般远程登录不上，先检查端口22(负责远程连接的端口)，发现root权限竟然无法开放和关闭端口，脚本的所有权已被修改，而且每个文件的所有权都属于某用户，原来他误操作\n\n>$ chmod *** /\n\n当时他没发现可怕的事情，也就没放在心上，之后就炸了。\n\n- 解决方案\n\n因为阿里云是几个同学合伙买的，上面的都是一些个人项目，所以当时直接就直接改了。（暂未发现回退的方案）\n把所有的文件属性都改为root，然后单独修改每个账户的文件夹（包括子文件夹）的权限 (-R：递归修改 子文件)。\n权限修改\n\n>$ chmod -R / \n\n权限组修改\n>$ chgrp \n\n修改文件属性（权限、组等等）\n>$ chown -R tangyb.bxGroup ./polaris \n\n\n\n#### 问题2\n个别用户登录不上（显示建立连接通道，然后就和卡机了一样），查看登录日志（文件：/var/log/secure），发现错误，此用户的进程数过多（默认是1024） 。\n\n- 解决方案\n\n提升进程数（文件：90-nproc.conf）或是关闭此用户下的进程（pkill -u username）。\n\n### 远程问题\n突然某天vm不能远程了，主机不能ping通vm，vm可以ping通主机并且可以上网（采用的nat模式）；\n后改为桥接模式，主机可以连接但是vm无法上网（公司绑定了mac地址），尴尬！\n\n因为以前是可以的，所以不存在网上说的nat不能被远程的情况，仔细想想公司是以10开头的网络，而vm是192开头，根本就不在一个网段,那么原来是怎么通信的？\n\n后来查了下是和两个虚拟网卡有关vmnet1和vmnet8。\n一个是设置私有网络（Host Only）时用来和主机通信的，禁用以后就无法正常使用Host-Only模式了；\n另一个是设置网络地址翻译（NAT）时和主机通讯使用的。\n\n而我上次直接禁用了这两个，如果你只是远程vm，只需打开vmnet8.\n\n### 虚拟机网络切换\n公司网线 和自家wifi 切换\n- vm中新建的centos7无法连接网络（桥接模式，没有复制物理网络连接状态），后来ping宿主ip出现network is unreachable（网络不可达）也没有ifcfg-eth0文件（cent7貌似都没有），直接修改ifcfg-eno167777736文件，改为ONBOOT=yes（开机启动此配置），然后service network start。 ok！搞定\n- 如果 NAT也存在上面的问题unreachable，首页查看宿主机器的默认网关，接着将v8的网关改为一致即可（或是.2，.1）。\n\n在公司的时候，宿主机器的ip和mac是绑定的，NAT模式是可以的。(有的时候会有问题)，主要就是这个网关IP的原因。也可以使用桥接，指定宿主机器的物理网卡\n\n- 桥接相当于你的兄弟机器，大家在一个网段；\n- NAT相当于宿主机器做为路由，虚拟机做为局域网中的一台机器（所以IP为192.168**）。\n\n<img src=\"http://upload-images.jianshu.io/upload_images/3650492-b77ea2470a92bb8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"/>\n\n## 常识\n### 1、依赖 \n下载*.sh文件，并直接运行，会下载相关组件及软件（如google浏览器）\nrpm 文件：rpm -ivh *.rpm\n(rpm安装后有些需要yum 真正安装软件及其依赖)\n\n###  2、解压文件\n  cp -r 源位置 目标位置\n  tar -xvf *.tar.gz  (-v/x:压缩/解压，-v:详细过程，-f:输出/输入文件)\n\n### 3、删除\n循环删除此目录及子文件、文件夹\n>$ rm -rf *\n\n### 4、jdk环境\n默认安装路径：usr/java\n环境配置： etc/profile\n通过export只是临时性，需要在profile加上路径，然后source /etc/profile使环境立即生效。\n\n### 5、查询安装了哪些jdk\n>$ rpm -qa|grep jdk\n\n### 6、卸载相应jdk版本\n>$ rpm -qa | grep java #查询\n>$ rpm -e --nodeps * #卸载相关版本\n\n（找不到openjdksource可以：yum -y remove java *）--貌似没用，先备着(只是删除软件包)\n\n### 7、文件属性\n\n列出文件\n> $ ls -l\n> dr-xr-xr-x   2 root root 4096 Dec 14  2012 bin\n\n其中dr-xr-xr-x为文件属性，每个文件的属性由左边第一部分的10个字符组成。\n第0位字符d代表目录（文件：-，链接文档是：l 等等），后面的符号三个一组，分别是\n第一组：属主权限\n第一组：属组权限\n第一组：其他用户的权限\n\n| 文件属性 |     含义      |  值  |\n| :------: | :-----------: | :--: |\n|    r     | 可读（read）  |  4   |\n|    w     | 可写（write） |  2   |\n|    x     |   可执行（execute）    |  1   |\n|    -     | 无 |  0   |\n\nrwx也可以用数字来代替，如-rw-r--r-- (644) 只有所有者才有读和写的权限，组群和其他人只有读的权限\n**注意**\n第0位可能会出现如下情况\n- 为可执行文件时\n4：SetUID，执行的用户暂时获得属主权限，执行完毕权限消失\n2：SetGID，执行的用户暂时获得属组权限，执行完毕权限消失\n- 为普通目录时\n2：SetGID，普通用户对此目录暂时可获得属组权限\n0：SBIT，普通用户只能删除自己创建的文件/目录（粘滞位）\n\n\n### 8、网络下载\nwget 下载想要的rpm或是其他文件\n\n### 9、sudoers\nsudoers文件的作用是控制用户可以执行哪些指令\n\n### 10、开放端口\n新安装的mysql可能无法远程，如果用户表已经赋权好了，远程连接报10038错误\n>$ firewall-cmd --zone=public --add-port=3306/tcp --permanent #开放3306\n\n>$ firewall-cmd --reload #在不改变状态的条件下重新加载防火墙\n\n上面的指令完全ok，下面的备用\n>$ systemctl stop firewalld.service #停止\n\n>$ systemctl disable firewalld.service #禁用\n\n（centos6.5 service iptables stop）\n神坑：直接stop防火墙，依旧访问不了，必须要先开放端口\n\n### 11、vi编辑器\ngg:第一行\nG：最后一行\nctrl+b:上翻一页\nctrl+f:下翻一页 \n\n/* 从光标开始处向文件尾搜索\n?* 从光标开始处向文件首搜索\nn：在同一方向重复上一次搜索命令(/?的方向决定方向)\n\nshift+v:块选择\nyy:块复制\ndd:剪切当前行\np:粘贴\n\n### 12、epel-release\n安装docker的时候看教程需要安装epel-release包，我记得以前安装过，查询之后才知道这是第三库源，里面有很多程序方便下载而且很多扩展包比官网更新较快（官方以稳定为主）。\nyum install docker（centos7下直接安装，不同版本会不同）\n\n\n### 13、进程操作\nctrl-c 发送 SIGINT 信号给前台进程组中的所有进程。常用于终止正在运行的程序。\nctrl-z 发送 SIGTSTP 信号给前台进程组中的所有进程，常用于挂起一个进程\ncrtl+z 将进程挂起，然后fg/bg把刚刚挂在的程序放在前台/后台运行\n\n### 14、系统版本\n系统版本\n>$ cat  /etc/redhat-release\n内核版本\n>$ uname -r\n\n### 15、查看端口占用\n>$ ps -anp |grep 8080\n\n### 16、golang安装\ngolang的install是默认在/usr/local/bin/ 如果想自己配置，需要在profile添加指定路径。\n>$ export GOROOT=/usr/tangyb/go\n\n>$ export GOPATH=$PATH:$GOROOT/bin\n\n### 17、设置tomcat的https\n- 生成文件 jdk1.7.0_79/bin/keytool -genkey -alias polaris -keyalg RSA -keystore ./polaris.keystore \n\n- 导出证书 jdk1.7.0_79/bin/keytool  -export -alias polaris -keystore ./polaris.keystore -storepass * -rfc -file polaris.cer\n\n- 在server.xml文件的ssl/tls端口 加入keystoreFile=\"/usr/baxia/users/tangyb/tomcat_https/polaris.keystore\" keystorePass=\"huoying3138266\"\n\n**一定要记得在输入name的时候是写入 网站域名，否则会出现无法通过身份验证的红叉**\n参考文章http://www.cnblogs.com/green-hand/p/6514597.html\n\n### 18、rm命令的修改（改为mv） 及 定时清除文件\nrm更改\na、创建回收站，存放删除的文件\nb、创建mv脚本文件\nc、在bashrc将rm捕获并改为调用mv脚本\nd、定时清除回收站的文件\n\n### 19、检索locate\nlocate速度很快，是因为有一个检索库，所以用之前最好updatedb下\n\n### 20、邮件，广播等\nw: 查看在线账户\nwall: 群发消息\nwrite: 个人私发\nmail： 邮件发送\n\n### 21、VMware Tools安装\n\n参考：http://www.epinv.com/post/5217.html\n\n虚拟机-安装VMware Tools\n>$ mkdir /media/mnt    #新建挂载目录\n>$ mount /dev/cdrom    /media/mnt/      #挂载VMware Tools安装盘到/media/mnt/目录\n\n可以移动到安装目录在解压安装\n>$  tar zxvf VMwareTools-9.6.2-1688356.tar.gz #解压\n>$ ./vmware-install.pl  #安装\n\n成功后重启服务器\n\n### 22、系统监控\n空间大小\n>$ du -sm ./logs/   #s:指定的目录，m：按照MB来显示大小\n\n日志ERROR高亮\n>$ tail -f xxx.log | perl -pe 's/(ERROR)/\\e[1;31m$1\\e[0m/g'\n\n### 23、集群网络基本配置\n\n环境：centos 7\n\n设置静态ip(NAT模式)\n修改配置文件 \n/etc/sysconfig/network-scripts/ifcfg-eno16777736\n```\nBOOTPROTO=static #默认dhcp，改为静态分配\nONBOOT=yes  #自启动，默认no\nIPADDR=192.168.118.129   #ip地址，其中192.168.118和NAT模式的子网IP相同 \nGATEWAY=192.168.118.2   #网关，和NAT模式设置的网关相同\nNETMASK=255.255.255.0\nDNS1=192.168.118.2     #和网关相同 或是 114.114.114.114（电信的DNS）或是223.5.5.5（阿里），可在NAT模式菜单中修改\n```\n重启ok, ping百度测试\n>$ service network start\n\n### 24、集群资源共享\n采用scp传送，之前需要准备ssh免密登录\nscp -r 源文件夹  username@ip(或者映射名):目标文件夹\n-r：传输文件夹\n\n### 25、profile与bashrc区别 \n/etc/profile与/etc/bashrc的区别 \nprofile：登录会读取\nbashrc：每次执行bash会读取\n\n前一个主要用来设置一些系统变量,比如JAVA_HOME等等，后面一个主要用来保存一些bash的设置。\n- /etc/profile：此文件为系统的每个用户设置环境信息,当用户第一次登录时，该文件被执行。\n并从/etc/profile.d目录的配置文件中搜集shell的设置。\n\n- /etc/bashrc：为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取。\n- ~/.bash_profile：每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时该文件仅仅执行一次。默认情况下，他设置一些环境变量,执行用户的.bashrc文件。\n- ~/.bashrc：该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时，该文件被读取。\n- ~/.bash_logout：当每次退出系统(退出bash shell)时，执行该文件。\n\n/etc/下的很多文件都是系统级别的\n比如crontab、bashrc、profile（相当于全局）\n而这些文件 每个用户也会 单独拥有\n\n### 26、定时任务crontab\n用户级别：\n\n>$ crontab -e #编辑crontab定时文件\n>$ crontab -l #查看明细列表（不包括系统级别的）\n>$ service crond restart #重启crontab的服务\n\n系统级别：\n>$ /etc/crontab #注意格式，需要添加指定用户\n\n所有的crontab的执行过程 都可以在 /var/log/cron 查看\n(如果任务执行了，没有结果，多注意权限、任务本身等等)","slug":"Linux初阶","published":1,"updated":"2019-06-01T13:45:14.077Z","_id":"cjuxqcibr0002dwmdoivcpumz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"linux学习笔记\"><a href=\"#linux学习笔记\" class=\"headerlink\" title=\"linux学习笔记\"></a>linux学习笔记</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>学习环境：centos7、centos6.5，两种版本存在部分指令差别。</p>\n<ul>\n<li><p>deb<br>deb后缀的软件包是for Debian系的（包括Ubuntu），不是给centos安装的。<br>如果想安装deb包，要安装dpkg命令~；<br>或者是用alien把.deb转化为rpm，然后运行~；</p>\n</li>\n<li><p>rpm<br>rpm后缀的软件包才是for Redhat系的（包括CentOS）。</p>\n</li>\n<li><p>yum<br>yum是操作源组（里面各种官方程序），而rpm是操作自己的rpm包（自己下载过来的）</p>\n</li>\n</ul>\n<h2 id=\"QA\"><a href=\"#QA\" class=\"headerlink\" title=\"QA\"></a>QA</h2><h3 id=\"文件复制信息丢失\"><a href=\"#文件复制信息丢失\" class=\"headerlink\" title=\"文件复制信息丢失\"></a>文件复制信息丢失</h3><p>直接从windows拖到vm可能会导致文件缩小（丢失信息）</p>\n<h3 id=\"安装依赖缺失\"><a href=\"#安装依赖缺失\" class=\"headerlink\" title=\"安装依赖缺失\"></a>安装依赖缺失</h3><p>使用rpm可能需要依赖包，使用yum安装（yum search <strong><em>:查询</em></strong>的yum源）</p>\n<h3 id=\"指令缺失\"><a href=\"#指令缺失\" class=\"headerlink\" title=\"指令缺失\"></a>指令缺失</h3><p>如果你的linux采用最小安装（没有图形界面等等），很多命令是默认没有安装的，所以你使用坑二或是在线下载的方式，结果各种错误，此时就需要注意你的网络试试：ip addr；</p>\n<p>如果你的ip并没有分配，service network start; 开启网络吧!(记得修改配置文件ONBOOT=yes–开机启动网络).</p>\n<p>接着yum search *，查询到位置后，yum install *。(有的命令需要updatedb,比如locate)</p>\n<h3 id=\"阿里云远程登录问题\"><a href=\"#阿里云远程登录问题\" class=\"headerlink\" title=\"阿里云远程登录问题\"></a>阿里云远程登录问题</h3><p>阿里云出现了两次不同的登录问题。</p>\n<h4 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h4><p>突然有天别人告诉我，所有账户都登录不上（包括root），后来直接通过阿里的控制台登录成功，然后查看原因。</p>\n<p>一般远程登录不上，先检查端口22(负责远程连接的端口)，发现root权限竟然无法开放和关闭端口，脚本的所有权已被修改，而且每个文件的所有权都属于某用户，原来他误操作</p>\n<blockquote>\n<p>$ chmod *** /</p>\n</blockquote>\n<p>当时他没发现可怕的事情，也就没放在心上，之后就炸了。</p>\n<ul>\n<li>解决方案</li>\n</ul>\n<p>因为阿里云是几个同学合伙买的，上面的都是一些个人项目，所以当时直接就直接改了。（暂未发现回退的方案）<br>把所有的文件属性都改为root，然后单独修改每个账户的文件夹（包括子文件夹）的权限 (-R：递归修改 子文件)。<br>权限修改</p>\n<blockquote>\n<p>$ chmod -R / </p>\n</blockquote>\n<p>权限组修改</p>\n<blockquote>\n<p>$ chgrp </p>\n</blockquote>\n<p>修改文件属性（权限、组等等）</p>\n<blockquote>\n<p>$ chown -R tangyb.bxGroup ./polaris </p>\n</blockquote>\n<h4 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h4><p>个别用户登录不上（显示建立连接通道，然后就和卡机了一样），查看登录日志（文件：/var/log/secure），发现错误，此用户的进程数过多（默认是1024） 。</p>\n<ul>\n<li>解决方案</li>\n</ul>\n<p>提升进程数（文件：90-nproc.conf）或是关闭此用户下的进程（pkill -u username）。</p>\n<h3 id=\"远程问题\"><a href=\"#远程问题\" class=\"headerlink\" title=\"远程问题\"></a>远程问题</h3><p>突然某天vm不能远程了，主机不能ping通vm，vm可以ping通主机并且可以上网（采用的nat模式）；<br>后改为桥接模式，主机可以连接但是vm无法上网（公司绑定了mac地址），尴尬！</p>\n<p>因为以前是可以的，所以不存在网上说的nat不能被远程的情况，仔细想想公司是以10开头的网络，而vm是192开头，根本就不在一个网段,那么原来是怎么通信的？</p>\n<p>后来查了下是和两个虚拟网卡有关vmnet1和vmnet8。<br>一个是设置私有网络（Host Only）时用来和主机通信的，禁用以后就无法正常使用Host-Only模式了；<br>另一个是设置网络地址翻译（NAT）时和主机通讯使用的。</p>\n<p>而我上次直接禁用了这两个，如果你只是远程vm，只需打开vmnet8.</p>\n<h3 id=\"虚拟机网络切换\"><a href=\"#虚拟机网络切换\" class=\"headerlink\" title=\"虚拟机网络切换\"></a>虚拟机网络切换</h3><p>公司网线 和自家wifi 切换</p>\n<ul>\n<li>vm中新建的centos7无法连接网络（桥接模式，没有复制物理网络连接状态），后来ping宿主ip出现network is unreachable（网络不可达）也没有ifcfg-eth0文件（cent7貌似都没有），直接修改ifcfg-eno167777736文件，改为ONBOOT=yes（开机启动此配置），然后service network start。 ok！搞定</li>\n<li>如果 NAT也存在上面的问题unreachable，首页查看宿主机器的默认网关，接着将v8的网关改为一致即可（或是.2，.1）。</li>\n</ul>\n<p>在公司的时候，宿主机器的ip和mac是绑定的，NAT模式是可以的。(有的时候会有问题)，主要就是这个网关IP的原因。也可以使用桥接，指定宿主机器的物理网卡</p>\n<ul>\n<li>桥接相当于你的兄弟机器，大家在一个网段；</li>\n<li>NAT相当于宿主机器做为路由，虚拟机做为局域网中的一台机器（所以IP为192.168**）。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3650492-b77ea2470a92bb8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"常识\"><a href=\"#常识\" class=\"headerlink\" title=\"常识\"></a>常识</h2><h3 id=\"1、依赖\"><a href=\"#1、依赖\" class=\"headerlink\" title=\"1、依赖\"></a>1、依赖</h3><p>下载<em>.sh文件，并直接运行，会下载相关组件及软件（如google浏览器）<br>rpm 文件：rpm -ivh </em>.rpm<br>(rpm安装后有些需要yum 真正安装软件及其依赖)</p>\n<h3 id=\"2、解压文件\"><a href=\"#2、解压文件\" class=\"headerlink\" title=\"2、解压文件\"></a>2、解压文件</h3><p>  cp -r 源位置 目标位置<br>  tar -xvf *.tar.gz  (-v/x:压缩/解压，-v:详细过程，-f:输出/输入文件)</p>\n<h3 id=\"3、删除\"><a href=\"#3、删除\" class=\"headerlink\" title=\"3、删除\"></a>3、删除</h3><p>循环删除此目录及子文件、文件夹</p>\n<blockquote>\n<p>$ rm -rf *</p>\n</blockquote>\n<h3 id=\"4、jdk环境\"><a href=\"#4、jdk环境\" class=\"headerlink\" title=\"4、jdk环境\"></a>4、jdk环境</h3><p>默认安装路径：usr/java<br>环境配置： etc/profile<br>通过export只是临时性，需要在profile加上路径，然后source /etc/profile使环境立即生效。</p>\n<h3 id=\"5、查询安装了哪些jdk\"><a href=\"#5、查询安装了哪些jdk\" class=\"headerlink\" title=\"5、查询安装了哪些jdk\"></a>5、查询安装了哪些jdk</h3><blockquote>\n<p>$ rpm -qa|grep jdk</p>\n</blockquote>\n<h3 id=\"6、卸载相应jdk版本\"><a href=\"#6、卸载相应jdk版本\" class=\"headerlink\" title=\"6、卸载相应jdk版本\"></a>6、卸载相应jdk版本</h3><blockquote>\n<p>$ rpm -qa | grep java #查询<br>$ rpm -e –nodeps * #卸载相关版本</p>\n</blockquote>\n<p>（找不到openjdksource可以：yum -y remove java *）–貌似没用，先备着(只是删除软件包)</p>\n<h3 id=\"7、文件属性\"><a href=\"#7、文件属性\" class=\"headerlink\" title=\"7、文件属性\"></a>7、文件属性</h3><p>列出文件</p>\n<blockquote>\n<p>$ ls -l<br>dr-xr-xr-x   2 root root 4096 Dec 14  2012 bin</p>\n</blockquote>\n<p>其中dr-xr-xr-x为文件属性，每个文件的属性由左边第一部分的10个字符组成。<br>第0位字符d代表目录（文件：-，链接文档是：l 等等），后面的符号三个一组，分别是<br>第一组：属主权限<br>第一组：属组权限<br>第一组：其他用户的权限</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">文件属性</th>\n<th style=\"text-align:center\">含义</th>\n<th style=\"text-align:center\">值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:center\">可读（read）</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:center\">可写（write）</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">可执行（execute）</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>rwx也可以用数字来代替，如-rw-r–r– (644) 只有所有者才有读和写的权限，组群和其他人只有读的权限<br><strong>注意</strong><br>第0位可能会出现如下情况</p>\n<ul>\n<li>为可执行文件时<br>4：SetUID，执行的用户暂时获得属主权限，执行完毕权限消失<br>2：SetGID，执行的用户暂时获得属组权限，执行完毕权限消失</li>\n<li>为普通目录时<br>2：SetGID，普通用户对此目录暂时可获得属组权限<br>0：SBIT，普通用户只能删除自己创建的文件/目录（粘滞位）</li>\n</ul>\n<h3 id=\"8、网络下载\"><a href=\"#8、网络下载\" class=\"headerlink\" title=\"8、网络下载\"></a>8、网络下载</h3><p>wget 下载想要的rpm或是其他文件</p>\n<h3 id=\"9、sudoers\"><a href=\"#9、sudoers\" class=\"headerlink\" title=\"9、sudoers\"></a>9、sudoers</h3><p>sudoers文件的作用是控制用户可以执行哪些指令</p>\n<h3 id=\"10、开放端口\"><a href=\"#10、开放端口\" class=\"headerlink\" title=\"10、开放端口\"></a>10、开放端口</h3><p>新安装的mysql可能无法远程，如果用户表已经赋权好了，远程连接报10038错误</p>\n<blockquote>\n<p>$ firewall-cmd –zone=public –add-port=3306/tcp –permanent #开放3306</p>\n</blockquote>\n<blockquote>\n<p>$ firewall-cmd –reload #在不改变状态的条件下重新加载防火墙</p>\n</blockquote>\n<p>上面的指令完全ok，下面的备用</p>\n<blockquote>\n<p>$ systemctl stop firewalld.service #停止</p>\n</blockquote>\n<blockquote>\n<p>$ systemctl disable firewalld.service #禁用</p>\n</blockquote>\n<p>（centos6.5 service iptables stop）<br>神坑：直接stop防火墙，依旧访问不了，必须要先开放端口</p>\n<h3 id=\"11、vi编辑器\"><a href=\"#11、vi编辑器\" class=\"headerlink\" title=\"11、vi编辑器\"></a>11、vi编辑器</h3><p>gg:第一行<br>G：最后一行<br>ctrl+b:上翻一页<br>ctrl+f:下翻一页 </p>\n<p>/<em> 从光标开始处向文件尾搜索<br>?</em> 从光标开始处向文件首搜索<br>n：在同一方向重复上一次搜索命令(/?的方向决定方向)</p>\n<p>shift+v:块选择<br>yy:块复制<br>dd:剪切当前行<br>p:粘贴</p>\n<h3 id=\"12、epel-release\"><a href=\"#12、epel-release\" class=\"headerlink\" title=\"12、epel-release\"></a>12、epel-release</h3><p>安装docker的时候看教程需要安装epel-release包，我记得以前安装过，查询之后才知道这是第三库源，里面有很多程序方便下载而且很多扩展包比官网更新较快（官方以稳定为主）。<br>yum install docker（centos7下直接安装，不同版本会不同）</p>\n<h3 id=\"13、进程操作\"><a href=\"#13、进程操作\" class=\"headerlink\" title=\"13、进程操作\"></a>13、进程操作</h3><p>ctrl-c 发送 SIGINT 信号给前台进程组中的所有进程。常用于终止正在运行的程序。<br>ctrl-z 发送 SIGTSTP 信号给前台进程组中的所有进程，常用于挂起一个进程<br>crtl+z 将进程挂起，然后fg/bg把刚刚挂在的程序放在前台/后台运行</p>\n<h3 id=\"14、系统版本\"><a href=\"#14、系统版本\" class=\"headerlink\" title=\"14、系统版本\"></a>14、系统版本</h3><p>系统版本</p>\n<blockquote>\n<p>$ cat  /etc/redhat-release<br>内核版本<br>$ uname -r</p>\n</blockquote>\n<h3 id=\"15、查看端口占用\"><a href=\"#15、查看端口占用\" class=\"headerlink\" title=\"15、查看端口占用\"></a>15、查看端口占用</h3><blockquote>\n<p>$ ps -anp |grep 8080</p>\n</blockquote>\n<h3 id=\"16、golang安装\"><a href=\"#16、golang安装\" class=\"headerlink\" title=\"16、golang安装\"></a>16、golang安装</h3><p>golang的install是默认在/usr/local/bin/ 如果想自己配置，需要在profile添加指定路径。</p>\n<blockquote>\n<p>$ export GOROOT=/usr/tangyb/go</p>\n</blockquote>\n<blockquote>\n<p>$ export GOPATH=$PATH:$GOROOT/bin</p>\n</blockquote>\n<h3 id=\"17、设置tomcat的https\"><a href=\"#17、设置tomcat的https\" class=\"headerlink\" title=\"17、设置tomcat的https\"></a>17、设置tomcat的https</h3><ul>\n<li><p>生成文件 jdk1.7.0_79/bin/keytool -genkey -alias polaris -keyalg RSA -keystore ./polaris.keystore </p>\n</li>\n<li><p>导出证书 jdk1.7.0_79/bin/keytool  -export -alias polaris -keystore ./polaris.keystore -storepass * -rfc -file polaris.cer</p>\n</li>\n<li><p>在server.xml文件的ssl/tls端口 加入keystoreFile=”/usr/baxia/users/tangyb/tomcat_https/polaris.keystore” keystorePass=”huoying3138266”</p>\n</li>\n</ul>\n<p><strong>一定要记得在输入name的时候是写入 网站域名，否则会出现无法通过身份验证的红叉</strong><br>参考文章<a href=\"http://www.cnblogs.com/green-hand/p/6514597.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/green-hand/p/6514597.html</a></p>\n<h3 id=\"18、rm命令的修改（改为mv）-及-定时清除文件\"><a href=\"#18、rm命令的修改（改为mv）-及-定时清除文件\" class=\"headerlink\" title=\"18、rm命令的修改（改为mv） 及 定时清除文件\"></a>18、rm命令的修改（改为mv） 及 定时清除文件</h3><p>rm更改<br>a、创建回收站，存放删除的文件<br>b、创建mv脚本文件<br>c、在bashrc将rm捕获并改为调用mv脚本<br>d、定时清除回收站的文件</p>\n<h3 id=\"19、检索locate\"><a href=\"#19、检索locate\" class=\"headerlink\" title=\"19、检索locate\"></a>19、检索locate</h3><p>locate速度很快，是因为有一个检索库，所以用之前最好updatedb下</p>\n<h3 id=\"20、邮件，广播等\"><a href=\"#20、邮件，广播等\" class=\"headerlink\" title=\"20、邮件，广播等\"></a>20、邮件，广播等</h3><p>w: 查看在线账户<br>wall: 群发消息<br>write: 个人私发<br>mail： 邮件发送</p>\n<h3 id=\"21、VMware-Tools安装\"><a href=\"#21、VMware-Tools安装\" class=\"headerlink\" title=\"21、VMware Tools安装\"></a>21、VMware Tools安装</h3><p>参考：<a href=\"http://www.epinv.com/post/5217.html\" target=\"_blank\" rel=\"noopener\">http://www.epinv.com/post/5217.html</a></p>\n<p>虚拟机-安装VMware Tools</p>\n<blockquote>\n<p>$ mkdir /media/mnt    #新建挂载目录<br>$ mount /dev/cdrom    /media/mnt/      #挂载VMware Tools安装盘到/media/mnt/目录</p>\n</blockquote>\n<p>可以移动到安装目录在解压安装</p>\n<blockquote>\n<p>$  tar zxvf VMwareTools-9.6.2-1688356.tar.gz #解压<br>$ ./vmware-install.pl  #安装</p>\n</blockquote>\n<p>成功后重启服务器</p>\n<h3 id=\"22、系统监控\"><a href=\"#22、系统监控\" class=\"headerlink\" title=\"22、系统监控\"></a>22、系统监控</h3><p>空间大小</p>\n<blockquote>\n<p>$ du -sm ./logs/   #s:指定的目录，m：按照MB来显示大小</p>\n</blockquote>\n<p>日志ERROR高亮</p>\n<blockquote>\n<p>$ tail -f xxx.log | perl -pe ‘s/(ERROR)/\\e[1;31m$1\\e[0m/g’</p>\n</blockquote>\n<h3 id=\"23、集群网络基本配置\"><a href=\"#23、集群网络基本配置\" class=\"headerlink\" title=\"23、集群网络基本配置\"></a>23、集群网络基本配置</h3><p>环境：centos 7</p>\n<p>设置静态ip(NAT模式)<br>修改配置文件<br>/etc/sysconfig/network-scripts/ifcfg-eno16777736<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOTPROTO=static #默认dhcp，改为静态分配</span><br><span class=\"line\">ONBOOT=yes  #自启动，默认no</span><br><span class=\"line\">IPADDR=192.168.118.129   #ip地址，其中192.168.118和NAT模式的子网IP相同 </span><br><span class=\"line\">GATEWAY=192.168.118.2   #网关，和NAT模式设置的网关相同</span><br><span class=\"line\">NETMASK=255.255.255.0</span><br><span class=\"line\">DNS1=192.168.118.2     #和网关相同 或是 114.114.114.114（电信的DNS）或是223.5.5.5（阿里），可在NAT模式菜单中修改</span><br></pre></td></tr></table></figure></p>\n<p>重启ok, ping百度测试</p>\n<blockquote>\n<p>$ service network start</p>\n</blockquote>\n<h3 id=\"24、集群资源共享\"><a href=\"#24、集群资源共享\" class=\"headerlink\" title=\"24、集群资源共享\"></a>24、集群资源共享</h3><p>采用scp传送，之前需要准备ssh免密登录<br>scp -r 源文件夹  username@ip(或者映射名):目标文件夹<br>-r：传输文件夹</p>\n<h3 id=\"25、profile与bashrc区别\"><a href=\"#25、profile与bashrc区别\" class=\"headerlink\" title=\"25、profile与bashrc区别\"></a>25、profile与bashrc区别</h3><p>/etc/profile与/etc/bashrc的区别<br>profile：登录会读取<br>bashrc：每次执行bash会读取</p>\n<p>前一个主要用来设置一些系统变量,比如JAVA_HOME等等，后面一个主要用来保存一些bash的设置。</p>\n<ul>\n<li><p>/etc/profile：此文件为系统的每个用户设置环境信息,当用户第一次登录时，该文件被执行。<br>并从/etc/profile.d目录的配置文件中搜集shell的设置。</p>\n</li>\n<li><p>/etc/bashrc：为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取。</p>\n</li>\n<li>~/.bash_profile：每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时该文件仅仅执行一次。默认情况下，他设置一些环境变量,执行用户的.bashrc文件。</li>\n<li>~/.bashrc：该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时，该文件被读取。</li>\n<li>~/.bash_logout：当每次退出系统(退出bash shell)时，执行该文件。</li>\n</ul>\n<p>/etc/下的很多文件都是系统级别的<br>比如crontab、bashrc、profile（相当于全局）<br>而这些文件 每个用户也会 单独拥有</p>\n<h3 id=\"26、定时任务crontab\"><a href=\"#26、定时任务crontab\" class=\"headerlink\" title=\"26、定时任务crontab\"></a>26、定时任务crontab</h3><p>用户级别：</p>\n<blockquote>\n<p>$ crontab -e #编辑crontab定时文件<br>$ crontab -l #查看明细列表（不包括系统级别的）<br>$ service crond restart #重启crontab的服务</p>\n</blockquote>\n<p>系统级别：</p>\n<blockquote>\n<p>$ /etc/crontab #注意格式，需要添加指定用户</p>\n</blockquote>\n<p>所有的crontab的执行过程 都可以在 /var/log/cron 查看<br>(如果任务执行了，没有结果，多注意权限、任务本身等等)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"linux学习笔记\"><a href=\"#linux学习笔记\" class=\"headerlink\" title=\"linux学习笔记\"></a>linux学习笔记</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>学习环境：centos7、centos6.5，两种版本存在部分指令差别。</p>\n<ul>\n<li><p>deb<br>deb后缀的软件包是for Debian系的（包括Ubuntu），不是给centos安装的。<br>如果想安装deb包，要安装dpkg命令~；<br>或者是用alien把.deb转化为rpm，然后运行~；</p>\n</li>\n<li><p>rpm<br>rpm后缀的软件包才是for Redhat系的（包括CentOS）。</p>\n</li>\n<li><p>yum<br>yum是操作源组（里面各种官方程序），而rpm是操作自己的rpm包（自己下载过来的）</p>\n</li>\n</ul>\n<h2 id=\"QA\"><a href=\"#QA\" class=\"headerlink\" title=\"QA\"></a>QA</h2><h3 id=\"文件复制信息丢失\"><a href=\"#文件复制信息丢失\" class=\"headerlink\" title=\"文件复制信息丢失\"></a>文件复制信息丢失</h3><p>直接从windows拖到vm可能会导致文件缩小（丢失信息）</p>\n<h3 id=\"安装依赖缺失\"><a href=\"#安装依赖缺失\" class=\"headerlink\" title=\"安装依赖缺失\"></a>安装依赖缺失</h3><p>使用rpm可能需要依赖包，使用yum安装（yum search <strong><em>:查询</em></strong>的yum源）</p>\n<h3 id=\"指令缺失\"><a href=\"#指令缺失\" class=\"headerlink\" title=\"指令缺失\"></a>指令缺失</h3><p>如果你的linux采用最小安装（没有图形界面等等），很多命令是默认没有安装的，所以你使用坑二或是在线下载的方式，结果各种错误，此时就需要注意你的网络试试：ip addr；</p>\n<p>如果你的ip并没有分配，service network start; 开启网络吧!(记得修改配置文件ONBOOT=yes–开机启动网络).</p>\n<p>接着yum search *，查询到位置后，yum install *。(有的命令需要updatedb,比如locate)</p>\n<h3 id=\"阿里云远程登录问题\"><a href=\"#阿里云远程登录问题\" class=\"headerlink\" title=\"阿里云远程登录问题\"></a>阿里云远程登录问题</h3><p>阿里云出现了两次不同的登录问题。</p>\n<h4 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h4><p>突然有天别人告诉我，所有账户都登录不上（包括root），后来直接通过阿里的控制台登录成功，然后查看原因。</p>\n<p>一般远程登录不上，先检查端口22(负责远程连接的端口)，发现root权限竟然无法开放和关闭端口，脚本的所有权已被修改，而且每个文件的所有权都属于某用户，原来他误操作</p>\n<blockquote>\n<p>$ chmod *** /</p>\n</blockquote>\n<p>当时他没发现可怕的事情，也就没放在心上，之后就炸了。</p>\n<ul>\n<li>解决方案</li>\n</ul>\n<p>因为阿里云是几个同学合伙买的，上面的都是一些个人项目，所以当时直接就直接改了。（暂未发现回退的方案）<br>把所有的文件属性都改为root，然后单独修改每个账户的文件夹（包括子文件夹）的权限 (-R：递归修改 子文件)。<br>权限修改</p>\n<blockquote>\n<p>$ chmod -R / </p>\n</blockquote>\n<p>权限组修改</p>\n<blockquote>\n<p>$ chgrp </p>\n</blockquote>\n<p>修改文件属性（权限、组等等）</p>\n<blockquote>\n<p>$ chown -R tangyb.bxGroup ./polaris </p>\n</blockquote>\n<h4 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h4><p>个别用户登录不上（显示建立连接通道，然后就和卡机了一样），查看登录日志（文件：/var/log/secure），发现错误，此用户的进程数过多（默认是1024） 。</p>\n<ul>\n<li>解决方案</li>\n</ul>\n<p>提升进程数（文件：90-nproc.conf）或是关闭此用户下的进程（pkill -u username）。</p>\n<h3 id=\"远程问题\"><a href=\"#远程问题\" class=\"headerlink\" title=\"远程问题\"></a>远程问题</h3><p>突然某天vm不能远程了，主机不能ping通vm，vm可以ping通主机并且可以上网（采用的nat模式）；<br>后改为桥接模式，主机可以连接但是vm无法上网（公司绑定了mac地址），尴尬！</p>\n<p>因为以前是可以的，所以不存在网上说的nat不能被远程的情况，仔细想想公司是以10开头的网络，而vm是192开头，根本就不在一个网段,那么原来是怎么通信的？</p>\n<p>后来查了下是和两个虚拟网卡有关vmnet1和vmnet8。<br>一个是设置私有网络（Host Only）时用来和主机通信的，禁用以后就无法正常使用Host-Only模式了；<br>另一个是设置网络地址翻译（NAT）时和主机通讯使用的。</p>\n<p>而我上次直接禁用了这两个，如果你只是远程vm，只需打开vmnet8.</p>\n<h3 id=\"虚拟机网络切换\"><a href=\"#虚拟机网络切换\" class=\"headerlink\" title=\"虚拟机网络切换\"></a>虚拟机网络切换</h3><p>公司网线 和自家wifi 切换</p>\n<ul>\n<li>vm中新建的centos7无法连接网络（桥接模式，没有复制物理网络连接状态），后来ping宿主ip出现network is unreachable（网络不可达）也没有ifcfg-eth0文件（cent7貌似都没有），直接修改ifcfg-eno167777736文件，改为ONBOOT=yes（开机启动此配置），然后service network start。 ok！搞定</li>\n<li>如果 NAT也存在上面的问题unreachable，首页查看宿主机器的默认网关，接着将v8的网关改为一致即可（或是.2，.1）。</li>\n</ul>\n<p>在公司的时候，宿主机器的ip和mac是绑定的，NAT模式是可以的。(有的时候会有问题)，主要就是这个网关IP的原因。也可以使用桥接，指定宿主机器的物理网卡</p>\n<ul>\n<li>桥接相当于你的兄弟机器，大家在一个网段；</li>\n<li>NAT相当于宿主机器做为路由，虚拟机做为局域网中的一台机器（所以IP为192.168**）。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3650492-b77ea2470a92bb8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"常识\"><a href=\"#常识\" class=\"headerlink\" title=\"常识\"></a>常识</h2><h3 id=\"1、依赖\"><a href=\"#1、依赖\" class=\"headerlink\" title=\"1、依赖\"></a>1、依赖</h3><p>下载<em>.sh文件，并直接运行，会下载相关组件及软件（如google浏览器）<br>rpm 文件：rpm -ivh </em>.rpm<br>(rpm安装后有些需要yum 真正安装软件及其依赖)</p>\n<h3 id=\"2、解压文件\"><a href=\"#2、解压文件\" class=\"headerlink\" title=\"2、解压文件\"></a>2、解压文件</h3><p>  cp -r 源位置 目标位置<br>  tar -xvf *.tar.gz  (-v/x:压缩/解压，-v:详细过程，-f:输出/输入文件)</p>\n<h3 id=\"3、删除\"><a href=\"#3、删除\" class=\"headerlink\" title=\"3、删除\"></a>3、删除</h3><p>循环删除此目录及子文件、文件夹</p>\n<blockquote>\n<p>$ rm -rf *</p>\n</blockquote>\n<h3 id=\"4、jdk环境\"><a href=\"#4、jdk环境\" class=\"headerlink\" title=\"4、jdk环境\"></a>4、jdk环境</h3><p>默认安装路径：usr/java<br>环境配置： etc/profile<br>通过export只是临时性，需要在profile加上路径，然后source /etc/profile使环境立即生效。</p>\n<h3 id=\"5、查询安装了哪些jdk\"><a href=\"#5、查询安装了哪些jdk\" class=\"headerlink\" title=\"5、查询安装了哪些jdk\"></a>5、查询安装了哪些jdk</h3><blockquote>\n<p>$ rpm -qa|grep jdk</p>\n</blockquote>\n<h3 id=\"6、卸载相应jdk版本\"><a href=\"#6、卸载相应jdk版本\" class=\"headerlink\" title=\"6、卸载相应jdk版本\"></a>6、卸载相应jdk版本</h3><blockquote>\n<p>$ rpm -qa | grep java #查询<br>$ rpm -e –nodeps * #卸载相关版本</p>\n</blockquote>\n<p>（找不到openjdksource可以：yum -y remove java *）–貌似没用，先备着(只是删除软件包)</p>\n<h3 id=\"7、文件属性\"><a href=\"#7、文件属性\" class=\"headerlink\" title=\"7、文件属性\"></a>7、文件属性</h3><p>列出文件</p>\n<blockquote>\n<p>$ ls -l<br>dr-xr-xr-x   2 root root 4096 Dec 14  2012 bin</p>\n</blockquote>\n<p>其中dr-xr-xr-x为文件属性，每个文件的属性由左边第一部分的10个字符组成。<br>第0位字符d代表目录（文件：-，链接文档是：l 等等），后面的符号三个一组，分别是<br>第一组：属主权限<br>第一组：属组权限<br>第一组：其他用户的权限</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">文件属性</th>\n<th style=\"text-align:center\">含义</th>\n<th style=\"text-align:center\">值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:center\">可读（read）</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:center\">可写（write）</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">可执行（execute）</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>rwx也可以用数字来代替，如-rw-r–r– (644) 只有所有者才有读和写的权限，组群和其他人只有读的权限<br><strong>注意</strong><br>第0位可能会出现如下情况</p>\n<ul>\n<li>为可执行文件时<br>4：SetUID，执行的用户暂时获得属主权限，执行完毕权限消失<br>2：SetGID，执行的用户暂时获得属组权限，执行完毕权限消失</li>\n<li>为普通目录时<br>2：SetGID，普通用户对此目录暂时可获得属组权限<br>0：SBIT，普通用户只能删除自己创建的文件/目录（粘滞位）</li>\n</ul>\n<h3 id=\"8、网络下载\"><a href=\"#8、网络下载\" class=\"headerlink\" title=\"8、网络下载\"></a>8、网络下载</h3><p>wget 下载想要的rpm或是其他文件</p>\n<h3 id=\"9、sudoers\"><a href=\"#9、sudoers\" class=\"headerlink\" title=\"9、sudoers\"></a>9、sudoers</h3><p>sudoers文件的作用是控制用户可以执行哪些指令</p>\n<h3 id=\"10、开放端口\"><a href=\"#10、开放端口\" class=\"headerlink\" title=\"10、开放端口\"></a>10、开放端口</h3><p>新安装的mysql可能无法远程，如果用户表已经赋权好了，远程连接报10038错误</p>\n<blockquote>\n<p>$ firewall-cmd –zone=public –add-port=3306/tcp –permanent #开放3306</p>\n</blockquote>\n<blockquote>\n<p>$ firewall-cmd –reload #在不改变状态的条件下重新加载防火墙</p>\n</blockquote>\n<p>上面的指令完全ok，下面的备用</p>\n<blockquote>\n<p>$ systemctl stop firewalld.service #停止</p>\n</blockquote>\n<blockquote>\n<p>$ systemctl disable firewalld.service #禁用</p>\n</blockquote>\n<p>（centos6.5 service iptables stop）<br>神坑：直接stop防火墙，依旧访问不了，必须要先开放端口</p>\n<h3 id=\"11、vi编辑器\"><a href=\"#11、vi编辑器\" class=\"headerlink\" title=\"11、vi编辑器\"></a>11、vi编辑器</h3><p>gg:第一行<br>G：最后一行<br>ctrl+b:上翻一页<br>ctrl+f:下翻一页 </p>\n<p>/<em> 从光标开始处向文件尾搜索<br>?</em> 从光标开始处向文件首搜索<br>n：在同一方向重复上一次搜索命令(/?的方向决定方向)</p>\n<p>shift+v:块选择<br>yy:块复制<br>dd:剪切当前行<br>p:粘贴</p>\n<h3 id=\"12、epel-release\"><a href=\"#12、epel-release\" class=\"headerlink\" title=\"12、epel-release\"></a>12、epel-release</h3><p>安装docker的时候看教程需要安装epel-release包，我记得以前安装过，查询之后才知道这是第三库源，里面有很多程序方便下载而且很多扩展包比官网更新较快（官方以稳定为主）。<br>yum install docker（centos7下直接安装，不同版本会不同）</p>\n<h3 id=\"13、进程操作\"><a href=\"#13、进程操作\" class=\"headerlink\" title=\"13、进程操作\"></a>13、进程操作</h3><p>ctrl-c 发送 SIGINT 信号给前台进程组中的所有进程。常用于终止正在运行的程序。<br>ctrl-z 发送 SIGTSTP 信号给前台进程组中的所有进程，常用于挂起一个进程<br>crtl+z 将进程挂起，然后fg/bg把刚刚挂在的程序放在前台/后台运行</p>\n<h3 id=\"14、系统版本\"><a href=\"#14、系统版本\" class=\"headerlink\" title=\"14、系统版本\"></a>14、系统版本</h3><p>系统版本</p>\n<blockquote>\n<p>$ cat  /etc/redhat-release<br>内核版本<br>$ uname -r</p>\n</blockquote>\n<h3 id=\"15、查看端口占用\"><a href=\"#15、查看端口占用\" class=\"headerlink\" title=\"15、查看端口占用\"></a>15、查看端口占用</h3><blockquote>\n<p>$ ps -anp |grep 8080</p>\n</blockquote>\n<h3 id=\"16、golang安装\"><a href=\"#16、golang安装\" class=\"headerlink\" title=\"16、golang安装\"></a>16、golang安装</h3><p>golang的install是默认在/usr/local/bin/ 如果想自己配置，需要在profile添加指定路径。</p>\n<blockquote>\n<p>$ export GOROOT=/usr/tangyb/go</p>\n</blockquote>\n<blockquote>\n<p>$ export GOPATH=$PATH:$GOROOT/bin</p>\n</blockquote>\n<h3 id=\"17、设置tomcat的https\"><a href=\"#17、设置tomcat的https\" class=\"headerlink\" title=\"17、设置tomcat的https\"></a>17、设置tomcat的https</h3><ul>\n<li><p>生成文件 jdk1.7.0_79/bin/keytool -genkey -alias polaris -keyalg RSA -keystore ./polaris.keystore </p>\n</li>\n<li><p>导出证书 jdk1.7.0_79/bin/keytool  -export -alias polaris -keystore ./polaris.keystore -storepass * -rfc -file polaris.cer</p>\n</li>\n<li><p>在server.xml文件的ssl/tls端口 加入keystoreFile=”/usr/baxia/users/tangyb/tomcat_https/polaris.keystore” keystorePass=”huoying3138266”</p>\n</li>\n</ul>\n<p><strong>一定要记得在输入name的时候是写入 网站域名，否则会出现无法通过身份验证的红叉</strong><br>参考文章<a href=\"http://www.cnblogs.com/green-hand/p/6514597.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/green-hand/p/6514597.html</a></p>\n<h3 id=\"18、rm命令的修改（改为mv）-及-定时清除文件\"><a href=\"#18、rm命令的修改（改为mv）-及-定时清除文件\" class=\"headerlink\" title=\"18、rm命令的修改（改为mv） 及 定时清除文件\"></a>18、rm命令的修改（改为mv） 及 定时清除文件</h3><p>rm更改<br>a、创建回收站，存放删除的文件<br>b、创建mv脚本文件<br>c、在bashrc将rm捕获并改为调用mv脚本<br>d、定时清除回收站的文件</p>\n<h3 id=\"19、检索locate\"><a href=\"#19、检索locate\" class=\"headerlink\" title=\"19、检索locate\"></a>19、检索locate</h3><p>locate速度很快，是因为有一个检索库，所以用之前最好updatedb下</p>\n<h3 id=\"20、邮件，广播等\"><a href=\"#20、邮件，广播等\" class=\"headerlink\" title=\"20、邮件，广播等\"></a>20、邮件，广播等</h3><p>w: 查看在线账户<br>wall: 群发消息<br>write: 个人私发<br>mail： 邮件发送</p>\n<h3 id=\"21、VMware-Tools安装\"><a href=\"#21、VMware-Tools安装\" class=\"headerlink\" title=\"21、VMware Tools安装\"></a>21、VMware Tools安装</h3><p>参考：<a href=\"http://www.epinv.com/post/5217.html\" target=\"_blank\" rel=\"noopener\">http://www.epinv.com/post/5217.html</a></p>\n<p>虚拟机-安装VMware Tools</p>\n<blockquote>\n<p>$ mkdir /media/mnt    #新建挂载目录<br>$ mount /dev/cdrom    /media/mnt/      #挂载VMware Tools安装盘到/media/mnt/目录</p>\n</blockquote>\n<p>可以移动到安装目录在解压安装</p>\n<blockquote>\n<p>$  tar zxvf VMwareTools-9.6.2-1688356.tar.gz #解压<br>$ ./vmware-install.pl  #安装</p>\n</blockquote>\n<p>成功后重启服务器</p>\n<h3 id=\"22、系统监控\"><a href=\"#22、系统监控\" class=\"headerlink\" title=\"22、系统监控\"></a>22、系统监控</h3><p>空间大小</p>\n<blockquote>\n<p>$ du -sm ./logs/   #s:指定的目录，m：按照MB来显示大小</p>\n</blockquote>\n<p>日志ERROR高亮</p>\n<blockquote>\n<p>$ tail -f xxx.log | perl -pe ‘s/(ERROR)/\\e[1;31m$1\\e[0m/g’</p>\n</blockquote>\n<h3 id=\"23、集群网络基本配置\"><a href=\"#23、集群网络基本配置\" class=\"headerlink\" title=\"23、集群网络基本配置\"></a>23、集群网络基本配置</h3><p>环境：centos 7</p>\n<p>设置静态ip(NAT模式)<br>修改配置文件<br>/etc/sysconfig/network-scripts/ifcfg-eno16777736<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOTPROTO=static #默认dhcp，改为静态分配</span><br><span class=\"line\">ONBOOT=yes  #自启动，默认no</span><br><span class=\"line\">IPADDR=192.168.118.129   #ip地址，其中192.168.118和NAT模式的子网IP相同 </span><br><span class=\"line\">GATEWAY=192.168.118.2   #网关，和NAT模式设置的网关相同</span><br><span class=\"line\">NETMASK=255.255.255.0</span><br><span class=\"line\">DNS1=192.168.118.2     #和网关相同 或是 114.114.114.114（电信的DNS）或是223.5.5.5（阿里），可在NAT模式菜单中修改</span><br></pre></td></tr></table></figure></p>\n<p>重启ok, ping百度测试</p>\n<blockquote>\n<p>$ service network start</p>\n</blockquote>\n<h3 id=\"24、集群资源共享\"><a href=\"#24、集群资源共享\" class=\"headerlink\" title=\"24、集群资源共享\"></a>24、集群资源共享</h3><p>采用scp传送，之前需要准备ssh免密登录<br>scp -r 源文件夹  username@ip(或者映射名):目标文件夹<br>-r：传输文件夹</p>\n<h3 id=\"25、profile与bashrc区别\"><a href=\"#25、profile与bashrc区别\" class=\"headerlink\" title=\"25、profile与bashrc区别\"></a>25、profile与bashrc区别</h3><p>/etc/profile与/etc/bashrc的区别<br>profile：登录会读取<br>bashrc：每次执行bash会读取</p>\n<p>前一个主要用来设置一些系统变量,比如JAVA_HOME等等，后面一个主要用来保存一些bash的设置。</p>\n<ul>\n<li><p>/etc/profile：此文件为系统的每个用户设置环境信息,当用户第一次登录时，该文件被执行。<br>并从/etc/profile.d目录的配置文件中搜集shell的设置。</p>\n</li>\n<li><p>/etc/bashrc：为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取。</p>\n</li>\n<li>~/.bash_profile：每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时该文件仅仅执行一次。默认情况下，他设置一些环境变量,执行用户的.bashrc文件。</li>\n<li>~/.bashrc：该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时，该文件被读取。</li>\n<li>~/.bash_logout：当每次退出系统(退出bash shell)时，执行该文件。</li>\n</ul>\n<p>/etc/下的很多文件都是系统级别的<br>比如crontab、bashrc、profile（相当于全局）<br>而这些文件 每个用户也会 单独拥有</p>\n<h3 id=\"26、定时任务crontab\"><a href=\"#26、定时任务crontab\" class=\"headerlink\" title=\"26、定时任务crontab\"></a>26、定时任务crontab</h3><p>用户级别：</p>\n<blockquote>\n<p>$ crontab -e #编辑crontab定时文件<br>$ crontab -l #查看明细列表（不包括系统级别的）<br>$ service crond restart #重启crontab的服务</p>\n</blockquote>\n<p>系统级别：</p>\n<blockquote>\n<p>$ /etc/crontab #注意格式，需要添加指定用户</p>\n</blockquote>\n<p>所有的crontab的执行过程 都可以在 /var/log/cron 查看<br>(如果任务执行了，没有结果，多注意权限、任务本身等等)</p>\n"},{"title":"霍爱简评","date":"2019-04-12T03:32:30.000Z","_content":"\n![霍乱时期的爱情](http://upload-images.jianshu.io/upload_images/3650492-4bce061331b8926a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>安全感、和谐和幸福，这些东西一旦相加，或许看似爱情，也几乎等于爱情。但它们终究不是爱情。\n\n下班时间花费了几个晚上进出这个世界，和我预想的不同，它根本不是霍乱时期男女主人公相依为命追寻爱情的故事，我曾以为它是梁山伯与祝英台、是Jack和Rose、是罗密欧与朱丽叶。我一心推开厚重的花园大门，铺面而来的竟是如此美妙的天堂。\n>旅行的美丽，毫无意外都是迷途遇到的惊喜。\n\n阿里萨有着盖茨比一般的对爱的执着，也如村上笔下渡边的风流矛盾。他或许也曾有过迷茫、踌躇与忧虑，他也曾想迎娶从众多情人中一位。但他始终相信，肉体可以背叛，但灵魂始终只属于明娜。\n\n明娜年轻之时也是如此的爱着阿里萨，直到她见过更多世面、更多的人。旅行回归后，当阿里萨站在她面前的瞬间，她突然不爱他了。我想，她或许觉得阿里萨已经配不上自己，她已经经历了那么多事情，而他还如当年那般丝毫未变，显的那般稚嫩。这些年除了年龄，他或许什么都未曾增长，但有一样，我坚信，他比以前更爱她了。\n\n明娜最终选择嫁给了拥有财富、声望、良好品德的贵族，乌尔比诺医生。\n\n医生既是英雄又是绅士，除了贵族的陋习外，他几乎是个无可挑剔的男人。他爱着自己的家乡，更为这座城市付出了大量的努力。回顾医生的一生，仅仅只是那一次出轨，并在明娜离开前便已经彻底斩断了与情人间的关系，他同样深爱着明娜。\n\n而在医生去世之前的五十一年时间里，阿里萨不断的更换情人，在肉体间寻求灵魂的安慰。不管和谁在一起， 他始终爱着明娜。渴望听到她的消息，见到她的身影。只因在镜子中看到过明娜，就决定买下它。他爱她爱到发疯，却很少干过疯事，唯独在医生葬礼结束的那个晚上，面对明娜:“这个机会我已经等了半个多世纪，就是为了能再一次向您重申我对您永恒的忠诚和不渝的爱情”，大半辈子的等待在这一刻爆发出来。\n\n五十多年的等待，我想象不出那是什么样的对于爱情的坚持，他对她的爱到底有多么的深刻，他是如何度过这半个世纪的煎熬。合上书本，我能猜想到的，帮他平安度过思念、悲痛时期的，除了与情人间肉体的结合，只能是音乐以及阅读的经历带给他灵魂的安慰、丰富与蜕变。他始终爱着明娜，为了她，自己一步步变得更加优秀、沉稳、富有魅力。当那晚说出那句话之后，他就向她展示了自己独特的灵魂以及忠贞的爱情。\n\n我无法分析，对于医生和阿里萨的爱，谁才是更好的选择。阿里萨爱着明娜，医生同样爱着明娜。或许医生没有阿里萨那般对于爱的坚持，因为有更多的事情需要他来完成，他还有更多的想法与抱负需要实现。就算当年明娜选择的是阿里萨，那么现在的情况又该如何，明娜过的会比现在幸福吗？\n\n我无法知道结果。从这个世界中，我能感觉到的，能触及我灵魂的。我想，*对于爱情来说，乌尔比诺爱的只是妻子，而阿里萨爱的---一直都是明娜。*\n\n而在本书的结尾，作为女主人公的明娜，不管是公然反对女儿，亦或是下达命令调转船头，都是对于社会的控诉，对于爱情的保卫。爱情，那是不论何时何地都可以也应该存在的。当你第一次见到它，它就再也与年龄无关了。","source":"_posts/霍爱简评.md","raw":"---\ntitle: 霍爱简评\ndate: 2019-04-12 11:32:30\ntags: \n- 爱情\n- 书评\ncategories:\n- 文学\n---\n\n![霍乱时期的爱情](http://upload-images.jianshu.io/upload_images/3650492-4bce061331b8926a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>安全感、和谐和幸福，这些东西一旦相加，或许看似爱情，也几乎等于爱情。但它们终究不是爱情。\n\n下班时间花费了几个晚上进出这个世界，和我预想的不同，它根本不是霍乱时期男女主人公相依为命追寻爱情的故事，我曾以为它是梁山伯与祝英台、是Jack和Rose、是罗密欧与朱丽叶。我一心推开厚重的花园大门，铺面而来的竟是如此美妙的天堂。\n>旅行的美丽，毫无意外都是迷途遇到的惊喜。\n\n阿里萨有着盖茨比一般的对爱的执着，也如村上笔下渡边的风流矛盾。他或许也曾有过迷茫、踌躇与忧虑，他也曾想迎娶从众多情人中一位。但他始终相信，肉体可以背叛，但灵魂始终只属于明娜。\n\n明娜年轻之时也是如此的爱着阿里萨，直到她见过更多世面、更多的人。旅行回归后，当阿里萨站在她面前的瞬间，她突然不爱他了。我想，她或许觉得阿里萨已经配不上自己，她已经经历了那么多事情，而他还如当年那般丝毫未变，显的那般稚嫩。这些年除了年龄，他或许什么都未曾增长，但有一样，我坚信，他比以前更爱她了。\n\n明娜最终选择嫁给了拥有财富、声望、良好品德的贵族，乌尔比诺医生。\n\n医生既是英雄又是绅士，除了贵族的陋习外，他几乎是个无可挑剔的男人。他爱着自己的家乡，更为这座城市付出了大量的努力。回顾医生的一生，仅仅只是那一次出轨，并在明娜离开前便已经彻底斩断了与情人间的关系，他同样深爱着明娜。\n\n而在医生去世之前的五十一年时间里，阿里萨不断的更换情人，在肉体间寻求灵魂的安慰。不管和谁在一起， 他始终爱着明娜。渴望听到她的消息，见到她的身影。只因在镜子中看到过明娜，就决定买下它。他爱她爱到发疯，却很少干过疯事，唯独在医生葬礼结束的那个晚上，面对明娜:“这个机会我已经等了半个多世纪，就是为了能再一次向您重申我对您永恒的忠诚和不渝的爱情”，大半辈子的等待在这一刻爆发出来。\n\n五十多年的等待，我想象不出那是什么样的对于爱情的坚持，他对她的爱到底有多么的深刻，他是如何度过这半个世纪的煎熬。合上书本，我能猜想到的，帮他平安度过思念、悲痛时期的，除了与情人间肉体的结合，只能是音乐以及阅读的经历带给他灵魂的安慰、丰富与蜕变。他始终爱着明娜，为了她，自己一步步变得更加优秀、沉稳、富有魅力。当那晚说出那句话之后，他就向她展示了自己独特的灵魂以及忠贞的爱情。\n\n我无法分析，对于医生和阿里萨的爱，谁才是更好的选择。阿里萨爱着明娜，医生同样爱着明娜。或许医生没有阿里萨那般对于爱的坚持，因为有更多的事情需要他来完成，他还有更多的想法与抱负需要实现。就算当年明娜选择的是阿里萨，那么现在的情况又该如何，明娜过的会比现在幸福吗？\n\n我无法知道结果。从这个世界中，我能感觉到的，能触及我灵魂的。我想，*对于爱情来说，乌尔比诺爱的只是妻子，而阿里萨爱的---一直都是明娜。*\n\n而在本书的结尾，作为女主人公的明娜，不管是公然反对女儿，亦或是下达命令调转船头，都是对于社会的控诉，对于爱情的保卫。爱情，那是不论何时何地都可以也应该存在的。当你第一次见到它，它就再也与年龄无关了。","slug":"霍爱简评","published":1,"updated":"2019-04-26T07:00:19.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuxqcicv0009dwmd2oyawb69","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/3650492-4bce061331b8926a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"霍乱时期的爱情\"></p>\n<blockquote>\n<p>安全感、和谐和幸福，这些东西一旦相加，或许看似爱情，也几乎等于爱情。但它们终究不是爱情。</p>\n</blockquote>\n<p>下班时间花费了几个晚上进出这个世界，和我预想的不同，它根本不是霍乱时期男女主人公相依为命追寻爱情的故事，我曾以为它是梁山伯与祝英台、是Jack和Rose、是罗密欧与朱丽叶。我一心推开厚重的花园大门，铺面而来的竟是如此美妙的天堂。</p>\n<blockquote>\n<p>旅行的美丽，毫无意外都是迷途遇到的惊喜。</p>\n</blockquote>\n<p>阿里萨有着盖茨比一般的对爱的执着，也如村上笔下渡边的风流矛盾。他或许也曾有过迷茫、踌躇与忧虑，他也曾想迎娶从众多情人中一位。但他始终相信，肉体可以背叛，但灵魂始终只属于明娜。</p>\n<p>明娜年轻之时也是如此的爱着阿里萨，直到她见过更多世面、更多的人。旅行回归后，当阿里萨站在她面前的瞬间，她突然不爱他了。我想，她或许觉得阿里萨已经配不上自己，她已经经历了那么多事情，而他还如当年那般丝毫未变，显的那般稚嫩。这些年除了年龄，他或许什么都未曾增长，但有一样，我坚信，他比以前更爱她了。</p>\n<p>明娜最终选择嫁给了拥有财富、声望、良好品德的贵族，乌尔比诺医生。</p>\n<p>医生既是英雄又是绅士，除了贵族的陋习外，他几乎是个无可挑剔的男人。他爱着自己的家乡，更为这座城市付出了大量的努力。回顾医生的一生，仅仅只是那一次出轨，并在明娜离开前便已经彻底斩断了与情人间的关系，他同样深爱着明娜。</p>\n<p>而在医生去世之前的五十一年时间里，阿里萨不断的更换情人，在肉体间寻求灵魂的安慰。不管和谁在一起， 他始终爱着明娜。渴望听到她的消息，见到她的身影。只因在镜子中看到过明娜，就决定买下它。他爱她爱到发疯，却很少干过疯事，唯独在医生葬礼结束的那个晚上，面对明娜:“这个机会我已经等了半个多世纪，就是为了能再一次向您重申我对您永恒的忠诚和不渝的爱情”，大半辈子的等待在这一刻爆发出来。</p>\n<p>五十多年的等待，我想象不出那是什么样的对于爱情的坚持，他对她的爱到底有多么的深刻，他是如何度过这半个世纪的煎熬。合上书本，我能猜想到的，帮他平安度过思念、悲痛时期的，除了与情人间肉体的结合，只能是音乐以及阅读的经历带给他灵魂的安慰、丰富与蜕变。他始终爱着明娜，为了她，自己一步步变得更加优秀、沉稳、富有魅力。当那晚说出那句话之后，他就向她展示了自己独特的灵魂以及忠贞的爱情。</p>\n<p>我无法分析，对于医生和阿里萨的爱，谁才是更好的选择。阿里萨爱着明娜，医生同样爱着明娜。或许医生没有阿里萨那般对于爱的坚持，因为有更多的事情需要他来完成，他还有更多的想法与抱负需要实现。就算当年明娜选择的是阿里萨，那么现在的情况又该如何，明娜过的会比现在幸福吗？</p>\n<p>我无法知道结果。从这个世界中，我能感觉到的，能触及我灵魂的。我想，<em>对于爱情来说，乌尔比诺爱的只是妻子，而阿里萨爱的—一直都是明娜。</em></p>\n<p>而在本书的结尾，作为女主人公的明娜，不管是公然反对女儿，亦或是下达命令调转船头，都是对于社会的控诉，对于爱情的保卫。爱情，那是不论何时何地都可以也应该存在的。当你第一次见到它，它就再也与年龄无关了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/3650492-4bce061331b8926a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"霍乱时期的爱情\"></p>\n<blockquote>\n<p>安全感、和谐和幸福，这些东西一旦相加，或许看似爱情，也几乎等于爱情。但它们终究不是爱情。</p>\n</blockquote>\n<p>下班时间花费了几个晚上进出这个世界，和我预想的不同，它根本不是霍乱时期男女主人公相依为命追寻爱情的故事，我曾以为它是梁山伯与祝英台、是Jack和Rose、是罗密欧与朱丽叶。我一心推开厚重的花园大门，铺面而来的竟是如此美妙的天堂。</p>\n<blockquote>\n<p>旅行的美丽，毫无意外都是迷途遇到的惊喜。</p>\n</blockquote>\n<p>阿里萨有着盖茨比一般的对爱的执着，也如村上笔下渡边的风流矛盾。他或许也曾有过迷茫、踌躇与忧虑，他也曾想迎娶从众多情人中一位。但他始终相信，肉体可以背叛，但灵魂始终只属于明娜。</p>\n<p>明娜年轻之时也是如此的爱着阿里萨，直到她见过更多世面、更多的人。旅行回归后，当阿里萨站在她面前的瞬间，她突然不爱他了。我想，她或许觉得阿里萨已经配不上自己，她已经经历了那么多事情，而他还如当年那般丝毫未变，显的那般稚嫩。这些年除了年龄，他或许什么都未曾增长，但有一样，我坚信，他比以前更爱她了。</p>\n<p>明娜最终选择嫁给了拥有财富、声望、良好品德的贵族，乌尔比诺医生。</p>\n<p>医生既是英雄又是绅士，除了贵族的陋习外，他几乎是个无可挑剔的男人。他爱着自己的家乡，更为这座城市付出了大量的努力。回顾医生的一生，仅仅只是那一次出轨，并在明娜离开前便已经彻底斩断了与情人间的关系，他同样深爱着明娜。</p>\n<p>而在医生去世之前的五十一年时间里，阿里萨不断的更换情人，在肉体间寻求灵魂的安慰。不管和谁在一起， 他始终爱着明娜。渴望听到她的消息，见到她的身影。只因在镜子中看到过明娜，就决定买下它。他爱她爱到发疯，却很少干过疯事，唯独在医生葬礼结束的那个晚上，面对明娜:“这个机会我已经等了半个多世纪，就是为了能再一次向您重申我对您永恒的忠诚和不渝的爱情”，大半辈子的等待在这一刻爆发出来。</p>\n<p>五十多年的等待，我想象不出那是什么样的对于爱情的坚持，他对她的爱到底有多么的深刻，他是如何度过这半个世纪的煎熬。合上书本，我能猜想到的，帮他平安度过思念、悲痛时期的，除了与情人间肉体的结合，只能是音乐以及阅读的经历带给他灵魂的安慰、丰富与蜕变。他始终爱着明娜，为了她，自己一步步变得更加优秀、沉稳、富有魅力。当那晚说出那句话之后，他就向她展示了自己独特的灵魂以及忠贞的爱情。</p>\n<p>我无法分析，对于医生和阿里萨的爱，谁才是更好的选择。阿里萨爱着明娜，医生同样爱着明娜。或许医生没有阿里萨那般对于爱的坚持，因为有更多的事情需要他来完成，他还有更多的想法与抱负需要实现。就算当年明娜选择的是阿里萨，那么现在的情况又该如何，明娜过的会比现在幸福吗？</p>\n<p>我无法知道结果。从这个世界中，我能感觉到的，能触及我灵魂的。我想，<em>对于爱情来说，乌尔比诺爱的只是妻子，而阿里萨爱的—一直都是明娜。</em></p>\n<p>而在本书的结尾，作为女主人公的明娜，不管是公然反对女儿，亦或是下达命令调转船头，都是对于社会的控诉，对于爱情的保卫。爱情，那是不论何时何地都可以也应该存在的。当你第一次见到它，它就再也与年龄无关了。</p>\n"},{"title":"docker基础","date":"2017-02-09T13:14:58.000Z","_content":"\n# 前言\n- 这些笔记都是在16年底弄的（那时候公司很还没有docker，但是国内已经很火了，很多公司都在考虑docker落地，服务上云的事情，公司后来由技术部大佬亲手构建容器平台，本身没有参与到平台搭建中，但后期的代码及部署改造经历过），当时看了下基础记了点笔记，前不久整理下放在博客里面算是纪念。--2019.05.17\n\n  \n\n- 目前主要的部署流程：开发人员将代码提交到gitlab之后，通过Jenkins打包代码 并执行构建脚本，在Rancher管理运行的服务，最后日志由elk收集展示搜索。（jenkins + docker + rancher + elk）\n\n  \n\n- 感受：改造升级之后，基本上都是一键部署，缩短了大量的上线时间，减少了因为手工上线可能带来的误操作问题。同时，伸缩扩容等 可以快速的响应流量的变化。\n\n\n# 环境准备\n系统环境：centos7\n安装\n\n>$ yum install docker\n\n开启服务\n>$ service docker start\n\n测试\n>$ docker run hello-world (或是docker verison)\n\n\n# 镜像测试\n搜索本地镜像\n>$ docker images\n\n查看源镜像库有关java方面的镜像并且收藏数大于10\n>$ docker search -s 10 java \n\n从镜像仓库拉取镜像\n>$ docker pull *** \n\n后台运行learn/tutorial镜像并执行sh脚本(脚本含义：每秒输出一次hello world)\n>$ docker run -d learn/tutorial /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n\n>$ docker run -t -i runoob/ubuntu:v2 /bin/bash  \n\n查询正在运行的镜像\n>$ docker ps\n\n从上面的查询的ID来查看此镜像输出的日志\n>$ docker logs ID\n\n停止镜像\n>$ docker stop ID\n\n# 搭建镜像\n\n## 安装基础系统环境\n\n下载一个linux基础镜像\n>$ docker pull centos\n\n国外的docker Hub可能比较慢，使用下面的命令修改 daemon.json文件，会添加一个registry-mirrors：注册服务器镜像(使用daocloud的，默认为docker Hub)\n>$ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://ce611378.m.daocloud.io\n\n查看本地镜像列表\n>$ docker images\n\n## 操作基础系统\n\n进入系统\n>$ docker run -i -t centos /bin/bash\n\nexit退出系统----------退出系统，容器会停止，所以在此之前用此账户再开一个窗口 执行下面的操作\n\n查询到所有的启动过容器\n>$ docker ps -a \n\n启动停止的镜像\n>$ docker start ID \n\n进入镜像中 \n>$ docker attach ID           ###exit之后镜像依旧挂掉\n或是 \n>$ docker exec -i -t ID  /bin/bash   ###这种方式镜像在后台存活\n\n## 搭建项目运行环境\nJDK8 + tomcat7\n- 现在宿主机器里wget下资源(JDK8+tomcat7的tar包),坑爹的JDK7官网已经不支持游客下载\n- 将宿主磁盘挂载到docker镜像mnt目录下，解压然后cp到自己定义的目录\n- jdk: 修改/etc/profile，添加路径保存，然后source /etc/profile更新\n\n## 打包镜像\n**建议使用dockerfile构建**\n\n提交修改\n>$ docker commit -m=\"第一次提交\" -a=\"polaris\" 425cef90ab3f polaris/centos:v1\n\n-m: 描述信息\n-a: 作者\n425cef90ab3f：ID\npolaris/centos:v1 :创建的目标镜像名+tag\n\n重新进入刚刚提交的镜像(之前所做的操作都存在)\n>$ docker run -i -t polaris/centos:v1 /bin/bash\n\n**如果你想推送你的镜像到注册中心**\n首先需要在docker官网创建一个Repository，如果你本地的名字和创建的不一样，会提示未授权。\n本地打一个tag\n\n>$ docker tag local-images:v1 dockerHub-images:v1\n\n登录docker\n>$ docker login \n\n然后push你的本地镜像（很多操作和git类似）\n>$ docker push **** \n\n快速构建\n\n- 使用docker bulid来构建（会读取dockerfile文件），更快速简洁\n- 先pull然后修改之后commit（方法一的底层也是通过这种方式）\n\n## 其它\n### 更换镜像库\n从国外服务器pull镜像速度较慢，直接使用由DaoCloud或者阿里提供的Registry Mirror服务\nhttp://blog.daocloud.io/how-to-master-docker-image/\n\n### 挂载磁盘\n将宿主的下载文件夹 挂载 到docker容器polaris镜像中的docker下\n>$ docker run -it -v /home/download:/mnt polaris/centos:v1 /bin/bash\n\n没试过在已经启动的docker镜像中挂载\n\n\n\n### 查看容器相关信息\n主要是查看网络配置，容器里面很多命令都没有\n>$ docker inspect a7e0139b5940\n\n### 端口映射\n交互型\n>$ docker run -i -t -p 5000:8080 polaris/centos:v1 /bin/bash \n\n后台型\n>$ docker run -d -i -t -p 5000:8080 polaris/centos:v1 \n\n### 阿里云\n以我的阿里云为例\n下载\n>$ docker pull registry.cn-hangzhou.aliyuncs.com/polarisnosnow/polaris:v2\n\n上传\n>$ docker login --username=****  registry.cn-hangzhou.aliyuncs.com\n>$ docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/polarisnosnow/polaris:[镜像版本号]\n>$ docker push registry.cn-hangzhou.aliyuncs.com/polarisnosnow/polaris:[镜像版本号]\n\n### 搭建注册服务器\n下载服务器镜像并运行\n>$ docker pull registry \n>$ docker run -p 5000:5000 -d -i -t registry \n\n提交并推送\n>$ docker commit cid 127.0.0.1:5000/my_image:v1\n>$ docker push 127.0.0.1:5000/my_image:v1\n\n可以使用docker API查看库中结果\nhttp://127.0.0.1:5000/v2/_catalog\nhttp://127.0.0.1:5000/v2/my_image/tag/list\n\n注意客户端在/etc/docker/daemon.json 中添加{ \"insecure-registries\":[\"127.0.0.1:5000\"]}\n安全访问（默认走的https）\n\n### docker管理界面\n- **dockerUI**\n\n只能用于单机，单功能齐全。\n\n构建脚本\n\n>$ docker run -d -p 9000:9000 --privileged -v /var/run/docker.sock:/var/run/docker.sock uifd/ui-for-docker\n\n<br/>\n\n- **shipyard**\n\n适合集群，各种资源分配，性能检测等\n\n/etc/sysconfig/docker中添加对2375的监听 \n\n> OPTIONS=\"-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock\"\n\nshipyard构建脚本（启动的容器较多）\n>$ curl -s https://shipyard-project.com/deploy | bash -s Username: admin Password: shipyard\n\n或者\n>$ docker run --rm -v /var/run/docker.sock:/var/run/docker.sock shipyard/deploy start\n","source":"_posts/docker基础.md","raw":"---\ntitle: docker基础\ndate: 2017-02-09 21:14:58\ntags:\n- linux\n- docker\ncategories:\n- 技术\n---\n\n# 前言\n- 这些笔记都是在16年底弄的（那时候公司很还没有docker，但是国内已经很火了，很多公司都在考虑docker落地，服务上云的事情，公司后来由技术部大佬亲手构建容器平台，本身没有参与到平台搭建中，但后期的代码及部署改造经历过），当时看了下基础记了点笔记，前不久整理下放在博客里面算是纪念。--2019.05.17\n\n  \n\n- 目前主要的部署流程：开发人员将代码提交到gitlab之后，通过Jenkins打包代码 并执行构建脚本，在Rancher管理运行的服务，最后日志由elk收集展示搜索。（jenkins + docker + rancher + elk）\n\n  \n\n- 感受：改造升级之后，基本上都是一键部署，缩短了大量的上线时间，减少了因为手工上线可能带来的误操作问题。同时，伸缩扩容等 可以快速的响应流量的变化。\n\n\n# 环境准备\n系统环境：centos7\n安装\n\n>$ yum install docker\n\n开启服务\n>$ service docker start\n\n测试\n>$ docker run hello-world (或是docker verison)\n\n\n# 镜像测试\n搜索本地镜像\n>$ docker images\n\n查看源镜像库有关java方面的镜像并且收藏数大于10\n>$ docker search -s 10 java \n\n从镜像仓库拉取镜像\n>$ docker pull *** \n\n后台运行learn/tutorial镜像并执行sh脚本(脚本含义：每秒输出一次hello world)\n>$ docker run -d learn/tutorial /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n\n>$ docker run -t -i runoob/ubuntu:v2 /bin/bash  \n\n查询正在运行的镜像\n>$ docker ps\n\n从上面的查询的ID来查看此镜像输出的日志\n>$ docker logs ID\n\n停止镜像\n>$ docker stop ID\n\n# 搭建镜像\n\n## 安装基础系统环境\n\n下载一个linux基础镜像\n>$ docker pull centos\n\n国外的docker Hub可能比较慢，使用下面的命令修改 daemon.json文件，会添加一个registry-mirrors：注册服务器镜像(使用daocloud的，默认为docker Hub)\n>$ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://ce611378.m.daocloud.io\n\n查看本地镜像列表\n>$ docker images\n\n## 操作基础系统\n\n进入系统\n>$ docker run -i -t centos /bin/bash\n\nexit退出系统----------退出系统，容器会停止，所以在此之前用此账户再开一个窗口 执行下面的操作\n\n查询到所有的启动过容器\n>$ docker ps -a \n\n启动停止的镜像\n>$ docker start ID \n\n进入镜像中 \n>$ docker attach ID           ###exit之后镜像依旧挂掉\n或是 \n>$ docker exec -i -t ID  /bin/bash   ###这种方式镜像在后台存活\n\n## 搭建项目运行环境\nJDK8 + tomcat7\n- 现在宿主机器里wget下资源(JDK8+tomcat7的tar包),坑爹的JDK7官网已经不支持游客下载\n- 将宿主磁盘挂载到docker镜像mnt目录下，解压然后cp到自己定义的目录\n- jdk: 修改/etc/profile，添加路径保存，然后source /etc/profile更新\n\n## 打包镜像\n**建议使用dockerfile构建**\n\n提交修改\n>$ docker commit -m=\"第一次提交\" -a=\"polaris\" 425cef90ab3f polaris/centos:v1\n\n-m: 描述信息\n-a: 作者\n425cef90ab3f：ID\npolaris/centos:v1 :创建的目标镜像名+tag\n\n重新进入刚刚提交的镜像(之前所做的操作都存在)\n>$ docker run -i -t polaris/centos:v1 /bin/bash\n\n**如果你想推送你的镜像到注册中心**\n首先需要在docker官网创建一个Repository，如果你本地的名字和创建的不一样，会提示未授权。\n本地打一个tag\n\n>$ docker tag local-images:v1 dockerHub-images:v1\n\n登录docker\n>$ docker login \n\n然后push你的本地镜像（很多操作和git类似）\n>$ docker push **** \n\n快速构建\n\n- 使用docker bulid来构建（会读取dockerfile文件），更快速简洁\n- 先pull然后修改之后commit（方法一的底层也是通过这种方式）\n\n## 其它\n### 更换镜像库\n从国外服务器pull镜像速度较慢，直接使用由DaoCloud或者阿里提供的Registry Mirror服务\nhttp://blog.daocloud.io/how-to-master-docker-image/\n\n### 挂载磁盘\n将宿主的下载文件夹 挂载 到docker容器polaris镜像中的docker下\n>$ docker run -it -v /home/download:/mnt polaris/centos:v1 /bin/bash\n\n没试过在已经启动的docker镜像中挂载\n\n\n\n### 查看容器相关信息\n主要是查看网络配置，容器里面很多命令都没有\n>$ docker inspect a7e0139b5940\n\n### 端口映射\n交互型\n>$ docker run -i -t -p 5000:8080 polaris/centos:v1 /bin/bash \n\n后台型\n>$ docker run -d -i -t -p 5000:8080 polaris/centos:v1 \n\n### 阿里云\n以我的阿里云为例\n下载\n>$ docker pull registry.cn-hangzhou.aliyuncs.com/polarisnosnow/polaris:v2\n\n上传\n>$ docker login --username=****  registry.cn-hangzhou.aliyuncs.com\n>$ docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/polarisnosnow/polaris:[镜像版本号]\n>$ docker push registry.cn-hangzhou.aliyuncs.com/polarisnosnow/polaris:[镜像版本号]\n\n### 搭建注册服务器\n下载服务器镜像并运行\n>$ docker pull registry \n>$ docker run -p 5000:5000 -d -i -t registry \n\n提交并推送\n>$ docker commit cid 127.0.0.1:5000/my_image:v1\n>$ docker push 127.0.0.1:5000/my_image:v1\n\n可以使用docker API查看库中结果\nhttp://127.0.0.1:5000/v2/_catalog\nhttp://127.0.0.1:5000/v2/my_image/tag/list\n\n注意客户端在/etc/docker/daemon.json 中添加{ \"insecure-registries\":[\"127.0.0.1:5000\"]}\n安全访问（默认走的https）\n\n### docker管理界面\n- **dockerUI**\n\n只能用于单机，单功能齐全。\n\n构建脚本\n\n>$ docker run -d -p 9000:9000 --privileged -v /var/run/docker.sock:/var/run/docker.sock uifd/ui-for-docker\n\n<br/>\n\n- **shipyard**\n\n适合集群，各种资源分配，性能检测等\n\n/etc/sysconfig/docker中添加对2375的监听 \n\n> OPTIONS=\"-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock\"\n\nshipyard构建脚本（启动的容器较多）\n>$ curl -s https://shipyard-project.com/deploy | bash -s Username: admin Password: shipyard\n\n或者\n>$ docker run --rm -v /var/run/docker.sock:/var/run/docker.sock shipyard/deploy start\n","slug":"docker基础","published":1,"updated":"2019-06-01T13:45:14.080Z","_id":"cjvdq1lqy0000zsmdnbkfbccf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li>这些笔记都是在16年底弄的（那时候公司很还没有docker，但是国内已经很火了，很多公司都在考虑docker落地，服务上云的事情，公司后来由技术部大佬亲手构建容器平台，本身没有参与到平台搭建中，但后期的代码及部署改造经历过），当时看了下基础记了点笔记，前不久整理下放在博客里面算是纪念。–2019.05.17</li>\n</ul>\n<ul>\n<li>目前主要的部署流程：开发人员将代码提交到gitlab之后，通过Jenkins打包代码 并执行构建脚本，在Rancher管理运行的服务，最后日志由elk收集展示搜索。（jenkins + docker + rancher + elk）</li>\n</ul>\n<ul>\n<li>感受：改造升级之后，基本上都是一键部署，缩短了大量的上线时间，减少了因为手工上线可能带来的误操作问题。同时，伸缩扩容等 可以快速的响应流量的变化。</li>\n</ul>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>系统环境：centos7<br>安装</p>\n<blockquote>\n<p>$ yum install docker</p>\n</blockquote>\n<p>开启服务</p>\n<blockquote>\n<p>$ service docker start</p>\n</blockquote>\n<p>测试</p>\n<blockquote>\n<p>$ docker run hello-world (或是docker verison)</p>\n</blockquote>\n<h1 id=\"镜像测试\"><a href=\"#镜像测试\" class=\"headerlink\" title=\"镜像测试\"></a>镜像测试</h1><p>搜索本地镜像</p>\n<blockquote>\n<p>$ docker images</p>\n</blockquote>\n<p>查看源镜像库有关java方面的镜像并且收藏数大于10</p>\n<blockquote>\n<p>$ docker search -s 10 java </p>\n</blockquote>\n<p>从镜像仓库拉取镜像</p>\n<blockquote>\n<p>$ docker pull *** </p>\n</blockquote>\n<p>后台运行learn/tutorial镜像并执行sh脚本(脚本含义：每秒输出一次hello world)</p>\n<blockquote>\n<p>$ docker run -d learn/tutorial /bin/sh -c “while true; do echo hello world; sleep 1; done”</p>\n</blockquote>\n<blockquote>\n<p>$ docker run -t -i runoob/ubuntu:v2 /bin/bash  </p>\n</blockquote>\n<p>查询正在运行的镜像</p>\n<blockquote>\n<p>$ docker ps</p>\n</blockquote>\n<p>从上面的查询的ID来查看此镜像输出的日志</p>\n<blockquote>\n<p>$ docker logs ID</p>\n</blockquote>\n<p>停止镜像</p>\n<blockquote>\n<p>$ docker stop ID</p>\n</blockquote>\n<h1 id=\"搭建镜像\"><a href=\"#搭建镜像\" class=\"headerlink\" title=\"搭建镜像\"></a>搭建镜像</h1><h2 id=\"安装基础系统环境\"><a href=\"#安装基础系统环境\" class=\"headerlink\" title=\"安装基础系统环境\"></a>安装基础系统环境</h2><p>下载一个linux基础镜像</p>\n<blockquote>\n<p>$ docker pull centos</p>\n</blockquote>\n<p>国外的docker Hub可能比较慢，使用下面的命令修改 daemon.json文件，会添加一个registry-mirrors：注册服务器镜像(使用daocloud的，默认为docker Hub)</p>\n<blockquote>\n<p>$ curl -sSL <a href=\"https://get.daocloud.io/daotools/set_mirror.sh\" target=\"_blank\" rel=\"noopener\">https://get.daocloud.io/daotools/set_mirror.sh</a> | sh -s <a href=\"http://ce611378.m.daocloud.io\" target=\"_blank\" rel=\"noopener\">http://ce611378.m.daocloud.io</a></p>\n</blockquote>\n<p>查看本地镜像列表</p>\n<blockquote>\n<p>$ docker images</p>\n</blockquote>\n<h2 id=\"操作基础系统\"><a href=\"#操作基础系统\" class=\"headerlink\" title=\"操作基础系统\"></a>操作基础系统</h2><p>进入系统</p>\n<blockquote>\n<p>$ docker run -i -t centos /bin/bash</p>\n</blockquote>\n<p>exit退出系统———-退出系统，容器会停止，所以在此之前用此账户再开一个窗口 执行下面的操作</p>\n<p>查询到所有的启动过容器</p>\n<blockquote>\n<p>$ docker ps -a </p>\n</blockquote>\n<p>启动停止的镜像</p>\n<blockquote>\n<p>$ docker start ID </p>\n</blockquote>\n<p>进入镜像中 </p>\n<blockquote>\n<p>$ docker attach ID           ###exit之后镜像依旧挂掉<br>或是<br>$ docker exec -i -t ID  /bin/bash   ###这种方式镜像在后台存活</p>\n</blockquote>\n<h2 id=\"搭建项目运行环境\"><a href=\"#搭建项目运行环境\" class=\"headerlink\" title=\"搭建项目运行环境\"></a>搭建项目运行环境</h2><p>JDK8 + tomcat7</p>\n<ul>\n<li>现在宿主机器里wget下资源(JDK8+tomcat7的tar包),坑爹的JDK7官网已经不支持游客下载</li>\n<li>将宿主磁盘挂载到docker镜像mnt目录下，解压然后cp到自己定义的目录</li>\n<li>jdk: 修改/etc/profile，添加路径保存，然后source /etc/profile更新</li>\n</ul>\n<h2 id=\"打包镜像\"><a href=\"#打包镜像\" class=\"headerlink\" title=\"打包镜像\"></a>打包镜像</h2><p><strong>建议使用dockerfile构建</strong></p>\n<p>提交修改</p>\n<blockquote>\n<p>$ docker commit -m=”第一次提交” -a=”polaris” 425cef90ab3f polaris/centos:v1</p>\n</blockquote>\n<p>-m: 描述信息<br>-a: 作者<br>425cef90ab3f：ID<br>polaris/centos:v1 :创建的目标镜像名+tag</p>\n<p>重新进入刚刚提交的镜像(之前所做的操作都存在)</p>\n<blockquote>\n<p>$ docker run -i -t polaris/centos:v1 /bin/bash</p>\n</blockquote>\n<p><strong>如果你想推送你的镜像到注册中心</strong><br>首先需要在docker官网创建一个Repository，如果你本地的名字和创建的不一样，会提示未授权。<br>本地打一个tag</p>\n<blockquote>\n<p>$ docker tag local-images:v1 dockerHub-images:v1</p>\n</blockquote>\n<p>登录docker</p>\n<blockquote>\n<p>$ docker login </p>\n</blockquote>\n<p>然后push你的本地镜像（很多操作和git类似）</p>\n<blockquote>\n<p>$ docker push <em>**</em> </p>\n</blockquote>\n<p>快速构建</p>\n<ul>\n<li>使用docker bulid来构建（会读取dockerfile文件），更快速简洁</li>\n<li>先pull然后修改之后commit（方法一的底层也是通过这种方式）</li>\n</ul>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><h3 id=\"更换镜像库\"><a href=\"#更换镜像库\" class=\"headerlink\" title=\"更换镜像库\"></a>更换镜像库</h3><p>从国外服务器pull镜像速度较慢，直接使用由DaoCloud或者阿里提供的Registry Mirror服务<br><a href=\"http://blog.daocloud.io/how-to-master-docker-image/\" target=\"_blank\" rel=\"noopener\">http://blog.daocloud.io/how-to-master-docker-image/</a></p>\n<h3 id=\"挂载磁盘\"><a href=\"#挂载磁盘\" class=\"headerlink\" title=\"挂载磁盘\"></a>挂载磁盘</h3><p>将宿主的下载文件夹 挂载 到docker容器polaris镜像中的docker下</p>\n<blockquote>\n<p>$ docker run -it -v /home/download:/mnt polaris/centos:v1 /bin/bash</p>\n</blockquote>\n<p>没试过在已经启动的docker镜像中挂载</p>\n<h3 id=\"查看容器相关信息\"><a href=\"#查看容器相关信息\" class=\"headerlink\" title=\"查看容器相关信息\"></a>查看容器相关信息</h3><p>主要是查看网络配置，容器里面很多命令都没有</p>\n<blockquote>\n<p>$ docker inspect a7e0139b5940</p>\n</blockquote>\n<h3 id=\"端口映射\"><a href=\"#端口映射\" class=\"headerlink\" title=\"端口映射\"></a>端口映射</h3><p>交互型</p>\n<blockquote>\n<p>$ docker run -i -t -p 5000:8080 polaris/centos:v1 /bin/bash </p>\n</blockquote>\n<p>后台型</p>\n<blockquote>\n<p>$ docker run -d -i -t -p 5000:8080 polaris/centos:v1 </p>\n</blockquote>\n<h3 id=\"阿里云\"><a href=\"#阿里云\" class=\"headerlink\" title=\"阿里云\"></a>阿里云</h3><p>以我的阿里云为例<br>下载</p>\n<blockquote>\n<p>$ docker pull registry.cn-hangzhou.aliyuncs.com/polarisnosnow/polaris:v2</p>\n</blockquote>\n<p>上传</p>\n<blockquote>\n<p>$ docker login –username=<em>**</em>  registry.cn-hangzhou.aliyuncs.com<br>$ docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/polarisnosnow/polaris:[镜像版本号]<br>$ docker push registry.cn-hangzhou.aliyuncs.com/polarisnosnow/polaris:[镜像版本号]</p>\n</blockquote>\n<h3 id=\"搭建注册服务器\"><a href=\"#搭建注册服务器\" class=\"headerlink\" title=\"搭建注册服务器\"></a>搭建注册服务器</h3><p>下载服务器镜像并运行</p>\n<blockquote>\n<p>$ docker pull registry<br>$ docker run -p 5000:5000 -d -i -t registry </p>\n</blockquote>\n<p>提交并推送</p>\n<blockquote>\n<p>$ docker commit cid 127.0.0.1:5000/my_image:v1<br>$ docker push 127.0.0.1:5000/my_image:v1</p>\n</blockquote>\n<p>可以使用docker API查看库中结果<br><a href=\"http://127.0.0.1:5000/v2/_catalog\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:5000/v2/_catalog</a><br><a href=\"http://127.0.0.1:5000/v2/my_image/tag/list\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:5000/v2/my_image/tag/list</a></p>\n<p>注意客户端在/etc/docker/daemon.json 中添加{ “insecure-registries”:[“127.0.0.1:5000”]}<br>安全访问（默认走的https）</p>\n<h3 id=\"docker管理界面\"><a href=\"#docker管理界面\" class=\"headerlink\" title=\"docker管理界面\"></a>docker管理界面</h3><ul>\n<li><strong>dockerUI</strong></li>\n</ul>\n<p>只能用于单机，单功能齐全。</p>\n<p>构建脚本</p>\n<blockquote>\n<p>$ docker run -d -p 9000:9000 –privileged -v /var/run/docker.sock:/var/run/docker.sock uifd/ui-for-docker</p>\n</blockquote>\n<p><br></p>\n<ul>\n<li><strong>shipyard</strong></li>\n</ul>\n<p>适合集群，各种资源分配，性能检测等</p>\n<p>/etc/sysconfig/docker中添加对2375的监听 </p>\n<blockquote>\n<p>OPTIONS=”-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock”</p>\n</blockquote>\n<p>shipyard构建脚本（启动的容器较多）</p>\n<blockquote>\n<p>$ curl -s <a href=\"https://shipyard-project.com/deploy\" target=\"_blank\" rel=\"noopener\">https://shipyard-project.com/deploy</a> | bash -s Username: admin Password: shipyard</p>\n</blockquote>\n<p>或者</p>\n<blockquote>\n<p>$ docker run –rm -v /var/run/docker.sock:/var/run/docker.sock shipyard/deploy start</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li>这些笔记都是在16年底弄的（那时候公司很还没有docker，但是国内已经很火了，很多公司都在考虑docker落地，服务上云的事情，公司后来由技术部大佬亲手构建容器平台，本身没有参与到平台搭建中，但后期的代码及部署改造经历过），当时看了下基础记了点笔记，前不久整理下放在博客里面算是纪念。–2019.05.17</li>\n</ul>\n<ul>\n<li>目前主要的部署流程：开发人员将代码提交到gitlab之后，通过Jenkins打包代码 并执行构建脚本，在Rancher管理运行的服务，最后日志由elk收集展示搜索。（jenkins + docker + rancher + elk）</li>\n</ul>\n<ul>\n<li>感受：改造升级之后，基本上都是一键部署，缩短了大量的上线时间，减少了因为手工上线可能带来的误操作问题。同时，伸缩扩容等 可以快速的响应流量的变化。</li>\n</ul>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>系统环境：centos7<br>安装</p>\n<blockquote>\n<p>$ yum install docker</p>\n</blockquote>\n<p>开启服务</p>\n<blockquote>\n<p>$ service docker start</p>\n</blockquote>\n<p>测试</p>\n<blockquote>\n<p>$ docker run hello-world (或是docker verison)</p>\n</blockquote>\n<h1 id=\"镜像测试\"><a href=\"#镜像测试\" class=\"headerlink\" title=\"镜像测试\"></a>镜像测试</h1><p>搜索本地镜像</p>\n<blockquote>\n<p>$ docker images</p>\n</blockquote>\n<p>查看源镜像库有关java方面的镜像并且收藏数大于10</p>\n<blockquote>\n<p>$ docker search -s 10 java </p>\n</blockquote>\n<p>从镜像仓库拉取镜像</p>\n<blockquote>\n<p>$ docker pull *** </p>\n</blockquote>\n<p>后台运行learn/tutorial镜像并执行sh脚本(脚本含义：每秒输出一次hello world)</p>\n<blockquote>\n<p>$ docker run -d learn/tutorial /bin/sh -c “while true; do echo hello world; sleep 1; done”</p>\n</blockquote>\n<blockquote>\n<p>$ docker run -t -i runoob/ubuntu:v2 /bin/bash  </p>\n</blockquote>\n<p>查询正在运行的镜像</p>\n<blockquote>\n<p>$ docker ps</p>\n</blockquote>\n<p>从上面的查询的ID来查看此镜像输出的日志</p>\n<blockquote>\n<p>$ docker logs ID</p>\n</blockquote>\n<p>停止镜像</p>\n<blockquote>\n<p>$ docker stop ID</p>\n</blockquote>\n<h1 id=\"搭建镜像\"><a href=\"#搭建镜像\" class=\"headerlink\" title=\"搭建镜像\"></a>搭建镜像</h1><h2 id=\"安装基础系统环境\"><a href=\"#安装基础系统环境\" class=\"headerlink\" title=\"安装基础系统环境\"></a>安装基础系统环境</h2><p>下载一个linux基础镜像</p>\n<blockquote>\n<p>$ docker pull centos</p>\n</blockquote>\n<p>国外的docker Hub可能比较慢，使用下面的命令修改 daemon.json文件，会添加一个registry-mirrors：注册服务器镜像(使用daocloud的，默认为docker Hub)</p>\n<blockquote>\n<p>$ curl -sSL <a href=\"https://get.daocloud.io/daotools/set_mirror.sh\" target=\"_blank\" rel=\"noopener\">https://get.daocloud.io/daotools/set_mirror.sh</a> | sh -s <a href=\"http://ce611378.m.daocloud.io\" target=\"_blank\" rel=\"noopener\">http://ce611378.m.daocloud.io</a></p>\n</blockquote>\n<p>查看本地镜像列表</p>\n<blockquote>\n<p>$ docker images</p>\n</blockquote>\n<h2 id=\"操作基础系统\"><a href=\"#操作基础系统\" class=\"headerlink\" title=\"操作基础系统\"></a>操作基础系统</h2><p>进入系统</p>\n<blockquote>\n<p>$ docker run -i -t centos /bin/bash</p>\n</blockquote>\n<p>exit退出系统———-退出系统，容器会停止，所以在此之前用此账户再开一个窗口 执行下面的操作</p>\n<p>查询到所有的启动过容器</p>\n<blockquote>\n<p>$ docker ps -a </p>\n</blockquote>\n<p>启动停止的镜像</p>\n<blockquote>\n<p>$ docker start ID </p>\n</blockquote>\n<p>进入镜像中 </p>\n<blockquote>\n<p>$ docker attach ID           ###exit之后镜像依旧挂掉<br>或是<br>$ docker exec -i -t ID  /bin/bash   ###这种方式镜像在后台存活</p>\n</blockquote>\n<h2 id=\"搭建项目运行环境\"><a href=\"#搭建项目运行环境\" class=\"headerlink\" title=\"搭建项目运行环境\"></a>搭建项目运行环境</h2><p>JDK8 + tomcat7</p>\n<ul>\n<li>现在宿主机器里wget下资源(JDK8+tomcat7的tar包),坑爹的JDK7官网已经不支持游客下载</li>\n<li>将宿主磁盘挂载到docker镜像mnt目录下，解压然后cp到自己定义的目录</li>\n<li>jdk: 修改/etc/profile，添加路径保存，然后source /etc/profile更新</li>\n</ul>\n<h2 id=\"打包镜像\"><a href=\"#打包镜像\" class=\"headerlink\" title=\"打包镜像\"></a>打包镜像</h2><p><strong>建议使用dockerfile构建</strong></p>\n<p>提交修改</p>\n<blockquote>\n<p>$ docker commit -m=”第一次提交” -a=”polaris” 425cef90ab3f polaris/centos:v1</p>\n</blockquote>\n<p>-m: 描述信息<br>-a: 作者<br>425cef90ab3f：ID<br>polaris/centos:v1 :创建的目标镜像名+tag</p>\n<p>重新进入刚刚提交的镜像(之前所做的操作都存在)</p>\n<blockquote>\n<p>$ docker run -i -t polaris/centos:v1 /bin/bash</p>\n</blockquote>\n<p><strong>如果你想推送你的镜像到注册中心</strong><br>首先需要在docker官网创建一个Repository，如果你本地的名字和创建的不一样，会提示未授权。<br>本地打一个tag</p>\n<blockquote>\n<p>$ docker tag local-images:v1 dockerHub-images:v1</p>\n</blockquote>\n<p>登录docker</p>\n<blockquote>\n<p>$ docker login </p>\n</blockquote>\n<p>然后push你的本地镜像（很多操作和git类似）</p>\n<blockquote>\n<p>$ docker push <em>**</em> </p>\n</blockquote>\n<p>快速构建</p>\n<ul>\n<li>使用docker bulid来构建（会读取dockerfile文件），更快速简洁</li>\n<li>先pull然后修改之后commit（方法一的底层也是通过这种方式）</li>\n</ul>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><h3 id=\"更换镜像库\"><a href=\"#更换镜像库\" class=\"headerlink\" title=\"更换镜像库\"></a>更换镜像库</h3><p>从国外服务器pull镜像速度较慢，直接使用由DaoCloud或者阿里提供的Registry Mirror服务<br><a href=\"http://blog.daocloud.io/how-to-master-docker-image/\" target=\"_blank\" rel=\"noopener\">http://blog.daocloud.io/how-to-master-docker-image/</a></p>\n<h3 id=\"挂载磁盘\"><a href=\"#挂载磁盘\" class=\"headerlink\" title=\"挂载磁盘\"></a>挂载磁盘</h3><p>将宿主的下载文件夹 挂载 到docker容器polaris镜像中的docker下</p>\n<blockquote>\n<p>$ docker run -it -v /home/download:/mnt polaris/centos:v1 /bin/bash</p>\n</blockquote>\n<p>没试过在已经启动的docker镜像中挂载</p>\n<h3 id=\"查看容器相关信息\"><a href=\"#查看容器相关信息\" class=\"headerlink\" title=\"查看容器相关信息\"></a>查看容器相关信息</h3><p>主要是查看网络配置，容器里面很多命令都没有</p>\n<blockquote>\n<p>$ docker inspect a7e0139b5940</p>\n</blockquote>\n<h3 id=\"端口映射\"><a href=\"#端口映射\" class=\"headerlink\" title=\"端口映射\"></a>端口映射</h3><p>交互型</p>\n<blockquote>\n<p>$ docker run -i -t -p 5000:8080 polaris/centos:v1 /bin/bash </p>\n</blockquote>\n<p>后台型</p>\n<blockquote>\n<p>$ docker run -d -i -t -p 5000:8080 polaris/centos:v1 </p>\n</blockquote>\n<h3 id=\"阿里云\"><a href=\"#阿里云\" class=\"headerlink\" title=\"阿里云\"></a>阿里云</h3><p>以我的阿里云为例<br>下载</p>\n<blockquote>\n<p>$ docker pull registry.cn-hangzhou.aliyuncs.com/polarisnosnow/polaris:v2</p>\n</blockquote>\n<p>上传</p>\n<blockquote>\n<p>$ docker login –username=<em>**</em>  registry.cn-hangzhou.aliyuncs.com<br>$ docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/polarisnosnow/polaris:[镜像版本号]<br>$ docker push registry.cn-hangzhou.aliyuncs.com/polarisnosnow/polaris:[镜像版本号]</p>\n</blockquote>\n<h3 id=\"搭建注册服务器\"><a href=\"#搭建注册服务器\" class=\"headerlink\" title=\"搭建注册服务器\"></a>搭建注册服务器</h3><p>下载服务器镜像并运行</p>\n<blockquote>\n<p>$ docker pull registry<br>$ docker run -p 5000:5000 -d -i -t registry </p>\n</blockquote>\n<p>提交并推送</p>\n<blockquote>\n<p>$ docker commit cid 127.0.0.1:5000/my_image:v1<br>$ docker push 127.0.0.1:5000/my_image:v1</p>\n</blockquote>\n<p>可以使用docker API查看库中结果<br><a href=\"http://127.0.0.1:5000/v2/_catalog\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:5000/v2/_catalog</a><br><a href=\"http://127.0.0.1:5000/v2/my_image/tag/list\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:5000/v2/my_image/tag/list</a></p>\n<p>注意客户端在/etc/docker/daemon.json 中添加{ “insecure-registries”:[“127.0.0.1:5000”]}<br>安全访问（默认走的https）</p>\n<h3 id=\"docker管理界面\"><a href=\"#docker管理界面\" class=\"headerlink\" title=\"docker管理界面\"></a>docker管理界面</h3><ul>\n<li><strong>dockerUI</strong></li>\n</ul>\n<p>只能用于单机，单功能齐全。</p>\n<p>构建脚本</p>\n<blockquote>\n<p>$ docker run -d -p 9000:9000 –privileged -v /var/run/docker.sock:/var/run/docker.sock uifd/ui-for-docker</p>\n</blockquote>\n<p><br></p>\n<ul>\n<li><strong>shipyard</strong></li>\n</ul>\n<p>适合集群，各种资源分配，性能检测等</p>\n<p>/etc/sysconfig/docker中添加对2375的监听 </p>\n<blockquote>\n<p>OPTIONS=”-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock”</p>\n</blockquote>\n<p>shipyard构建脚本（启动的容器较多）</p>\n<blockquote>\n<p>$ curl -s <a href=\"https://shipyard-project.com/deploy\" target=\"_blank\" rel=\"noopener\">https://shipyard-project.com/deploy</a> | bash -s Username: admin Password: shipyard</p>\n</blockquote>\n<p>或者</p>\n<blockquote>\n<p>$ docker run –rm -v /var/run/docker.sock:/var/run/docker.sock shipyard/deploy start</p>\n</blockquote>\n"},{"title":"keepalived笔记","date":"2017-12-15T06:08:30.000Z","_content":"\n# keepalived\n教程参考：https://www.cnblogs.com/Richardzhu/p/4202416.html )\n\n## 环境配置\n- 基础依赖\n\nc++相关\n>$ yum -y install gcc-c++\n\nopenssl\n>$ yum -y install openssl-devel\n\n- 检查配置并生成makefile文件\n./configure --prefix=/usr/local/keepalived --disable-fwmark \n-  make && make install 编译安装\n-  修改配置文件/etc/keepalived/keepalived.conf\n- 启动服务\n>$ service keepalived start\n\n## nginx安装\n>$ wget http://dl.Fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \n>$ rpm -ivh epel-release-latest-7.noarch.rpm\n>$ yum  -y install nginx\n>$ service nginx start \n\n**记得开放端口**\n\n## 问题\n### issue1\nkeepalived安装在两台物理服务器上，并相互监控对方是否在正常运行。\n当节点A正常的时候:节点A上的keepalived会将下面的信息广播出去：192.168.8.100 这个IP对应的MAC地址为节点A网卡的MAC地址，图中的其它电脑如客户端和NodeB会更新自己的ARP表，对应192.168.8.100的MAC地址=节点A网卡的MAC地址。\n当节点A发生故障的时候，节点B上的keepalived会检测到，并且将下面的信息广播出去：192.168.8.100 这个IP对应的MAC地址为节点B网卡的MAC地址。\n图中的其它电脑如客户端会更新自己的ARP表，对应192.168.8.100的MAC地址=节点B网卡的MAC地址。\n\n### issue2\n在双机启动的时候，主备（master、backup）都会检测对方的priority，如果比对方大自己直接标记为主机；所以如果互相失联，而本身都健康则都会成为master。\n\n### issue3\nkeepalived的ip漂移是当主机宕机或是keepalived挂掉，所以keepalived本身并不能因为nginx的状态随之切换，需要自己构建脚本。\n基本思路：\n1.定时检查nginx状态，当nginx关闭后，直接杀死keepalived进程（外挂定时任务或是keepalived执行脚本）。\n2.或是降低优先级也行，不过第一种稍微简单直接。\n\n### issue4\n通过查看VRRP通信原理发现VRRP基于报文实现的。master设置一定时间发送一个报文给backup如果backup没有收到就自己成为master。可推出导致问题的原因是因为backup没有收到报文，所以自己成为了master。\nso添加防火墙+延长发送间隔时间(keepalived.conf)，测试的时候可以直接关闭防火墙。\n\n","source":"_posts/keepalived笔记.md","raw":"---\ntitle: keepalived笔记\ndate: 2017-12-15 14:08:30\ntags:\n- linux\n- keepalived\n- nginx\ncategories:\n- 技术\n---\n\n# keepalived\n教程参考：https://www.cnblogs.com/Richardzhu/p/4202416.html )\n\n## 环境配置\n- 基础依赖\n\nc++相关\n>$ yum -y install gcc-c++\n\nopenssl\n>$ yum -y install openssl-devel\n\n- 检查配置并生成makefile文件\n./configure --prefix=/usr/local/keepalived --disable-fwmark \n-  make && make install 编译安装\n-  修改配置文件/etc/keepalived/keepalived.conf\n- 启动服务\n>$ service keepalived start\n\n## nginx安装\n>$ wget http://dl.Fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \n>$ rpm -ivh epel-release-latest-7.noarch.rpm\n>$ yum  -y install nginx\n>$ service nginx start \n\n**记得开放端口**\n\n## 问题\n### issue1\nkeepalived安装在两台物理服务器上，并相互监控对方是否在正常运行。\n当节点A正常的时候:节点A上的keepalived会将下面的信息广播出去：192.168.8.100 这个IP对应的MAC地址为节点A网卡的MAC地址，图中的其它电脑如客户端和NodeB会更新自己的ARP表，对应192.168.8.100的MAC地址=节点A网卡的MAC地址。\n当节点A发生故障的时候，节点B上的keepalived会检测到，并且将下面的信息广播出去：192.168.8.100 这个IP对应的MAC地址为节点B网卡的MAC地址。\n图中的其它电脑如客户端会更新自己的ARP表，对应192.168.8.100的MAC地址=节点B网卡的MAC地址。\n\n### issue2\n在双机启动的时候，主备（master、backup）都会检测对方的priority，如果比对方大自己直接标记为主机；所以如果互相失联，而本身都健康则都会成为master。\n\n### issue3\nkeepalived的ip漂移是当主机宕机或是keepalived挂掉，所以keepalived本身并不能因为nginx的状态随之切换，需要自己构建脚本。\n基本思路：\n1.定时检查nginx状态，当nginx关闭后，直接杀死keepalived进程（外挂定时任务或是keepalived执行脚本）。\n2.或是降低优先级也行，不过第一种稍微简单直接。\n\n### issue4\n通过查看VRRP通信原理发现VRRP基于报文实现的。master设置一定时间发送一个报文给backup如果backup没有收到就自己成为master。可推出导致问题的原因是因为backup没有收到报文，所以自己成为了master。\nso添加防火墙+延长发送间隔时间(keepalived.conf)，测试的时候可以直接关闭防火墙。\n\n","slug":"keepalived笔记","published":1,"updated":"2019-06-01T13:45:14.095Z","_id":"cjvdq9h82000054mdx0tdm4ql","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"keepalived\"><a href=\"#keepalived\" class=\"headerlink\" title=\"keepalived\"></a>keepalived</h1><p>教程参考：<a href=\"https://www.cnblogs.com/Richardzhu/p/4202416.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Richardzhu/p/4202416.html</a> )</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><ul>\n<li>基础依赖</li>\n</ul>\n<p>c++相关</p>\n<blockquote>\n<p>$ yum -y install gcc-c++</p>\n</blockquote>\n<p>openssl</p>\n<blockquote>\n<p>$ yum -y install openssl-devel</p>\n</blockquote>\n<ul>\n<li>检查配置并生成makefile文件<br>./configure –prefix=/usr/local/keepalived –disable-fwmark </li>\n<li>make &amp;&amp; make install 编译安装</li>\n<li>修改配置文件/etc/keepalived/keepalived.conf</li>\n<li>启动服务<blockquote>\n<p>$ service keepalived start</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"nginx安装\"><a href=\"#nginx安装\" class=\"headerlink\" title=\"nginx安装\"></a>nginx安装</h2><blockquote>\n<p>$ wget <a href=\"http://dl.Fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\" target=\"_blank\" rel=\"noopener\">http://dl.Fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</a><br>$ rpm -ivh epel-release-latest-7.noarch.rpm<br>$ yum  -y install nginx<br>$ service nginx start </p>\n</blockquote>\n<p><strong>记得开放端口</strong></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"issue1\"><a href=\"#issue1\" class=\"headerlink\" title=\"issue1\"></a>issue1</h3><p>keepalived安装在两台物理服务器上，并相互监控对方是否在正常运行。<br>当节点A正常的时候:节点A上的keepalived会将下面的信息广播出去：192.168.8.100 这个IP对应的MAC地址为节点A网卡的MAC地址，图中的其它电脑如客户端和NodeB会更新自己的ARP表，对应192.168.8.100的MAC地址=节点A网卡的MAC地址。<br>当节点A发生故障的时候，节点B上的keepalived会检测到，并且将下面的信息广播出去：192.168.8.100 这个IP对应的MAC地址为节点B网卡的MAC地址。<br>图中的其它电脑如客户端会更新自己的ARP表，对应192.168.8.100的MAC地址=节点B网卡的MAC地址。</p>\n<h3 id=\"issue2\"><a href=\"#issue2\" class=\"headerlink\" title=\"issue2\"></a>issue2</h3><p>在双机启动的时候，主备（master、backup）都会检测对方的priority，如果比对方大自己直接标记为主机；所以如果互相失联，而本身都健康则都会成为master。</p>\n<h3 id=\"issue3\"><a href=\"#issue3\" class=\"headerlink\" title=\"issue3\"></a>issue3</h3><p>keepalived的ip漂移是当主机宕机或是keepalived挂掉，所以keepalived本身并不能因为nginx的状态随之切换，需要自己构建脚本。<br>基本思路：<br>1.定时检查nginx状态，当nginx关闭后，直接杀死keepalived进程（外挂定时任务或是keepalived执行脚本）。<br>2.或是降低优先级也行，不过第一种稍微简单直接。</p>\n<h3 id=\"issue4\"><a href=\"#issue4\" class=\"headerlink\" title=\"issue4\"></a>issue4</h3><p>通过查看VRRP通信原理发现VRRP基于报文实现的。master设置一定时间发送一个报文给backup如果backup没有收到就自己成为master。可推出导致问题的原因是因为backup没有收到报文，所以自己成为了master。<br>so添加防火墙+延长发送间隔时间(keepalived.conf)，测试的时候可以直接关闭防火墙。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"keepalived\"><a href=\"#keepalived\" class=\"headerlink\" title=\"keepalived\"></a>keepalived</h1><p>教程参考：<a href=\"https://www.cnblogs.com/Richardzhu/p/4202416.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Richardzhu/p/4202416.html</a> )</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><ul>\n<li>基础依赖</li>\n</ul>\n<p>c++相关</p>\n<blockquote>\n<p>$ yum -y install gcc-c++</p>\n</blockquote>\n<p>openssl</p>\n<blockquote>\n<p>$ yum -y install openssl-devel</p>\n</blockquote>\n<ul>\n<li>检查配置并生成makefile文件<br>./configure –prefix=/usr/local/keepalived –disable-fwmark </li>\n<li>make &amp;&amp; make install 编译安装</li>\n<li>修改配置文件/etc/keepalived/keepalived.conf</li>\n<li>启动服务<blockquote>\n<p>$ service keepalived start</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"nginx安装\"><a href=\"#nginx安装\" class=\"headerlink\" title=\"nginx安装\"></a>nginx安装</h2><blockquote>\n<p>$ wget <a href=\"http://dl.Fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\" target=\"_blank\" rel=\"noopener\">http://dl.Fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</a><br>$ rpm -ivh epel-release-latest-7.noarch.rpm<br>$ yum  -y install nginx<br>$ service nginx start </p>\n</blockquote>\n<p><strong>记得开放端口</strong></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"issue1\"><a href=\"#issue1\" class=\"headerlink\" title=\"issue1\"></a>issue1</h3><p>keepalived安装在两台物理服务器上，并相互监控对方是否在正常运行。<br>当节点A正常的时候:节点A上的keepalived会将下面的信息广播出去：192.168.8.100 这个IP对应的MAC地址为节点A网卡的MAC地址，图中的其它电脑如客户端和NodeB会更新自己的ARP表，对应192.168.8.100的MAC地址=节点A网卡的MAC地址。<br>当节点A发生故障的时候，节点B上的keepalived会检测到，并且将下面的信息广播出去：192.168.8.100 这个IP对应的MAC地址为节点B网卡的MAC地址。<br>图中的其它电脑如客户端会更新自己的ARP表，对应192.168.8.100的MAC地址=节点B网卡的MAC地址。</p>\n<h3 id=\"issue2\"><a href=\"#issue2\" class=\"headerlink\" title=\"issue2\"></a>issue2</h3><p>在双机启动的时候，主备（master、backup）都会检测对方的priority，如果比对方大自己直接标记为主机；所以如果互相失联，而本身都健康则都会成为master。</p>\n<h3 id=\"issue3\"><a href=\"#issue3\" class=\"headerlink\" title=\"issue3\"></a>issue3</h3><p>keepalived的ip漂移是当主机宕机或是keepalived挂掉，所以keepalived本身并不能因为nginx的状态随之切换，需要自己构建脚本。<br>基本思路：<br>1.定时检查nginx状态，当nginx关闭后，直接杀死keepalived进程（外挂定时任务或是keepalived执行脚本）。<br>2.或是降低优先级也行，不过第一种稍微简单直接。</p>\n<h3 id=\"issue4\"><a href=\"#issue4\" class=\"headerlink\" title=\"issue4\"></a>issue4</h3><p>通过查看VRRP通信原理发现VRRP基于报文实现的。master设置一定时间发送一个报文给backup如果backup没有收到就自己成为master。可推出导致问题的原因是因为backup没有收到报文，所以自己成为了master。<br>so添加防火墙+延长发送间隔时间(keepalived.conf)，测试的时候可以直接关闭防火墙。</p>\n"},{"title":"mongodb基础","date":"2017-07-10T02:52:00.000Z","_content":"\n# Mongodb基础\n映射关系\n\n| 关系型数据库 | Mongodb |\n| :----------: | :-----: |\n|      表      |  集合   |\n|    行数据    |  文档   |\n|     字段     |   域    |\n\n\n\n## 基础操作\n新建连接\n>mongod.exe ip:port/database -u user -p password\n\n基础查询\n>show dbs\n>use database\n>show tables\n\n查询name域为string类型，按照name正排序，跳过20条数据，返回10条\n>db.student.find({name:{$type : 2}},{}).sort({name:1}).skip(20).limit(10)\n\n创建索引(1升序，-1逆)\n>db.student.ensureIndex({KEY:1})\n\n## 管道查询\n先匹配TXN_AMT小于1.0的数据，将筛选的数据传入到下一管道处理，根据AC_DT分组求取TXN_AMT总金额\n>db.getCollection('HPSTJNL_CHECKED').aggregate([{$match : {\"TXN_AMT\":{$lte:1.0}}},{$group:{_id : \"$AC_DT\", totalAmt:{$sum:\"$TXN_AMT\"}}}])\n\n必须有一个_id，然后根据它来分组\n>select AC_DT as _id, sum(TXN_AMT) as totalAmt from hc where TXN_AMT <= 1.0 group by AC_DT\n\n\n\n\n\n## 副本集设置（一主多从）\n启动副本集的指令\n>mongod --port \"PORT\" --dbpath \"YOUR_DB_DATA_PATH\" --replSet \"REPLICA_SET_INSTANCE_NAME\"\n\n**每个服务启动的REPLICA_SET_INSTANCE_NAME必须相同否则会不匹配**\n\n启动三台服务\n\n此处作为主机\n\n>mongod --port 27017 --dbpath d:\\data\\master --replSet rs\n\n此处作为从机\n>mongod --port 27018 --dbpath d:\\data\\bak1 --replSet rs\n\n此处作为仲裁：只参与投票\n>mongod --port 27019 --dbpath d:\\data\\bak2 --replSet rs\n\n主机上添加从机\n>rs.add(\"host:port\")\n\n主机上添加仲裁\n>rs.addArb(\"host:port\")\n\n从机设置可读取\n>rs.slaveOk(true)\n\n如果主库宕机，此时会发生内部选举，其中一台从机成为主机，待原主机重新启动之后，会变成从机并将数据从新主机同步过来\n\n## 集群分片搭建 \n参考http://blog.csdn.net/sharetop/article/details/53610379\n--fork在linux上需要添加\n\n### 1. 分片服务器\n启动分片服务\n> mongod --port 27020 --dbpath=d:\\data\\shard\\s0 --logpath=d:\\data\\shard\\log\\s0.log --logappend --fork --shardsvr(version3.4)\n\n> mongod --port 27021 --dbpath=d:\\data\\shard\\s1 --logpath=d:\\data\\shard\\log\\s0.log --logappend --fork--shardsvr(version3.4) \n\n### 2. 配置服务器\n启动一台配置服务\n>mongod --port 27100 --dbpath=d:\\data\\shard\\config --logpath=d:\\data\\shard\\log\\conf.log --logappend --fork --configsvr --replSet cs //3.4版本的写法\n```\nuse admin\ncfg = {\n    _id:'cs',\n    configsvr:true,\n    members:[\n        {_id:0,host:'127.0.0.1:27100'}\n     ]\n};\n```\n初始化配置\n>rs.initiate(cfg);\n\n### 3. 路由服务器\n> mongos --port 40000 --configdb cs/127.0.0.1:27100 \n\n### 4. 分片配置\n登录40000的服务，添加分片\n> sh.addShard('127.0.0.1:27020');\n> sh.addShard('127.0.0.1:27021');\n\n添加需要分片的库,并设置片键（设置了片键的话，每次新增不允许为空）\n> sh.enableSharding('polaris');\n> sh.shardCollection('polaris.user',{'id':1,'name':1})\n\n新增一定数据量的情况下，数据只出现在一个片区，（默认的配置新增10万就会出现在不同的分片）\n\n\n## 节点说明\n**选举算法采用bully算法**\n- primary：主节点\n- arbiteronly：仲裁节点,不存储数据,只参与投票\n- Secondary-Only：不能成为主节点,只能做为从节点,并可以参与选举\n- -Hidden：隐藏不被链接的从节点,不被程序访问,但可以参与选举的节点\n- Delayed：可以指定一个时间延迟从primary节点同步数据。主要用于备份数据，如果实时同步，误删除数据马上同步到从节点，恢复又恢复不了。\n- Non_voting：不参与选举,只负责备分数据\n\n\n## 其它说明\n创建管理用户\n```\nuse aedata\ndb.createUser({\n    user:'admin',\n    pwd:'111111',\n    roles:[{role:'readWrite',db:'aedata'}]\n})\n```\n格式化\n```\ndb.getCollection('HPSTJNL_CHECKED').aggregate([\n{\n\t$match : \n\t\t{\n\t\t\tTXN_AMT : \n\t\t\t{\n\t\t\t\t$lte : 1.0\n\t\t\t}\n\t\t}\n},\n{\n\t$group : \n\t\t{\n\t\t\t_id : \"$AC_DT\", \n\t\t\ttotalAmt : {\n\t\t\t\t\t\t\t$sum:\"$TXN_AMT\"\n\t\t\t\t\t\t}\n\t\t}\n}\n])\n```","source":"_posts/mongodb基础.md","raw":"---\ntitle: mongodb基础\ndate: 2017-07-10 10:52:00\ntags:\n- linux\n- mongodb\ncategories:\n- 技术\n---\n\n# Mongodb基础\n映射关系\n\n| 关系型数据库 | Mongodb |\n| :----------: | :-----: |\n|      表      |  集合   |\n|    行数据    |  文档   |\n|     字段     |   域    |\n\n\n\n## 基础操作\n新建连接\n>mongod.exe ip:port/database -u user -p password\n\n基础查询\n>show dbs\n>use database\n>show tables\n\n查询name域为string类型，按照name正排序，跳过20条数据，返回10条\n>db.student.find({name:{$type : 2}},{}).sort({name:1}).skip(20).limit(10)\n\n创建索引(1升序，-1逆)\n>db.student.ensureIndex({KEY:1})\n\n## 管道查询\n先匹配TXN_AMT小于1.0的数据，将筛选的数据传入到下一管道处理，根据AC_DT分组求取TXN_AMT总金额\n>db.getCollection('HPSTJNL_CHECKED').aggregate([{$match : {\"TXN_AMT\":{$lte:1.0}}},{$group:{_id : \"$AC_DT\", totalAmt:{$sum:\"$TXN_AMT\"}}}])\n\n必须有一个_id，然后根据它来分组\n>select AC_DT as _id, sum(TXN_AMT) as totalAmt from hc where TXN_AMT <= 1.0 group by AC_DT\n\n\n\n\n\n## 副本集设置（一主多从）\n启动副本集的指令\n>mongod --port \"PORT\" --dbpath \"YOUR_DB_DATA_PATH\" --replSet \"REPLICA_SET_INSTANCE_NAME\"\n\n**每个服务启动的REPLICA_SET_INSTANCE_NAME必须相同否则会不匹配**\n\n启动三台服务\n\n此处作为主机\n\n>mongod --port 27017 --dbpath d:\\data\\master --replSet rs\n\n此处作为从机\n>mongod --port 27018 --dbpath d:\\data\\bak1 --replSet rs\n\n此处作为仲裁：只参与投票\n>mongod --port 27019 --dbpath d:\\data\\bak2 --replSet rs\n\n主机上添加从机\n>rs.add(\"host:port\")\n\n主机上添加仲裁\n>rs.addArb(\"host:port\")\n\n从机设置可读取\n>rs.slaveOk(true)\n\n如果主库宕机，此时会发生内部选举，其中一台从机成为主机，待原主机重新启动之后，会变成从机并将数据从新主机同步过来\n\n## 集群分片搭建 \n参考http://blog.csdn.net/sharetop/article/details/53610379\n--fork在linux上需要添加\n\n### 1. 分片服务器\n启动分片服务\n> mongod --port 27020 --dbpath=d:\\data\\shard\\s0 --logpath=d:\\data\\shard\\log\\s0.log --logappend --fork --shardsvr(version3.4)\n\n> mongod --port 27021 --dbpath=d:\\data\\shard\\s1 --logpath=d:\\data\\shard\\log\\s0.log --logappend --fork--shardsvr(version3.4) \n\n### 2. 配置服务器\n启动一台配置服务\n>mongod --port 27100 --dbpath=d:\\data\\shard\\config --logpath=d:\\data\\shard\\log\\conf.log --logappend --fork --configsvr --replSet cs //3.4版本的写法\n```\nuse admin\ncfg = {\n    _id:'cs',\n    configsvr:true,\n    members:[\n        {_id:0,host:'127.0.0.1:27100'}\n     ]\n};\n```\n初始化配置\n>rs.initiate(cfg);\n\n### 3. 路由服务器\n> mongos --port 40000 --configdb cs/127.0.0.1:27100 \n\n### 4. 分片配置\n登录40000的服务，添加分片\n> sh.addShard('127.0.0.1:27020');\n> sh.addShard('127.0.0.1:27021');\n\n添加需要分片的库,并设置片键（设置了片键的话，每次新增不允许为空）\n> sh.enableSharding('polaris');\n> sh.shardCollection('polaris.user',{'id':1,'name':1})\n\n新增一定数据量的情况下，数据只出现在一个片区，（默认的配置新增10万就会出现在不同的分片）\n\n\n## 节点说明\n**选举算法采用bully算法**\n- primary：主节点\n- arbiteronly：仲裁节点,不存储数据,只参与投票\n- Secondary-Only：不能成为主节点,只能做为从节点,并可以参与选举\n- -Hidden：隐藏不被链接的从节点,不被程序访问,但可以参与选举的节点\n- Delayed：可以指定一个时间延迟从primary节点同步数据。主要用于备份数据，如果实时同步，误删除数据马上同步到从节点，恢复又恢复不了。\n- Non_voting：不参与选举,只负责备分数据\n\n\n## 其它说明\n创建管理用户\n```\nuse aedata\ndb.createUser({\n    user:'admin',\n    pwd:'111111',\n    roles:[{role:'readWrite',db:'aedata'}]\n})\n```\n格式化\n```\ndb.getCollection('HPSTJNL_CHECKED').aggregate([\n{\n\t$match : \n\t\t{\n\t\t\tTXN_AMT : \n\t\t\t{\n\t\t\t\t$lte : 1.0\n\t\t\t}\n\t\t}\n},\n{\n\t$group : \n\t\t{\n\t\t\t_id : \"$AC_DT\", \n\t\t\ttotalAmt : {\n\t\t\t\t\t\t\t$sum:\"$TXN_AMT\"\n\t\t\t\t\t\t}\n\t\t}\n}\n])\n```","slug":"mongodb基础","published":1,"updated":"2019-06-01T13:45:14.098Z","_id":"cjvdqijdi0001dcmdad2jsa6w","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Mongodb基础\"><a href=\"#Mongodb基础\" class=\"headerlink\" title=\"Mongodb基础\"></a>Mongodb基础</h1><p>映射关系</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">关系型数据库</th>\n<th style=\"text-align:center\">Mongodb</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">表</td>\n<td style=\"text-align:center\">集合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">行数据</td>\n<td style=\"text-align:center\">文档</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">字段</td>\n<td style=\"text-align:center\">域</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h2><p>新建连接</p>\n<blockquote>\n<p>mongod.exe ip:port/database -u user -p password</p>\n</blockquote>\n<p>基础查询</p>\n<blockquote>\n<p>show dbs<br>use database<br>show tables</p>\n</blockquote>\n<p>查询name域为string类型，按照name正排序，跳过20条数据，返回10条</p>\n<blockquote>\n<p>db.student.find({name:{$type : 2}},{}).sort({name:1}).skip(20).limit(10)</p>\n</blockquote>\n<p>创建索引(1升序，-1逆)</p>\n<blockquote>\n<p>db.student.ensureIndex({KEY:1})</p>\n</blockquote>\n<h2 id=\"管道查询\"><a href=\"#管道查询\" class=\"headerlink\" title=\"管道查询\"></a>管道查询</h2><p>先匹配TXN_AMT小于1.0的数据，将筛选的数据传入到下一管道处理，根据AC_DT分组求取TXN_AMT总金额</p>\n<blockquote>\n<p>db.getCollection(‘HPSTJNL_CHECKED’).aggregate([{$match : {“TXN_AMT”:{$lte:1.0}}},{$group:{_id : “$AC_DT”, totalAmt:{$sum:”$TXN_AMT”}}}])</p>\n</blockquote>\n<p>必须有一个_id，然后根据它来分组</p>\n<blockquote>\n<p>select AC_DT as _id, sum(TXN_AMT) as totalAmt from hc where TXN_AMT &lt;= 1.0 group by AC_DT</p>\n</blockquote>\n<h2 id=\"副本集设置（一主多从）\"><a href=\"#副本集设置（一主多从）\" class=\"headerlink\" title=\"副本集设置（一主多从）\"></a>副本集设置（一主多从）</h2><p>启动副本集的指令</p>\n<blockquote>\n<p>mongod –port “PORT” –dbpath “YOUR_DB_DATA_PATH” –replSet “REPLICA_SET_INSTANCE_NAME”</p>\n</blockquote>\n<p><strong>每个服务启动的REPLICA_SET_INSTANCE_NAME必须相同否则会不匹配</strong></p>\n<p>启动三台服务</p>\n<p>此处作为主机</p>\n<blockquote>\n<p>mongod –port 27017 –dbpath d:\\data\\master –replSet rs</p>\n</blockquote>\n<p>此处作为从机</p>\n<blockquote>\n<p>mongod –port 27018 –dbpath d:\\data\\bak1 –replSet rs</p>\n</blockquote>\n<p>此处作为仲裁：只参与投票</p>\n<blockquote>\n<p>mongod –port 27019 –dbpath d:\\data\\bak2 –replSet rs</p>\n</blockquote>\n<p>主机上添加从机</p>\n<blockquote>\n<p>rs.add(“host:port”)</p>\n</blockquote>\n<p>主机上添加仲裁</p>\n<blockquote>\n<p>rs.addArb(“host:port”)</p>\n</blockquote>\n<p>从机设置可读取</p>\n<blockquote>\n<p>rs.slaveOk(true)</p>\n</blockquote>\n<p>如果主库宕机，此时会发生内部选举，其中一台从机成为主机，待原主机重新启动之后，会变成从机并将数据从新主机同步过来</p>\n<h2 id=\"集群分片搭建\"><a href=\"#集群分片搭建\" class=\"headerlink\" title=\"集群分片搭建\"></a>集群分片搭建</h2><p>参考<a href=\"http://blog.csdn.net/sharetop/article/details/53610379\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/sharetop/article/details/53610379</a><br>–fork在linux上需要添加</p>\n<h3 id=\"1-分片服务器\"><a href=\"#1-分片服务器\" class=\"headerlink\" title=\"1. 分片服务器\"></a>1. 分片服务器</h3><p>启动分片服务</p>\n<blockquote>\n<p>mongod –port 27020 –dbpath=d:\\data\\shard\\s0 –logpath=d:\\data\\shard\\log\\s0.log –logappend –fork –shardsvr(version3.4)</p>\n</blockquote>\n<blockquote>\n<p>mongod –port 27021 –dbpath=d:\\data\\shard\\s1 –logpath=d:\\data\\shard\\log\\s0.log –logappend –fork–shardsvr(version3.4) </p>\n</blockquote>\n<h3 id=\"2-配置服务器\"><a href=\"#2-配置服务器\" class=\"headerlink\" title=\"2. 配置服务器\"></a>2. 配置服务器</h3><p>启动一台配置服务</p>\n<blockquote>\n<p>mongod –port 27100 –dbpath=d:\\data\\shard\\config –logpath=d:\\data\\shard\\log\\conf.log –logappend –fork –configsvr –replSet cs //3.4版本的写法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">cfg = &#123;</span><br><span class=\"line\">    _id:&apos;cs&apos;,</span><br><span class=\"line\">    configsvr:true,</span><br><span class=\"line\">    members:[</span><br><span class=\"line\">        &#123;_id:0,host:&apos;127.0.0.1:27100&apos;&#125;</span><br><span class=\"line\">     ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>初始化配置</p>\n<blockquote>\n<p>rs.initiate(cfg);</p>\n</blockquote>\n<h3 id=\"3-路由服务器\"><a href=\"#3-路由服务器\" class=\"headerlink\" title=\"3. 路由服务器\"></a>3. 路由服务器</h3><blockquote>\n<p>mongos –port 40000 –configdb cs/127.0.0.1:27100 </p>\n</blockquote>\n<h3 id=\"4-分片配置\"><a href=\"#4-分片配置\" class=\"headerlink\" title=\"4. 分片配置\"></a>4. 分片配置</h3><p>登录40000的服务，添加分片</p>\n<blockquote>\n<p>sh.addShard(‘127.0.0.1:27020’);<br>sh.addShard(‘127.0.0.1:27021’);</p>\n</blockquote>\n<p>添加需要分片的库,并设置片键（设置了片键的话，每次新增不允许为空）</p>\n<blockquote>\n<p>sh.enableSharding(‘polaris’);<br>sh.shardCollection(‘polaris.user’,{‘id’:1,’name’:1})</p>\n</blockquote>\n<p>新增一定数据量的情况下，数据只出现在一个片区，（默认的配置新增10万就会出现在不同的分片）</p>\n<h2 id=\"节点说明\"><a href=\"#节点说明\" class=\"headerlink\" title=\"节点说明\"></a>节点说明</h2><p><strong>选举算法采用bully算法</strong></p>\n<ul>\n<li>primary：主节点</li>\n<li>arbiteronly：仲裁节点,不存储数据,只参与投票</li>\n<li>Secondary-Only：不能成为主节点,只能做为从节点,并可以参与选举</li>\n<li>-Hidden：隐藏不被链接的从节点,不被程序访问,但可以参与选举的节点</li>\n<li>Delayed：可以指定一个时间延迟从primary节点同步数据。主要用于备份数据，如果实时同步，误删除数据马上同步到从节点，恢复又恢复不了。</li>\n<li>Non_voting：不参与选举,只负责备分数据</li>\n</ul>\n<h2 id=\"其它说明\"><a href=\"#其它说明\" class=\"headerlink\" title=\"其它说明\"></a>其它说明</h2><p>创建管理用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use aedata</span><br><span class=\"line\">db.createUser(&#123;</span><br><span class=\"line\">    user:&apos;admin&apos;,</span><br><span class=\"line\">    pwd:&apos;111111&apos;,</span><br><span class=\"line\">    roles:[&#123;role:&apos;readWrite&apos;,db:&apos;aedata&apos;&#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>格式化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&apos;HPSTJNL_CHECKED&apos;).aggregate([</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t$match : </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tTXN_AMT : </span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t$lte : 1.0</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t$group : </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_id : &quot;$AC_DT&quot;, </span><br><span class=\"line\">\t\t\ttotalAmt : &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t$sum:&quot;$TXN_AMT&quot;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mongodb基础\"><a href=\"#Mongodb基础\" class=\"headerlink\" title=\"Mongodb基础\"></a>Mongodb基础</h1><p>映射关系</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">关系型数据库</th>\n<th style=\"text-align:center\">Mongodb</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">表</td>\n<td style=\"text-align:center\">集合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">行数据</td>\n<td style=\"text-align:center\">文档</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">字段</td>\n<td style=\"text-align:center\">域</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h2><p>新建连接</p>\n<blockquote>\n<p>mongod.exe ip:port/database -u user -p password</p>\n</blockquote>\n<p>基础查询</p>\n<blockquote>\n<p>show dbs<br>use database<br>show tables</p>\n</blockquote>\n<p>查询name域为string类型，按照name正排序，跳过20条数据，返回10条</p>\n<blockquote>\n<p>db.student.find({name:{$type : 2}},{}).sort({name:1}).skip(20).limit(10)</p>\n</blockquote>\n<p>创建索引(1升序，-1逆)</p>\n<blockquote>\n<p>db.student.ensureIndex({KEY:1})</p>\n</blockquote>\n<h2 id=\"管道查询\"><a href=\"#管道查询\" class=\"headerlink\" title=\"管道查询\"></a>管道查询</h2><p>先匹配TXN_AMT小于1.0的数据，将筛选的数据传入到下一管道处理，根据AC_DT分组求取TXN_AMT总金额</p>\n<blockquote>\n<p>db.getCollection(‘HPSTJNL_CHECKED’).aggregate([{$match : {“TXN_AMT”:{$lte:1.0}}},{$group:{_id : “$AC_DT”, totalAmt:{$sum:”$TXN_AMT”}}}])</p>\n</blockquote>\n<p>必须有一个_id，然后根据它来分组</p>\n<blockquote>\n<p>select AC_DT as _id, sum(TXN_AMT) as totalAmt from hc where TXN_AMT &lt;= 1.0 group by AC_DT</p>\n</blockquote>\n<h2 id=\"副本集设置（一主多从）\"><a href=\"#副本集设置（一主多从）\" class=\"headerlink\" title=\"副本集设置（一主多从）\"></a>副本集设置（一主多从）</h2><p>启动副本集的指令</p>\n<blockquote>\n<p>mongod –port “PORT” –dbpath “YOUR_DB_DATA_PATH” –replSet “REPLICA_SET_INSTANCE_NAME”</p>\n</blockquote>\n<p><strong>每个服务启动的REPLICA_SET_INSTANCE_NAME必须相同否则会不匹配</strong></p>\n<p>启动三台服务</p>\n<p>此处作为主机</p>\n<blockquote>\n<p>mongod –port 27017 –dbpath d:\\data\\master –replSet rs</p>\n</blockquote>\n<p>此处作为从机</p>\n<blockquote>\n<p>mongod –port 27018 –dbpath d:\\data\\bak1 –replSet rs</p>\n</blockquote>\n<p>此处作为仲裁：只参与投票</p>\n<blockquote>\n<p>mongod –port 27019 –dbpath d:\\data\\bak2 –replSet rs</p>\n</blockquote>\n<p>主机上添加从机</p>\n<blockquote>\n<p>rs.add(“host:port”)</p>\n</blockquote>\n<p>主机上添加仲裁</p>\n<blockquote>\n<p>rs.addArb(“host:port”)</p>\n</blockquote>\n<p>从机设置可读取</p>\n<blockquote>\n<p>rs.slaveOk(true)</p>\n</blockquote>\n<p>如果主库宕机，此时会发生内部选举，其中一台从机成为主机，待原主机重新启动之后，会变成从机并将数据从新主机同步过来</p>\n<h2 id=\"集群分片搭建\"><a href=\"#集群分片搭建\" class=\"headerlink\" title=\"集群分片搭建\"></a>集群分片搭建</h2><p>参考<a href=\"http://blog.csdn.net/sharetop/article/details/53610379\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/sharetop/article/details/53610379</a><br>–fork在linux上需要添加</p>\n<h3 id=\"1-分片服务器\"><a href=\"#1-分片服务器\" class=\"headerlink\" title=\"1. 分片服务器\"></a>1. 分片服务器</h3><p>启动分片服务</p>\n<blockquote>\n<p>mongod –port 27020 –dbpath=d:\\data\\shard\\s0 –logpath=d:\\data\\shard\\log\\s0.log –logappend –fork –shardsvr(version3.4)</p>\n</blockquote>\n<blockquote>\n<p>mongod –port 27021 –dbpath=d:\\data\\shard\\s1 –logpath=d:\\data\\shard\\log\\s0.log –logappend –fork–shardsvr(version3.4) </p>\n</blockquote>\n<h3 id=\"2-配置服务器\"><a href=\"#2-配置服务器\" class=\"headerlink\" title=\"2. 配置服务器\"></a>2. 配置服务器</h3><p>启动一台配置服务</p>\n<blockquote>\n<p>mongod –port 27100 –dbpath=d:\\data\\shard\\config –logpath=d:\\data\\shard\\log\\conf.log –logappend –fork –configsvr –replSet cs //3.4版本的写法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">cfg = &#123;</span><br><span class=\"line\">    _id:&apos;cs&apos;,</span><br><span class=\"line\">    configsvr:true,</span><br><span class=\"line\">    members:[</span><br><span class=\"line\">        &#123;_id:0,host:&apos;127.0.0.1:27100&apos;&#125;</span><br><span class=\"line\">     ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>初始化配置</p>\n<blockquote>\n<p>rs.initiate(cfg);</p>\n</blockquote>\n<h3 id=\"3-路由服务器\"><a href=\"#3-路由服务器\" class=\"headerlink\" title=\"3. 路由服务器\"></a>3. 路由服务器</h3><blockquote>\n<p>mongos –port 40000 –configdb cs/127.0.0.1:27100 </p>\n</blockquote>\n<h3 id=\"4-分片配置\"><a href=\"#4-分片配置\" class=\"headerlink\" title=\"4. 分片配置\"></a>4. 分片配置</h3><p>登录40000的服务，添加分片</p>\n<blockquote>\n<p>sh.addShard(‘127.0.0.1:27020’);<br>sh.addShard(‘127.0.0.1:27021’);</p>\n</blockquote>\n<p>添加需要分片的库,并设置片键（设置了片键的话，每次新增不允许为空）</p>\n<blockquote>\n<p>sh.enableSharding(‘polaris’);<br>sh.shardCollection(‘polaris.user’,{‘id’:1,’name’:1})</p>\n</blockquote>\n<p>新增一定数据量的情况下，数据只出现在一个片区，（默认的配置新增10万就会出现在不同的分片）</p>\n<h2 id=\"节点说明\"><a href=\"#节点说明\" class=\"headerlink\" title=\"节点说明\"></a>节点说明</h2><p><strong>选举算法采用bully算法</strong></p>\n<ul>\n<li>primary：主节点</li>\n<li>arbiteronly：仲裁节点,不存储数据,只参与投票</li>\n<li>Secondary-Only：不能成为主节点,只能做为从节点,并可以参与选举</li>\n<li>-Hidden：隐藏不被链接的从节点,不被程序访问,但可以参与选举的节点</li>\n<li>Delayed：可以指定一个时间延迟从primary节点同步数据。主要用于备份数据，如果实时同步，误删除数据马上同步到从节点，恢复又恢复不了。</li>\n<li>Non_voting：不参与选举,只负责备分数据</li>\n</ul>\n<h2 id=\"其它说明\"><a href=\"#其它说明\" class=\"headerlink\" title=\"其它说明\"></a>其它说明</h2><p>创建管理用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use aedata</span><br><span class=\"line\">db.createUser(&#123;</span><br><span class=\"line\">    user:&apos;admin&apos;,</span><br><span class=\"line\">    pwd:&apos;111111&apos;,</span><br><span class=\"line\">    roles:[&#123;role:&apos;readWrite&apos;,db:&apos;aedata&apos;&#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>格式化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&apos;HPSTJNL_CHECKED&apos;).aggregate([</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t$match : </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tTXN_AMT : </span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t$lte : 1.0</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t$group : </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_id : &quot;$AC_DT&quot;, </span><br><span class=\"line\">\t\t\ttotalAmt : &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t$sum:&quot;$TXN_AMT&quot;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure></p>\n"},{"title":"mysql基础","date":"2017-07-10T02:52:00.000Z","_content":"\n# 前言\nEQUI JOIN: join、outer join \nSEMI JOIN: from a,b\n\n# 索引\n- 存储过程至批量数据导入\n\n```mysql\ncreate PROCEDURE bigData_test(IN num int,IN begin_num int)\nBEGIN\n\t DECLARE i INT DEFAULT  0;\n\t DECLARE y INT DEFAULT  begin_num;\n\t WHILE i < num DO\n\t\t\tINSERT INTO bs_user VALUES (y,concat(y,'.jpg'),concat('tangyb',y),concat('tangyb',y),concat('tangyb',y),NULL,NULL,'00');\n\t\t\tSET i = i + 1;\n\t\t\tSET y = y + 1;\n\t END WHILE;\nEND\n```\n\n\n\n- 执行存储函数\n```mysql\nSTART TRANSACTION;\ncall bigData_test(100000,1); //调用存储过程（手动开启事务，否则每次insert都会commit，会导致执行速度慢到令人发指）\ncommit;\n```\n\n- 新建并查询索引（自己测试的时候先新增数据在建立索引，否则在添加数据的时候等候时间太长）\n```mysql\nALTER TABLE bs_user ADD INDEX index_uname (u_name); //给bs_user添加一个名为index_uname的索引\nshow index from bs_user; /*查询bs_user表中的索引\n```\n\n**小知识**\n\n```mysql\nshow global variables like '%query_cache%'; //查询query_cache 是否开启（走索引第一次会很慢，第二次会很快）\n```\n```mysql\nshow variables like '%storage_engine%'; //表引擎使用innodb.第一次查询也会走数据文件，第二次直接走buffer_pool,也比直接查询数据文件要快\n```\n原理分析：http://blog.jobbole.com/24006/\n\n# 分表、分库、分区\n在大数据的基础上需要考虑这些数据主要是读还是更新（根据不同的操作也可以选择不同特征的数据库，冷热数据分离）。\n## 分表\n- 垂直-按照字段（如：文章的内容常常用于查询，访问量常常更新）\n- 水平-保持表的结构相同，只是把数据放到不同的表中（user表：user1,user2），根据uid段来区分1~1000000放到user1，1000001~2000000放到user2等等\n每张表都需要带上，MYD数据文件，.MYI索引文件，.frm表结构文件\n\n## 分区\n将一张表的数据分为N个区块，可以放置在相同或是不同的磁盘上，散列在不同的位置。操作的同一张表名，由数据库自己选择分区。\n\n## 分库\n当一台服务器的磁盘IO遇到瓶颈或是磁盘剩余空间过小等等，可以采用分库到不同服务器数据库。\n\n简单介绍：http://www.cnblogs.com/langtianya/p/4997768.html\t\n存在问题：http://wentao365.iteye.com/blog/1740874\n\n# 引擎\nmysql中 myisam 引擎不支持事务的概念，多用于数据仓库这样查询多而事务少的情况，速度较快。\n\nmysql中 innoDB 引擎支持事务的概念，多用于web网站后台等实时的中小型事务处理后台。\n\n一种是表锁定（myisam存储引擎），一个是行锁定（innodb存储引擎）。\n\n# 小结\n## mysql大约执行流程\n1. 接收到sql; \n2. 把sql放到排队队列中;\n3. 执行sql; \n4. 返回执行结果。\n\n##  注意点\n1. 做mysql集群，用调度算法选择数据库（但是每张表的数据还是那么多，只是改变了连接队列方面的效率，而且耗硬件）。\n\n2. 预计会出现大数据量并访问频繁，按照user1,user2的方式分表（缩短每张表的数据，但是前期如果没有规划好，后期就需要修改大量的sql）。\n\n3. merge存储引擎来实现分表（用一个总表allUser,然后做user1和User2）,具体http://www.cnblogs.com/miketwais/articles/mysql_partition.html。\n\n4. 存储引擎的使用不同，冷数据使用MyIsam 可以有更好的查询数据。活跃数据，可以使用Innodb ,可以有更好的更新速度。\n\n5. 对冷数据进行更多的从库配置，因为更多的操作是查询，这样来加快查询速度。对热数据，可以相对有更多的主库的横向分表处理。\n\n6. 对于一些特殊的活跃数据，也可以考虑使用memcache ,redis之类的缓存，等累计到一定量再去更新数据库.\n\n## 提升检索速度\n1. like '%tangyb' 这种前面模糊匹配会严重影响检索速度\n2. limit 的offset 是取offset+N行 并不是从offset开始,所以offset特别大的时候 影响效率\n3. count(*)会统计所有行 ，count(1)必须确保第一列不为null，否则不会统计，所以mysql推荐使用count（*）\n4. 禁止使用外键（不适合分布式、高并发）和存储过程（不利于调试、扩展、移植）\n5. 最好避免in的使用，最好在1000以内\n6. mybatis多用resultMap,禁止返回resultClass，减少耦合，方便维护\n7. 表的设计 包括 id、gmt\u001f_creat、gmt\u001f_modified\n","source":"_posts/mysql基础.md","raw":"---\ntitle: mysql基础\ndate: 2017-07-10 10:52:00\ntags:\n- mysql\n- 数据库\ncategories:\n- 技术\n---\n\n# 前言\nEQUI JOIN: join、outer join \nSEMI JOIN: from a,b\n\n# 索引\n- 存储过程至批量数据导入\n\n```mysql\ncreate PROCEDURE bigData_test(IN num int,IN begin_num int)\nBEGIN\n\t DECLARE i INT DEFAULT  0;\n\t DECLARE y INT DEFAULT  begin_num;\n\t WHILE i < num DO\n\t\t\tINSERT INTO bs_user VALUES (y,concat(y,'.jpg'),concat('tangyb',y),concat('tangyb',y),concat('tangyb',y),NULL,NULL,'00');\n\t\t\tSET i = i + 1;\n\t\t\tSET y = y + 1;\n\t END WHILE;\nEND\n```\n\n\n\n- 执行存储函数\n```mysql\nSTART TRANSACTION;\ncall bigData_test(100000,1); //调用存储过程（手动开启事务，否则每次insert都会commit，会导致执行速度慢到令人发指）\ncommit;\n```\n\n- 新建并查询索引（自己测试的时候先新增数据在建立索引，否则在添加数据的时候等候时间太长）\n```mysql\nALTER TABLE bs_user ADD INDEX index_uname (u_name); //给bs_user添加一个名为index_uname的索引\nshow index from bs_user; /*查询bs_user表中的索引\n```\n\n**小知识**\n\n```mysql\nshow global variables like '%query_cache%'; //查询query_cache 是否开启（走索引第一次会很慢，第二次会很快）\n```\n```mysql\nshow variables like '%storage_engine%'; //表引擎使用innodb.第一次查询也会走数据文件，第二次直接走buffer_pool,也比直接查询数据文件要快\n```\n原理分析：http://blog.jobbole.com/24006/\n\n# 分表、分库、分区\n在大数据的基础上需要考虑这些数据主要是读还是更新（根据不同的操作也可以选择不同特征的数据库，冷热数据分离）。\n## 分表\n- 垂直-按照字段（如：文章的内容常常用于查询，访问量常常更新）\n- 水平-保持表的结构相同，只是把数据放到不同的表中（user表：user1,user2），根据uid段来区分1~1000000放到user1，1000001~2000000放到user2等等\n每张表都需要带上，MYD数据文件，.MYI索引文件，.frm表结构文件\n\n## 分区\n将一张表的数据分为N个区块，可以放置在相同或是不同的磁盘上，散列在不同的位置。操作的同一张表名，由数据库自己选择分区。\n\n## 分库\n当一台服务器的磁盘IO遇到瓶颈或是磁盘剩余空间过小等等，可以采用分库到不同服务器数据库。\n\n简单介绍：http://www.cnblogs.com/langtianya/p/4997768.html\t\n存在问题：http://wentao365.iteye.com/blog/1740874\n\n# 引擎\nmysql中 myisam 引擎不支持事务的概念，多用于数据仓库这样查询多而事务少的情况，速度较快。\n\nmysql中 innoDB 引擎支持事务的概念，多用于web网站后台等实时的中小型事务处理后台。\n\n一种是表锁定（myisam存储引擎），一个是行锁定（innodb存储引擎）。\n\n# 小结\n## mysql大约执行流程\n1. 接收到sql; \n2. 把sql放到排队队列中;\n3. 执行sql; \n4. 返回执行结果。\n\n##  注意点\n1. 做mysql集群，用调度算法选择数据库（但是每张表的数据还是那么多，只是改变了连接队列方面的效率，而且耗硬件）。\n\n2. 预计会出现大数据量并访问频繁，按照user1,user2的方式分表（缩短每张表的数据，但是前期如果没有规划好，后期就需要修改大量的sql）。\n\n3. merge存储引擎来实现分表（用一个总表allUser,然后做user1和User2）,具体http://www.cnblogs.com/miketwais/articles/mysql_partition.html。\n\n4. 存储引擎的使用不同，冷数据使用MyIsam 可以有更好的查询数据。活跃数据，可以使用Innodb ,可以有更好的更新速度。\n\n5. 对冷数据进行更多的从库配置，因为更多的操作是查询，这样来加快查询速度。对热数据，可以相对有更多的主库的横向分表处理。\n\n6. 对于一些特殊的活跃数据，也可以考虑使用memcache ,redis之类的缓存，等累计到一定量再去更新数据库.\n\n## 提升检索速度\n1. like '%tangyb' 这种前面模糊匹配会严重影响检索速度\n2. limit 的offset 是取offset+N行 并不是从offset开始,所以offset特别大的时候 影响效率\n3. count(*)会统计所有行 ，count(1)必须确保第一列不为null，否则不会统计，所以mysql推荐使用count（*）\n4. 禁止使用外键（不适合分布式、高并发）和存储过程（不利于调试、扩展、移植）\n5. 最好避免in的使用，最好在1000以内\n6. mybatis多用resultMap,禁止返回resultClass，减少耦合，方便维护\n7. 表的设计 包括 id、gmt\u001f_creat、gmt\u001f_modified\n","slug":"mysql基础","published":1,"updated":"2019-06-01T13:45:14.100Z","_id":"cjvgqv5hb0000jscbl2ad56zt","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>EQUI JOIN: join、outer join<br>SEMI JOIN: from a,b</p>\n<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><ul>\n<li>存储过程至批量数据导入</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create PROCEDURE bigData_test(IN num int,IN begin_num int)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">\t DECLARE i INT DEFAULT  0;</span><br><span class=\"line\">\t DECLARE y INT DEFAULT  begin_num;</span><br><span class=\"line\">\t WHILE i &lt; num DO</span><br><span class=\"line\">\t\t\tINSERT INTO bs_user VALUES (y,concat(y,&apos;.jpg&apos;),concat(&apos;tangyb&apos;,y),concat(&apos;tangyb&apos;,y),concat(&apos;tangyb&apos;,y),NULL,NULL,&apos;00&apos;);</span><br><span class=\"line\">\t\t\tSET i = i + 1;</span><br><span class=\"line\">\t\t\tSET y = y + 1;</span><br><span class=\"line\">\t END WHILE;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>执行存储函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">START TRANSACTION;</span><br><span class=\"line\">call bigData_test(100000,1); //调用存储过程（手动开启事务，否则每次insert都会commit，会导致执行速度慢到令人发指）</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建并查询索引（自己测试的时候先新增数据在建立索引，否则在添加数据的时候等候时间太长）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE bs_user ADD INDEX index_uname (u_name); //给bs_user添加一个名为index_uname的索引</span><br><span class=\"line\">show index from bs_user; /*查询bs_user表中的索引</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>小知识</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show global variables like &apos;%query_cache%&apos;; //查询query_cache 是否开启（走索引第一次会很慢，第二次会很快）</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &apos;%storage_engine%&apos;; //表引擎使用innodb.第一次查询也会走数据文件，第二次直接走buffer_pool,也比直接查询数据文件要快</span><br></pre></td></tr></table></figure>\n<p>原理分析：<a href=\"http://blog.jobbole.com/24006/\" target=\"_blank\" rel=\"noopener\">http://blog.jobbole.com/24006/</a></p>\n<h1 id=\"分表、分库、分区\"><a href=\"#分表、分库、分区\" class=\"headerlink\" title=\"分表、分库、分区\"></a>分表、分库、分区</h1><p>在大数据的基础上需要考虑这些数据主要是读还是更新（根据不同的操作也可以选择不同特征的数据库，冷热数据分离）。</p>\n<h2 id=\"分表\"><a href=\"#分表\" class=\"headerlink\" title=\"分表\"></a>分表</h2><ul>\n<li>垂直-按照字段（如：文章的内容常常用于查询，访问量常常更新）</li>\n<li>水平-保持表的结构相同，只是把数据放到不同的表中（user表：user1,user2），根据uid段来区分1~1000000放到user1，1000001~2000000放到user2等等<br>每张表都需要带上，MYD数据文件，.MYI索引文件，.frm表结构文件</li>\n</ul>\n<h2 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h2><p>将一张表的数据分为N个区块，可以放置在相同或是不同的磁盘上，散列在不同的位置。操作的同一张表名，由数据库自己选择分区。</p>\n<h2 id=\"分库\"><a href=\"#分库\" class=\"headerlink\" title=\"分库\"></a>分库</h2><p>当一台服务器的磁盘IO遇到瓶颈或是磁盘剩余空间过小等等，可以采用分库到不同服务器数据库。</p>\n<p>简单介绍：<a href=\"http://www.cnblogs.com/langtianya/p/4997768.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/langtianya/p/4997768.html</a><br>存在问题：<a href=\"http://wentao365.iteye.com/blog/1740874\" target=\"_blank\" rel=\"noopener\">http://wentao365.iteye.com/blog/1740874</a></p>\n<h1 id=\"引擎\"><a href=\"#引擎\" class=\"headerlink\" title=\"引擎\"></a>引擎</h1><p>mysql中 myisam 引擎不支持事务的概念，多用于数据仓库这样查询多而事务少的情况，速度较快。</p>\n<p>mysql中 innoDB 引擎支持事务的概念，多用于web网站后台等实时的中小型事务处理后台。</p>\n<p>一种是表锁定（myisam存储引擎），一个是行锁定（innodb存储引擎）。</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><h2 id=\"mysql大约执行流程\"><a href=\"#mysql大约执行流程\" class=\"headerlink\" title=\"mysql大约执行流程\"></a>mysql大约执行流程</h2><ol>\n<li>接收到sql; </li>\n<li>把sql放到排队队列中;</li>\n<li>执行sql; </li>\n<li>返回执行结果。</li>\n</ol>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ol>\n<li><p>做mysql集群，用调度算法选择数据库（但是每张表的数据还是那么多，只是改变了连接队列方面的效率，而且耗硬件）。</p>\n</li>\n<li><p>预计会出现大数据量并访问频繁，按照user1,user2的方式分表（缩短每张表的数据，但是前期如果没有规划好，后期就需要修改大量的sql）。</p>\n</li>\n<li><p>merge存储引擎来实现分表（用一个总表allUser,然后做user1和User2）,具体<a href=\"http://www.cnblogs.com/miketwais/articles/mysql_partition.html。\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/miketwais/articles/mysql_partition.html。</a></p>\n</li>\n<li><p>存储引擎的使用不同，冷数据使用MyIsam 可以有更好的查询数据。活跃数据，可以使用Innodb ,可以有更好的更新速度。</p>\n</li>\n<li><p>对冷数据进行更多的从库配置，因为更多的操作是查询，这样来加快查询速度。对热数据，可以相对有更多的主库的横向分表处理。</p>\n</li>\n<li><p>对于一些特殊的活跃数据，也可以考虑使用memcache ,redis之类的缓存，等累计到一定量再去更新数据库.</p>\n</li>\n</ol>\n<h2 id=\"提升检索速度\"><a href=\"#提升检索速度\" class=\"headerlink\" title=\"提升检索速度\"></a>提升检索速度</h2><ol>\n<li>like ‘%tangyb’ 这种前面模糊匹配会严重影响检索速度</li>\n<li>limit 的offset 是取offset+N行 并不是从offset开始,所以offset特别大的时候 影响效率</li>\n<li>count(<em>)会统计所有行 ，count(1)必须确保第一列不为null，否则不会统计，所以mysql推荐使用count（</em>）</li>\n<li>禁止使用外键（不适合分布式、高并发）和存储过程（不利于调试、扩展、移植）</li>\n<li>最好避免in的使用，最好在1000以内</li>\n<li>mybatis多用resultMap,禁止返回resultClass，减少耦合，方便维护</li>\n<li>表的设计 包括 id、gmt\u001f_creat、gmt\u001f_modified</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>EQUI JOIN: join、outer join<br>SEMI JOIN: from a,b</p>\n<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><ul>\n<li>存储过程至批量数据导入</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create PROCEDURE bigData_test(IN num int,IN begin_num int)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">\t DECLARE i INT DEFAULT  0;</span><br><span class=\"line\">\t DECLARE y INT DEFAULT  begin_num;</span><br><span class=\"line\">\t WHILE i &lt; num DO</span><br><span class=\"line\">\t\t\tINSERT INTO bs_user VALUES (y,concat(y,&apos;.jpg&apos;),concat(&apos;tangyb&apos;,y),concat(&apos;tangyb&apos;,y),concat(&apos;tangyb&apos;,y),NULL,NULL,&apos;00&apos;);</span><br><span class=\"line\">\t\t\tSET i = i + 1;</span><br><span class=\"line\">\t\t\tSET y = y + 1;</span><br><span class=\"line\">\t END WHILE;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>执行存储函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">START TRANSACTION;</span><br><span class=\"line\">call bigData_test(100000,1); //调用存储过程（手动开启事务，否则每次insert都会commit，会导致执行速度慢到令人发指）</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建并查询索引（自己测试的时候先新增数据在建立索引，否则在添加数据的时候等候时间太长）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE bs_user ADD INDEX index_uname (u_name); //给bs_user添加一个名为index_uname的索引</span><br><span class=\"line\">show index from bs_user; /*查询bs_user表中的索引</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>小知识</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show global variables like &apos;%query_cache%&apos;; //查询query_cache 是否开启（走索引第一次会很慢，第二次会很快）</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &apos;%storage_engine%&apos;; //表引擎使用innodb.第一次查询也会走数据文件，第二次直接走buffer_pool,也比直接查询数据文件要快</span><br></pre></td></tr></table></figure>\n<p>原理分析：<a href=\"http://blog.jobbole.com/24006/\" target=\"_blank\" rel=\"noopener\">http://blog.jobbole.com/24006/</a></p>\n<h1 id=\"分表、分库、分区\"><a href=\"#分表、分库、分区\" class=\"headerlink\" title=\"分表、分库、分区\"></a>分表、分库、分区</h1><p>在大数据的基础上需要考虑这些数据主要是读还是更新（根据不同的操作也可以选择不同特征的数据库，冷热数据分离）。</p>\n<h2 id=\"分表\"><a href=\"#分表\" class=\"headerlink\" title=\"分表\"></a>分表</h2><ul>\n<li>垂直-按照字段（如：文章的内容常常用于查询，访问量常常更新）</li>\n<li>水平-保持表的结构相同，只是把数据放到不同的表中（user表：user1,user2），根据uid段来区分1~1000000放到user1，1000001~2000000放到user2等等<br>每张表都需要带上，MYD数据文件，.MYI索引文件，.frm表结构文件</li>\n</ul>\n<h2 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h2><p>将一张表的数据分为N个区块，可以放置在相同或是不同的磁盘上，散列在不同的位置。操作的同一张表名，由数据库自己选择分区。</p>\n<h2 id=\"分库\"><a href=\"#分库\" class=\"headerlink\" title=\"分库\"></a>分库</h2><p>当一台服务器的磁盘IO遇到瓶颈或是磁盘剩余空间过小等等，可以采用分库到不同服务器数据库。</p>\n<p>简单介绍：<a href=\"http://www.cnblogs.com/langtianya/p/4997768.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/langtianya/p/4997768.html</a><br>存在问题：<a href=\"http://wentao365.iteye.com/blog/1740874\" target=\"_blank\" rel=\"noopener\">http://wentao365.iteye.com/blog/1740874</a></p>\n<h1 id=\"引擎\"><a href=\"#引擎\" class=\"headerlink\" title=\"引擎\"></a>引擎</h1><p>mysql中 myisam 引擎不支持事务的概念，多用于数据仓库这样查询多而事务少的情况，速度较快。</p>\n<p>mysql中 innoDB 引擎支持事务的概念，多用于web网站后台等实时的中小型事务处理后台。</p>\n<p>一种是表锁定（myisam存储引擎），一个是行锁定（innodb存储引擎）。</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><h2 id=\"mysql大约执行流程\"><a href=\"#mysql大约执行流程\" class=\"headerlink\" title=\"mysql大约执行流程\"></a>mysql大约执行流程</h2><ol>\n<li>接收到sql; </li>\n<li>把sql放到排队队列中;</li>\n<li>执行sql; </li>\n<li>返回执行结果。</li>\n</ol>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ol>\n<li><p>做mysql集群，用调度算法选择数据库（但是每张表的数据还是那么多，只是改变了连接队列方面的效率，而且耗硬件）。</p>\n</li>\n<li><p>预计会出现大数据量并访问频繁，按照user1,user2的方式分表（缩短每张表的数据，但是前期如果没有规划好，后期就需要修改大量的sql）。</p>\n</li>\n<li><p>merge存储引擎来实现分表（用一个总表allUser,然后做user1和User2）,具体<a href=\"http://www.cnblogs.com/miketwais/articles/mysql_partition.html。\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/miketwais/articles/mysql_partition.html。</a></p>\n</li>\n<li><p>存储引擎的使用不同，冷数据使用MyIsam 可以有更好的查询数据。活跃数据，可以使用Innodb ,可以有更好的更新速度。</p>\n</li>\n<li><p>对冷数据进行更多的从库配置，因为更多的操作是查询，这样来加快查询速度。对热数据，可以相对有更多的主库的横向分表处理。</p>\n</li>\n<li><p>对于一些特殊的活跃数据，也可以考虑使用memcache ,redis之类的缓存，等累计到一定量再去更新数据库.</p>\n</li>\n</ol>\n<h2 id=\"提升检索速度\"><a href=\"#提升检索速度\" class=\"headerlink\" title=\"提升检索速度\"></a>提升检索速度</h2><ol>\n<li>like ‘%tangyb’ 这种前面模糊匹配会严重影响检索速度</li>\n<li>limit 的offset 是取offset+N行 并不是从offset开始,所以offset特别大的时候 影响效率</li>\n<li>count(<em>)会统计所有行 ，count(1)必须确保第一列不为null，否则不会统计，所以mysql推荐使用count（</em>）</li>\n<li>禁止使用外键（不适合分布式、高并发）和存储过程（不利于调试、扩展、移植）</li>\n<li>最好避免in的使用，最好在1000以内</li>\n<li>mybatis多用resultMap,禁止返回resultClass，减少耦合，方便维护</li>\n<li>表的设计 包括 id、gmt\u001f_creat、gmt\u001f_modified</li>\n</ol>\n"},{"title":"跨N库分页","date":"2017-07-07T12:01:00.000Z","_content":"\n# 跨N库分页\n样例：如果分为ABC三库，每页显示20条数据，数据量足够多。\n## 实现方案\n### 方法一：全局视野法\n如果取第一页，则三个库都取前20条，共60条。然后排序取前20条。（因为第一页就在这60条数据里）\n如果取第二页，则三个库都取前40条，共120条。然后排序取第21~40条。（因为第二页就在这120条数据里）\n依次类推。。。。。\n缺点：越往后需要的数据越多，当你取N页的时候，其实已经把N页以前的数据也获取了过来。\n\n### 方法二：业务折衷法-禁止跳页查询\n不允许跳往指定页，只有首页上一页下一页末页（目前公司大数据做法而且因为统计总记录数很慢，导致也没有总页数）\n第一次进入是首页，做法和全局视野类似，这时候会记录第20条数的流水号\n然后点击下一页，ABC三库获取记录的那条流水之后的20条数据，共60条，然后排序取前20条。\n上一页，三库都获取流水之前的20条数据（不足20条，全获取），然后排序取前20条。\n依次类推。。。。。。。\n缺点：无法跳转指定的页数\n设想：前几页可以任意跳转，后几页可以任意跳转（逆排序），当第五页之后采用上下页的方式。\n首页 2 3 4 5.... 末页，\n首页 ....47 48 49 末页，\n首页....11 12 13.......末页\n前后几页用全局视野法，中间用禁止跳页查询方法。\n\n### 方法三：业务折衷法-允许模糊数据\n假设ABC库数据均匀，获取第N+1页的数据的时候，三库偏移20N/3条，各自获取20/3数据。（可以改为都获取20条共60条，然后排序取前20条）\n缺点：数据偏差，不精确。\n\n\n### 方法四：二次查询法\n如跳转第N+1页时\n第一次查询：三库偏移20N/3,各自获取20条，找出所有的最小值min,和每个库的最大值max_i(1,2,3)\n第二次查询: 三库查询between (min, max_i)之间的数据，计算min在每个库的偏移量，然后相加等于min在全库的偏移量，将第二次查询的数据整合排序，已经知道第一条数据min的全局偏移量，那么偏移量20N所在的位置及之后的20条数据。\n\n## 方案落实\n\n### 方法一：全局视野法\n\n（1）将order by time offset X limit Y，改写成order by time offset 0 limit X+Y\n\n（2）服务层对得到的N*(X+Y)条数据进行内存排序，内存排序后再取偏移量X后的Y条记录\n\n这种方法随着翻页的进行，性能越来越低。\n\n\n### 方法二：业务折衷法-禁止跳页查询\n\n（1）用正常的方法取得第一页数据，并得到第一页记录的time_max\n\n（2）每次翻页，将order by time offset X limit Y，改写成order by time where time>$time_max limit Y\n\n以保证每次只返回一页数据，性能为常量。\n\n\n### 方法三：业务折衷法-允许模糊数据\n\n（1）将order by time offset X limit Y，改写成order by time offset X/N limit Y/N\n\n\n### 方法四：二次查询法\n\n（1）将order by time offset X limit Y，改写成order by time offset X/N limit Y\n\n（2）找到最小值time_min\n\n（3）between二次查询，order by time between $time_min and $time_i_max\n\n（4）设置虚拟time_min，找到time_min在各个分库的offset，从而得到time_min在全局的offset\n\n（5）得到了time_min在全局的offset，自然得到了全局的offset X limit Y\n","source":"_posts/跨N库分页.md","raw":"---\ntitle: 跨N库分页\ndate: 2017-07-07 20:01:00\ntags:\n- 数据库\ncategories:\n- 技术\n---\n\n# 跨N库分页\n样例：如果分为ABC三库，每页显示20条数据，数据量足够多。\n## 实现方案\n### 方法一：全局视野法\n如果取第一页，则三个库都取前20条，共60条。然后排序取前20条。（因为第一页就在这60条数据里）\n如果取第二页，则三个库都取前40条，共120条。然后排序取第21~40条。（因为第二页就在这120条数据里）\n依次类推。。。。。\n缺点：越往后需要的数据越多，当你取N页的时候，其实已经把N页以前的数据也获取了过来。\n\n### 方法二：业务折衷法-禁止跳页查询\n不允许跳往指定页，只有首页上一页下一页末页（目前公司大数据做法而且因为统计总记录数很慢，导致也没有总页数）\n第一次进入是首页，做法和全局视野类似，这时候会记录第20条数的流水号\n然后点击下一页，ABC三库获取记录的那条流水之后的20条数据，共60条，然后排序取前20条。\n上一页，三库都获取流水之前的20条数据（不足20条，全获取），然后排序取前20条。\n依次类推。。。。。。。\n缺点：无法跳转指定的页数\n设想：前几页可以任意跳转，后几页可以任意跳转（逆排序），当第五页之后采用上下页的方式。\n首页 2 3 4 5.... 末页，\n首页 ....47 48 49 末页，\n首页....11 12 13.......末页\n前后几页用全局视野法，中间用禁止跳页查询方法。\n\n### 方法三：业务折衷法-允许模糊数据\n假设ABC库数据均匀，获取第N+1页的数据的时候，三库偏移20N/3条，各自获取20/3数据。（可以改为都获取20条共60条，然后排序取前20条）\n缺点：数据偏差，不精确。\n\n\n### 方法四：二次查询法\n如跳转第N+1页时\n第一次查询：三库偏移20N/3,各自获取20条，找出所有的最小值min,和每个库的最大值max_i(1,2,3)\n第二次查询: 三库查询between (min, max_i)之间的数据，计算min在每个库的偏移量，然后相加等于min在全库的偏移量，将第二次查询的数据整合排序，已经知道第一条数据min的全局偏移量，那么偏移量20N所在的位置及之后的20条数据。\n\n## 方案落实\n\n### 方法一：全局视野法\n\n（1）将order by time offset X limit Y，改写成order by time offset 0 limit X+Y\n\n（2）服务层对得到的N*(X+Y)条数据进行内存排序，内存排序后再取偏移量X后的Y条记录\n\n这种方法随着翻页的进行，性能越来越低。\n\n\n### 方法二：业务折衷法-禁止跳页查询\n\n（1）用正常的方法取得第一页数据，并得到第一页记录的time_max\n\n（2）每次翻页，将order by time offset X limit Y，改写成order by time where time>$time_max limit Y\n\n以保证每次只返回一页数据，性能为常量。\n\n\n### 方法三：业务折衷法-允许模糊数据\n\n（1）将order by time offset X limit Y，改写成order by time offset X/N limit Y/N\n\n\n### 方法四：二次查询法\n\n（1）将order by time offset X limit Y，改写成order by time offset X/N limit Y\n\n（2）找到最小值time_min\n\n（3）between二次查询，order by time between $time_min and $time_i_max\n\n（4）设置虚拟time_min，找到time_min在各个分库的offset，从而得到time_min在全局的offset\n\n（5）得到了time_min在全局的offset，自然得到了全局的offset X limit Y\n","slug":"跨N库分页","published":1,"updated":"2019-06-01T13:45:14.106Z","_id":"cjvgqv5hi0001jscbcqhdl5ju","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"跨N库分页\"><a href=\"#跨N库分页\" class=\"headerlink\" title=\"跨N库分页\"></a>跨N库分页</h1><p>样例：如果分为ABC三库，每页显示20条数据，数据量足够多。</p>\n<h2 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h2><h3 id=\"方法一：全局视野法\"><a href=\"#方法一：全局视野法\" class=\"headerlink\" title=\"方法一：全局视野法\"></a>方法一：全局视野法</h3><p>如果取第一页，则三个库都取前20条，共60条。然后排序取前20条。（因为第一页就在这60条数据里）<br>如果取第二页，则三个库都取前40条，共120条。然后排序取第21~40条。（因为第二页就在这120条数据里）<br>依次类推。。。。。<br>缺点：越往后需要的数据越多，当你取N页的时候，其实已经把N页以前的数据也获取了过来。</p>\n<h3 id=\"方法二：业务折衷法-禁止跳页查询\"><a href=\"#方法二：业务折衷法-禁止跳页查询\" class=\"headerlink\" title=\"方法二：业务折衷法-禁止跳页查询\"></a>方法二：业务折衷法-禁止跳页查询</h3><p>不允许跳往指定页，只有首页上一页下一页末页（目前公司大数据做法而且因为统计总记录数很慢，导致也没有总页数）<br>第一次进入是首页，做法和全局视野类似，这时候会记录第20条数的流水号<br>然后点击下一页，ABC三库获取记录的那条流水之后的20条数据，共60条，然后排序取前20条。<br>上一页，三库都获取流水之前的20条数据（不足20条，全获取），然后排序取前20条。<br>依次类推。。。。。。。<br>缺点：无法跳转指定的页数<br>设想：前几页可以任意跳转，后几页可以任意跳转（逆排序），当第五页之后采用上下页的方式。<br>首页 2 3 4 5…. 末页，<br>首页 ….47 48 49 末页，<br>首页….11 12 13…….末页<br>前后几页用全局视野法，中间用禁止跳页查询方法。</p>\n<h3 id=\"方法三：业务折衷法-允许模糊数据\"><a href=\"#方法三：业务折衷法-允许模糊数据\" class=\"headerlink\" title=\"方法三：业务折衷法-允许模糊数据\"></a>方法三：业务折衷法-允许模糊数据</h3><p>假设ABC库数据均匀，获取第N+1页的数据的时候，三库偏移20N/3条，各自获取20/3数据。（可以改为都获取20条共60条，然后排序取前20条）<br>缺点：数据偏差，不精确。</p>\n<h3 id=\"方法四：二次查询法\"><a href=\"#方法四：二次查询法\" class=\"headerlink\" title=\"方法四：二次查询法\"></a>方法四：二次查询法</h3><p>如跳转第N+1页时<br>第一次查询：三库偏移20N/3,各自获取20条，找出所有的最小值min,和每个库的最大值max_i(1,2,3)<br>第二次查询: 三库查询between (min, max_i)之间的数据，计算min在每个库的偏移量，然后相加等于min在全库的偏移量，将第二次查询的数据整合排序，已经知道第一条数据min的全局偏移量，那么偏移量20N所在的位置及之后的20条数据。</p>\n<h2 id=\"方案落实\"><a href=\"#方案落实\" class=\"headerlink\" title=\"方案落实\"></a>方案落实</h2><h3 id=\"方法一：全局视野法-1\"><a href=\"#方法一：全局视野法-1\" class=\"headerlink\" title=\"方法一：全局视野法\"></a>方法一：全局视野法</h3><p>（1）将order by time offset X limit Y，改写成order by time offset 0 limit X+Y</p>\n<p>（2）服务层对得到的N*(X+Y)条数据进行内存排序，内存排序后再取偏移量X后的Y条记录</p>\n<p>这种方法随着翻页的进行，性能越来越低。</p>\n<h3 id=\"方法二：业务折衷法-禁止跳页查询-1\"><a href=\"#方法二：业务折衷法-禁止跳页查询-1\" class=\"headerlink\" title=\"方法二：业务折衷法-禁止跳页查询\"></a>方法二：业务折衷法-禁止跳页查询</h3><p>（1）用正常的方法取得第一页数据，并得到第一页记录的time_max</p>\n<p>（2）每次翻页，将order by time offset X limit Y，改写成order by time where time&gt;$time_max limit Y</p>\n<p>以保证每次只返回一页数据，性能为常量。</p>\n<h3 id=\"方法三：业务折衷法-允许模糊数据-1\"><a href=\"#方法三：业务折衷法-允许模糊数据-1\" class=\"headerlink\" title=\"方法三：业务折衷法-允许模糊数据\"></a>方法三：业务折衷法-允许模糊数据</h3><p>（1）将order by time offset X limit Y，改写成order by time offset X/N limit Y/N</p>\n<h3 id=\"方法四：二次查询法-1\"><a href=\"#方法四：二次查询法-1\" class=\"headerlink\" title=\"方法四：二次查询法\"></a>方法四：二次查询法</h3><p>（1）将order by time offset X limit Y，改写成order by time offset X/N limit Y</p>\n<p>（2）找到最小值time_min</p>\n<p>（3）between二次查询，order by time between $time_min and $time_i_max</p>\n<p>（4）设置虚拟time_min，找到time_min在各个分库的offset，从而得到time_min在全局的offset</p>\n<p>（5）得到了time_min在全局的offset，自然得到了全局的offset X limit Y</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"跨N库分页\"><a href=\"#跨N库分页\" class=\"headerlink\" title=\"跨N库分页\"></a>跨N库分页</h1><p>样例：如果分为ABC三库，每页显示20条数据，数据量足够多。</p>\n<h2 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h2><h3 id=\"方法一：全局视野法\"><a href=\"#方法一：全局视野法\" class=\"headerlink\" title=\"方法一：全局视野法\"></a>方法一：全局视野法</h3><p>如果取第一页，则三个库都取前20条，共60条。然后排序取前20条。（因为第一页就在这60条数据里）<br>如果取第二页，则三个库都取前40条，共120条。然后排序取第21~40条。（因为第二页就在这120条数据里）<br>依次类推。。。。。<br>缺点：越往后需要的数据越多，当你取N页的时候，其实已经把N页以前的数据也获取了过来。</p>\n<h3 id=\"方法二：业务折衷法-禁止跳页查询\"><a href=\"#方法二：业务折衷法-禁止跳页查询\" class=\"headerlink\" title=\"方法二：业务折衷法-禁止跳页查询\"></a>方法二：业务折衷法-禁止跳页查询</h3><p>不允许跳往指定页，只有首页上一页下一页末页（目前公司大数据做法而且因为统计总记录数很慢，导致也没有总页数）<br>第一次进入是首页，做法和全局视野类似，这时候会记录第20条数的流水号<br>然后点击下一页，ABC三库获取记录的那条流水之后的20条数据，共60条，然后排序取前20条。<br>上一页，三库都获取流水之前的20条数据（不足20条，全获取），然后排序取前20条。<br>依次类推。。。。。。。<br>缺点：无法跳转指定的页数<br>设想：前几页可以任意跳转，后几页可以任意跳转（逆排序），当第五页之后采用上下页的方式。<br>首页 2 3 4 5…. 末页，<br>首页 ….47 48 49 末页，<br>首页….11 12 13…….末页<br>前后几页用全局视野法，中间用禁止跳页查询方法。</p>\n<h3 id=\"方法三：业务折衷法-允许模糊数据\"><a href=\"#方法三：业务折衷法-允许模糊数据\" class=\"headerlink\" title=\"方法三：业务折衷法-允许模糊数据\"></a>方法三：业务折衷法-允许模糊数据</h3><p>假设ABC库数据均匀，获取第N+1页的数据的时候，三库偏移20N/3条，各自获取20/3数据。（可以改为都获取20条共60条，然后排序取前20条）<br>缺点：数据偏差，不精确。</p>\n<h3 id=\"方法四：二次查询法\"><a href=\"#方法四：二次查询法\" class=\"headerlink\" title=\"方法四：二次查询法\"></a>方法四：二次查询法</h3><p>如跳转第N+1页时<br>第一次查询：三库偏移20N/3,各自获取20条，找出所有的最小值min,和每个库的最大值max_i(1,2,3)<br>第二次查询: 三库查询between (min, max_i)之间的数据，计算min在每个库的偏移量，然后相加等于min在全库的偏移量，将第二次查询的数据整合排序，已经知道第一条数据min的全局偏移量，那么偏移量20N所在的位置及之后的20条数据。</p>\n<h2 id=\"方案落实\"><a href=\"#方案落实\" class=\"headerlink\" title=\"方案落实\"></a>方案落实</h2><h3 id=\"方法一：全局视野法-1\"><a href=\"#方法一：全局视野法-1\" class=\"headerlink\" title=\"方法一：全局视野法\"></a>方法一：全局视野法</h3><p>（1）将order by time offset X limit Y，改写成order by time offset 0 limit X+Y</p>\n<p>（2）服务层对得到的N*(X+Y)条数据进行内存排序，内存排序后再取偏移量X后的Y条记录</p>\n<p>这种方法随着翻页的进行，性能越来越低。</p>\n<h3 id=\"方法二：业务折衷法-禁止跳页查询-1\"><a href=\"#方法二：业务折衷法-禁止跳页查询-1\" class=\"headerlink\" title=\"方法二：业务折衷法-禁止跳页查询\"></a>方法二：业务折衷法-禁止跳页查询</h3><p>（1）用正常的方法取得第一页数据，并得到第一页记录的time_max</p>\n<p>（2）每次翻页，将order by time offset X limit Y，改写成order by time where time&gt;$time_max limit Y</p>\n<p>以保证每次只返回一页数据，性能为常量。</p>\n<h3 id=\"方法三：业务折衷法-允许模糊数据-1\"><a href=\"#方法三：业务折衷法-允许模糊数据-1\" class=\"headerlink\" title=\"方法三：业务折衷法-允许模糊数据\"></a>方法三：业务折衷法-允许模糊数据</h3><p>（1）将order by time offset X limit Y，改写成order by time offset X/N limit Y/N</p>\n<h3 id=\"方法四：二次查询法-1\"><a href=\"#方法四：二次查询法-1\" class=\"headerlink\" title=\"方法四：二次查询法\"></a>方法四：二次查询法</h3><p>（1）将order by time offset X limit Y，改写成order by time offset X/N limit Y</p>\n<p>（2）找到最小值time_min</p>\n<p>（3）between二次查询，order by time between $time_min and $time_i_max</p>\n<p>（4）设置虚拟time_min，找到time_min在各个分库的offset，从而得到time_min在全局的offset</p>\n<p>（5）得到了time_min在全局的offset，自然得到了全局的offset X limit Y</p>\n"},{"title":"前端调优","date":"2017-07-07T12:01:00.000Z","_content":"# 建议收集\n1. 注释\n   单行注释：//\n   多行注释：/* */\n   <!-- --> HTML注释，不推荐\n\n2. 对于js引用靠近并放在</body>之前\n\n3. 对于参数的传递（父窗口input隐藏域），open相对于showDialog要稳定兼容的多！\n\n4. js对象类型\n用户自定义对象、内建对象（Array、Date）、宿主对象（document等,由浏览器提供）\n\n5. \n- <link href=\"\" >使用link标签引入css文件\n指定网络资源的位置，从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系\n浏览器明白当前资源是一个样式表，页面解析不会暂停（由于浏览器需要样式规则去画或者渲染页面，渲染过程可能会被被暂停）。这与把css文件内容写在<style>标签里不相同，因此建议使用link标签而不是@import来吧样式表导入到html文档里\n\n- <script src=\"\"></script>使用script标签引入js文件\n嵌入当前资源到当前文档元素定义的位置\n在浏览器下载，编译，执行这个文件之前页面的加载和处理会被暂停。这个过程与把js文件放到<script>标签里类似。这也是建议把JS文件放到底部加载的原因。当然，img标签页与此类似。浏览器暂停加载直到提取和加载图像\n\n\n6. element.value = \"\";//DOM版本前的解决方式（只适用于web文档），如HTML-DOM；element.setAttribute(\"value\",\"\")；//出现DOM后的解决方式（多环境、多程序设计）\n\n7. js性能\n- 尽量减少DOM和标记的使用（减少每次对文档结构的解析）\n- 合并脚本并置于</body>之前（减少请求量）\n- 压缩脚本\n\n\n8. <a href=\"www.baidu.com\" onclick=\"\" ></a>\nonclick的事件被先执行，其次是href中定义的（页面跳转或者javascript）\n同时存在两个定义的时候（onclick与href都定义了），如果想阻止href的动作，在onclick必须加上return false;\n在href中定义的函数如果有返回值的话，当前页面的内容将被返回值代替。\n\n9. getElementById().....等等这些都是DOM Core的组成部分，并不专属js,支持DOM的语言都可以使用\n\n10. createElement()创建元素，createNodeText()创建文本节点，appendChild()追加子节点（所谓追加，就是接着最后一个）,\n\n11. 对于兼容性的问题，如果已经检测了支持DOM但是还是在 有些节点属性获取出现问题 大多数是网景和微软 对于部分属性的支持标准不同。\n\n12. modernizr工具可以检测浏览器对于各种元素的支持\n\n13. 前端调优\n- css最上，js最下 \n- 使用nginx做静态资源分离\n- 合并请求（淘宝nginx_concat模块，或者后台自己合并），多线程请求资源，请求的建立释放比较耗时\n- 资源压缩\n- 静态资源设置超长的有效期，每次更新资源后，可以在后面添加日期时来让其重新加载。（理由如下）\n\n14. 我们每次的请求，其对应文件早已在本地缓存里存在了，但为了确保这个内容没有发生修改，浏览器还是需要请求一次服务器，拿到一个304 Not Modified才能放心。 一些比较大型的网站在建立了比较规范的发布制度后，会将大部分静态资源的有效期设置为最长，也就是Cache-Control max-age为10年。 这样设置后，浏览器就再也不会在有缓存的前提下去确认文件是否有修改了。  超长的有效期可以让用户在访问曾访问过的网站或网页时，获得最佳的体验。 带来的复杂性则体现在每次对静态资源进行更新时，必须发布为不同的URL来确保用户重新加载变动的资源\n\n\n","source":"_posts/前端调优.md","raw":"---\ntitle: 前端调优\ndate: 2017-07-07 20:01:00\ntags:\n- JavaScript\ncategories:\n- 技术\n---\n# 建议收集\n1. 注释\n   单行注释：//\n   多行注释：/* */\n   <!-- --> HTML注释，不推荐\n\n2. 对于js引用靠近并放在</body>之前\n\n3. 对于参数的传递（父窗口input隐藏域），open相对于showDialog要稳定兼容的多！\n\n4. js对象类型\n用户自定义对象、内建对象（Array、Date）、宿主对象（document等,由浏览器提供）\n\n5. \n- <link href=\"\" >使用link标签引入css文件\n指定网络资源的位置，从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系\n浏览器明白当前资源是一个样式表，页面解析不会暂停（由于浏览器需要样式规则去画或者渲染页面，渲染过程可能会被被暂停）。这与把css文件内容写在<style>标签里不相同，因此建议使用link标签而不是@import来吧样式表导入到html文档里\n\n- <script src=\"\"></script>使用script标签引入js文件\n嵌入当前资源到当前文档元素定义的位置\n在浏览器下载，编译，执行这个文件之前页面的加载和处理会被暂停。这个过程与把js文件放到<script>标签里类似。这也是建议把JS文件放到底部加载的原因。当然，img标签页与此类似。浏览器暂停加载直到提取和加载图像\n\n\n6. element.value = \"\";//DOM版本前的解决方式（只适用于web文档），如HTML-DOM；element.setAttribute(\"value\",\"\")；//出现DOM后的解决方式（多环境、多程序设计）\n\n7. js性能\n- 尽量减少DOM和标记的使用（减少每次对文档结构的解析）\n- 合并脚本并置于</body>之前（减少请求量）\n- 压缩脚本\n\n\n8. <a href=\"www.baidu.com\" onclick=\"\" ></a>\nonclick的事件被先执行，其次是href中定义的（页面跳转或者javascript）\n同时存在两个定义的时候（onclick与href都定义了），如果想阻止href的动作，在onclick必须加上return false;\n在href中定义的函数如果有返回值的话，当前页面的内容将被返回值代替。\n\n9. getElementById().....等等这些都是DOM Core的组成部分，并不专属js,支持DOM的语言都可以使用\n\n10. createElement()创建元素，createNodeText()创建文本节点，appendChild()追加子节点（所谓追加，就是接着最后一个）,\n\n11. 对于兼容性的问题，如果已经检测了支持DOM但是还是在 有些节点属性获取出现问题 大多数是网景和微软 对于部分属性的支持标准不同。\n\n12. modernizr工具可以检测浏览器对于各种元素的支持\n\n13. 前端调优\n- css最上，js最下 \n- 使用nginx做静态资源分离\n- 合并请求（淘宝nginx_concat模块，或者后台自己合并），多线程请求资源，请求的建立释放比较耗时\n- 资源压缩\n- 静态资源设置超长的有效期，每次更新资源后，可以在后面添加日期时来让其重新加载。（理由如下）\n\n14. 我们每次的请求，其对应文件早已在本地缓存里存在了，但为了确保这个内容没有发生修改，浏览器还是需要请求一次服务器，拿到一个304 Not Modified才能放心。 一些比较大型的网站在建立了比较规范的发布制度后，会将大部分静态资源的有效期设置为最长，也就是Cache-Control max-age为10年。 这样设置后，浏览器就再也不会在有缓存的前提下去确认文件是否有修改了。  超长的有效期可以让用户在访问曾访问过的网站或网页时，获得最佳的体验。 带来的复杂性则体现在每次对静态资源进行更新时，必须发布为不同的URL来确保用户重新加载变动的资源\n\n\n","slug":"前端调优","published":1,"updated":"2019-06-01T13:45:14.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwdlidyg0000z0cb48bbyeb6","content":"<h1 id=\"建议收集\"><a href=\"#建议收集\" class=\"headerlink\" title=\"建议收集\"></a>建议收集</h1><ol>\n<li><p>注释<br>单行注释：//<br>多行注释：/<em> </em>/<br><!-- --> HTML注释，不推荐</p>\n</li>\n<li><p>对于js引用靠近并放在之前</p>\n</li>\n<li><p>对于参数的传递（父窗口input隐藏域），open相对于showDialog要稳定兼容的多！</p>\n</li>\n<li><p>js对象类型<br>用户自定义对象、内建对象（Array、Date）、宿主对象（document等,由浏览器提供）</p>\n</li>\n<li></li>\n</ol>\n<ul>\n<li><p><link href>使用link标签引入css文件<br>指定网络资源的位置，从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系<br>浏览器明白当前资源是一个样式表，页面解析不会暂停（由于浏览器需要样式规则去画或者渲染页面，渲染过程可能会被被暂停）。这与把css文件内容写在<style>标签里不相同，因此建议使用link标签而不是@import来吧样式表导入到html文档里</p>\n</li>\n<li><p><script src=\"\"></script>使用script标签引入js文件<br>嵌入当前资源到当前文档元素定义的位置<br>在浏览器下载，编译，执行这个文件之前页面的加载和处理会被暂停。这个过程与把js文件放到<script>标签里类似。这也是建议把JS文件放到底部加载的原因。当然，img标签页与此类似。浏览器暂停加载直到提取和加载图像</p>\n</li>\n</ul>\n<ol start=\"6\">\n<li><p>element.value = “”;//DOM版本前的解决方式（只适用于web文档），如HTML-DOM；element.setAttribute(“value”,””)；//出现DOM后的解决方式（多环境、多程序设计）</p>\n</li>\n<li><p>js性能</p>\n</li>\n</ol>\n<ul>\n<li>尽量减少DOM和标记的使用（减少每次对文档结构的解析）</li>\n<li>合并脚本并置于<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/haru01.model.json\"},\"display\":{\"position\":\"right\",\"width\":150,\"height\":300},\"mobile\":{\"show\":true},\"react\":{\"opacity\":1},\"log\":false});</script></body>之前（减少请求量）</li>\n<li>压缩脚本</li>\n</ul>\n<ol start=\"8\">\n<li><p><a href=\"www.baidu.com\" onclick=\"\" ></a><br>onclick的事件被先执行，其次是href中定义的（页面跳转或者javascript）<br>同时存在两个定义的时候（onclick与href都定义了），如果想阻止href的动作，在onclick必须加上return false;<br>在href中定义的函数如果有返回值的话，当前页面的内容将被返回值代替。</p>\n</li>\n<li><p>getElementById()…..等等这些都是DOM Core的组成部分，并不专属js,支持DOM的语言都可以使用</p>\n</li>\n<li><p>createElement()创建元素，createNodeText()创建文本节点，appendChild()追加子节点（所谓追加，就是接着最后一个）,</p>\n</li>\n<li><p>对于兼容性的问题，如果已经检测了支持DOM但是还是在 有些节点属性获取出现问题 大多数是网景和微软 对于部分属性的支持标准不同。</p>\n</li>\n<li><p>modernizr工具可以检测浏览器对于各种元素的支持</p>\n</li>\n<li><p>前端调优</p>\n</li>\n</ol>\n<ul>\n<li>css最上，js最下 </li>\n<li>使用nginx做静态资源分离</li>\n<li>合并请求（淘宝nginx_concat模块，或者后台自己合并），多线程请求资源，请求的建立释放比较耗时</li>\n<li>资源压缩</li>\n<li>静态资源设置超长的有效期，每次更新资源后，可以在后面添加日期时来让其重新加载。（理由如下）</li>\n</ul>\n<ol start=\"14\">\n<li>我们每次的请求，其对应文件早已在本地缓存里存在了，但为了确保这个内容没有发生修改，浏览器还是需要请求一次服务器，拿到一个304 Not Modified才能放心。 一些比较大型的网站在建立了比较规范的发布制度后，会将大部分静态资源的有效期设置为最长，也就是Cache-Control max-age为10年。 这样设置后，浏览器就再也不会在有缓存的前提下去确认文件是否有修改了。  超长的有效期可以让用户在访问曾访问过的网站或网页时，获得最佳的体验。 带来的复杂性则体现在每次对静态资源进行更新时，必须发布为不同的URL来确保用户重新加载变动的资源</li>\n</ol>\n</style></p></li></ul>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"建议收集\"><a href=\"#建议收集\" class=\"headerlink\" title=\"建议收集\"></a>建议收集</h1><ol>\n<li><p>注释<br>单行注释：//<br>多行注释：/<em> </em>/<br><!-- --> HTML注释，不推荐</p>\n</li>\n<li><p>对于js引用靠近并放在之前</p>\n</li>\n<li><p>对于参数的传递（父窗口input隐藏域），open相对于showDialog要稳定兼容的多！</p>\n</li>\n<li><p>js对象类型<br>用户自定义对象、内建对象（Array、Date）、宿主对象（document等,由浏览器提供）</p>\n</li>\n<li></li>\n</ol>\n<ul>\n<li><p><link href>使用link标签引入css文件<br>指定网络资源的位置，从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系<br>浏览器明白当前资源是一个样式表，页面解析不会暂停（由于浏览器需要样式规则去画或者渲染页面，渲染过程可能会被被暂停）。这与把css文件内容写在<style>标签里不相同，因此建议使用link标签而不是@import来吧样式表导入到html文档里</p>\n</li>\n<li><p><script src=\"\"></script>使用script标签引入js文件<br>嵌入当前资源到当前文档元素定义的位置<br>在浏览器下载，编译，执行这个文件之前页面的加载和处理会被暂停。这个过程与把js文件放到<script>标签里类似。这也是建议把JS文件放到底部加载的原因。当然，img标签页与此类似。浏览器暂停加载直到提取和加载图像</p>\n</li>\n</ul>\n<ol start=\"6\">\n<li><p>element.value = “”;//DOM版本前的解决方式（只适用于web文档），如HTML-DOM；element.setAttribute(“value”,””)；//出现DOM后的解决方式（多环境、多程序设计）</p>\n</li>\n<li><p>js性能</p>\n</li>\n</ol>\n<ul>\n<li>尽量减少DOM和标记的使用（减少每次对文档结构的解析）</li>\n<li>合并脚本并置于<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/haru01.model.json\"},\"display\":{\"position\":\"right\",\"width\":150,\"height\":300},\"mobile\":{\"show\":true},\"react\":{\"opacity\":1},\"log\":false});</script></body>之前（减少请求量）</li>\n<li>压缩脚本</li>\n</ul>\n<ol start=\"8\">\n<li><p><a href=\"www.baidu.com\" onclick=\"\" ></a><br>onclick的事件被先执行，其次是href中定义的（页面跳转或者javascript）<br>同时存在两个定义的时候（onclick与href都定义了），如果想阻止href的动作，在onclick必须加上return false;<br>在href中定义的函数如果有返回值的话，当前页面的内容将被返回值代替。</p>\n</li>\n<li><p>getElementById()…..等等这些都是DOM Core的组成部分，并不专属js,支持DOM的语言都可以使用</p>\n</li>\n<li><p>createElement()创建元素，createNodeText()创建文本节点，appendChild()追加子节点（所谓追加，就是接着最后一个）,</p>\n</li>\n<li><p>对于兼容性的问题，如果已经检测了支持DOM但是还是在 有些节点属性获取出现问题 大多数是网景和微软 对于部分属性的支持标准不同。</p>\n</li>\n<li><p>modernizr工具可以检测浏览器对于各种元素的支持</p>\n</li>\n<li><p>前端调优</p>\n</li>\n</ol>\n<ul>\n<li>css最上，js最下 </li>\n<li>使用nginx做静态资源分离</li>\n<li>合并请求（淘宝nginx_concat模块，或者后台自己合并），多线程请求资源，请求的建立释放比较耗时</li>\n<li>资源压缩</li>\n<li>静态资源设置超长的有效期，每次更新资源后，可以在后面添加日期时来让其重新加载。（理由如下）</li>\n</ul>\n<ol start=\"14\">\n<li>我们每次的请求，其对应文件早已在本地缓存里存在了，但为了确保这个内容没有发生修改，浏览器还是需要请求一次服务器，拿到一个304 Not Modified才能放心。 一些比较大型的网站在建立了比较规范的发布制度后，会将大部分静态资源的有效期设置为最长，也就是Cache-Control max-age为10年。 这样设置后，浏览器就再也不会在有缓存的前提下去确认文件是否有修改了。  超长的有效期可以让用户在访问曾访问过的网站或网页时，获得最佳的体验。 带来的复杂性则体现在每次对静态资源进行更新时，必须发布为不同的URL来确保用户重新加载变动的资源</li>\n</ol>\n</style></p></li></ul>"},{"title":"浅谈乐悲观锁","date":"2019-05-10T10:05:00.000Z","_content":"\n# 简介\n最开始接触加锁机制，还是在学oracle数据库的时候for update，因为存在会话丢失锁表的情况后来改用rowid的方式。\n\n>for update：直接对相应的数据加上行级锁，若遇到断网、忘记提交等情况，会比较容易锁表。\n\n>rowid： 运行后并未给数据加上行级锁（通过物理地址去确定某一行数据），但可以编辑数据，提交事务的瞬间完成上锁、提交、解锁等动作，不易发生锁表。\n\n在公司做项目基本都是采用带版本号更新的方式。实际上，在很多地方都采用了类似的做法。\n\n# 悲观锁\n如上面的for update,rowid都是一种悲观锁的方式，具有强烈的独占和排他特性，基本都是依靠数据库底层实现，在数据处理过程中数据会一直被锁定。最经典的例子就是ATM转账\n\n# 乐观锁\n乐观锁机制则采取比较宽松的加锁机制,不直接锁定数据，而是带着版本或状态等去比较 然后更新。当然这只是一种思想，有很多实现的手段。<br/>\n\n**常用方式：**\n1.带状态、版本号更新 \n如JPA中的javax.persistence.Version注解 \n\n2.CAS\n在java底层Atomic相关包中存在一个compareAndSet(int expect, int update)的方法，它的基本思想就是先比较再更新（底层调用的是非安全的cpp函数，以及hpp函数，最终由cpu完成）\n","source":"_posts/浅谈乐悲观锁.md","raw":"---\ntitle: 浅谈乐悲观锁\ndate: 2019-05-10 18:05:00\ntags:\n- 思想机制\ncategories:\n- 技术\n---\n\n# 简介\n最开始接触加锁机制，还是在学oracle数据库的时候for update，因为存在会话丢失锁表的情况后来改用rowid的方式。\n\n>for update：直接对相应的数据加上行级锁，若遇到断网、忘记提交等情况，会比较容易锁表。\n\n>rowid： 运行后并未给数据加上行级锁（通过物理地址去确定某一行数据），但可以编辑数据，提交事务的瞬间完成上锁、提交、解锁等动作，不易发生锁表。\n\n在公司做项目基本都是采用带版本号更新的方式。实际上，在很多地方都采用了类似的做法。\n\n# 悲观锁\n如上面的for update,rowid都是一种悲观锁的方式，具有强烈的独占和排他特性，基本都是依靠数据库底层实现，在数据处理过程中数据会一直被锁定。最经典的例子就是ATM转账\n\n# 乐观锁\n乐观锁机制则采取比较宽松的加锁机制,不直接锁定数据，而是带着版本或状态等去比较 然后更新。当然这只是一种思想，有很多实现的手段。<br/>\n\n**常用方式：**\n1.带状态、版本号更新 \n如JPA中的javax.persistence.Version注解 \n\n2.CAS\n在java底层Atomic相关包中存在一个compareAndSet(int expect, int update)的方法，它的基本思想就是先比较再更新（底层调用的是非安全的cpp函数，以及hpp函数，最终由cpu完成）\n","slug":"浅谈乐悲观锁","published":1,"updated":"2019-05-10T12:30:22.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwdlidyq0001z0cbi3g7gyb0","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>最开始接触加锁机制，还是在学oracle数据库的时候for update，因为存在会话丢失锁表的情况后来改用rowid的方式。</p>\n<blockquote>\n<p>for update：直接对相应的数据加上行级锁，若遇到断网、忘记提交等情况，会比较容易锁表。</p>\n</blockquote>\n<blockquote>\n<p>rowid： 运行后并未给数据加上行级锁（通过物理地址去确定某一行数据），但可以编辑数据，提交事务的瞬间完成上锁、提交、解锁等动作，不易发生锁表。</p>\n</blockquote>\n<p>在公司做项目基本都是采用带版本号更新的方式。实际上，在很多地方都采用了类似的做法。</p>\n<h1 id=\"悲观锁\"><a href=\"#悲观锁\" class=\"headerlink\" title=\"悲观锁\"></a>悲观锁</h1><p>如上面的for update,rowid都是一种悲观锁的方式，具有强烈的独占和排他特性，基本都是依靠数据库底层实现，在数据处理过程中数据会一直被锁定。最经典的例子就是ATM转账</p>\n<h1 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h1><p>乐观锁机制则采取比较宽松的加锁机制,不直接锁定数据，而是带着版本或状态等去比较 然后更新。当然这只是一种思想，有很多实现的手段。<br></p>\n<p><strong>常用方式：</strong><br>1.带状态、版本号更新<br>如JPA中的javax.persistence.Version注解 </p>\n<p>2.CAS<br>在java底层Atomic相关包中存在一个compareAndSet(int expect, int update)的方法，它的基本思想就是先比较再更新（底层调用的是非安全的cpp函数，以及hpp函数，最终由cpu完成）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>最开始接触加锁机制，还是在学oracle数据库的时候for update，因为存在会话丢失锁表的情况后来改用rowid的方式。</p>\n<blockquote>\n<p>for update：直接对相应的数据加上行级锁，若遇到断网、忘记提交等情况，会比较容易锁表。</p>\n</blockquote>\n<blockquote>\n<p>rowid： 运行后并未给数据加上行级锁（通过物理地址去确定某一行数据），但可以编辑数据，提交事务的瞬间完成上锁、提交、解锁等动作，不易发生锁表。</p>\n</blockquote>\n<p>在公司做项目基本都是采用带版本号更新的方式。实际上，在很多地方都采用了类似的做法。</p>\n<h1 id=\"悲观锁\"><a href=\"#悲观锁\" class=\"headerlink\" title=\"悲观锁\"></a>悲观锁</h1><p>如上面的for update,rowid都是一种悲观锁的方式，具有强烈的独占和排他特性，基本都是依靠数据库底层实现，在数据处理过程中数据会一直被锁定。最经典的例子就是ATM转账</p>\n<h1 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h1><p>乐观锁机制则采取比较宽松的加锁机制,不直接锁定数据，而是带着版本或状态等去比较 然后更新。当然这只是一种思想，有很多实现的手段。<br></p>\n<p><strong>常用方式：</strong><br>1.带状态、版本号更新<br>如JPA中的javax.persistence.Version注解 </p>\n<p>2.CAS<br>在java底层Atomic相关包中存在一个compareAndSet(int expect, int update)的方法，它的基本思想就是先比较再更新（底层调用的是非安全的cpp函数，以及hpp函数，最终由cpu完成）</p>\n"},{"title":"消息推送","date":"2017-02-09T13:14:58.000Z","_content":"# 简介\n# 环境\n# 内容\n## IOS\n## Android\n# 总结\n","source":"_posts/消息推送.md","raw":"---\ntitle: 消息推送\ndate: 2017-02-09 21:14:58\ntags:\n- mpush\n- java\n- Apns\n- android\n- ios\n- 消息推送\ncategories:\n- 技术\n---\n# 简介\n# 环境\n# 内容\n## IOS\n## Android\n# 总结\n","slug":"消息推送","published":1,"updated":"2019-06-01T13:45:14.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwdlidzp0008z0cb97279y7t","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><h1 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h1><h2 id=\"IOS\"><a href=\"#IOS\" class=\"headerlink\" title=\"IOS\"></a>IOS</h2><h2 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h2><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><h1 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h1><h2 id=\"IOS\"><a href=\"#IOS\" class=\"headerlink\" title=\"IOS\"></a>IOS</h2><h2 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h2><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjuxqcibr0002dwmdoivcpumz","category_id":"cjuxqcicc0005dwmdsmwxz0bk","_id":"cjuxqcid0000ddwmdzx3dhs6l"},{"post_id":"cjuxqcicv0009dwmd2oyawb69","category_id":"cjuxqcicz000bdwmdfgtmjg38","_id":"cjuxqcid3000fdwmdrwpuyuz2"},{"post_id":"cjvdq1lqy0000zsmdnbkfbccf","category_id":"cjuxqcicc0005dwmdsmwxz0bk","_id":"cjvdq28g60002zsmd11lvcyup"},{"post_id":"cjvdq9h82000054mdx0tdm4ql","category_id":"cjuxqcicc0005dwmdsmwxz0bk","_id":"cjvdqb8qg000254mdbb9989jk"},{"post_id":"cjvdqijdi0001dcmdad2jsa6w","category_id":"cjuxqcicc0005dwmdsmwxz0bk","_id":"cjvdqjss70004dcmdaukl747x"},{"post_id":"cjvgqv5hb0000jscbl2ad56zt","category_id":"cjuxqcicc0005dwmdsmwxz0bk","_id":"cjvgqv5hx0003jscbau2onccb"},{"post_id":"cjvgqv5hi0001jscbcqhdl5ju","category_id":"cjuxqcicc0005dwmdsmwxz0bk","_id":"cjvgqv5hy0004jscbhhkz4moa"},{"post_id":"cjwdlidyg0000z0cb48bbyeb6","category_id":"cjuxqcicc0005dwmdsmwxz0bk","_id":"cjwdlidyz0003z0cbcznf1mka"},{"post_id":"cjwdlidyq0001z0cbi3g7gyb0","category_id":"cjuxqcicc0005dwmdsmwxz0bk","_id":"cjwdlidz00004z0cbh85culpw"},{"post_id":"cjwdlidzp0008z0cb97279y7t","category_id":"cjuxqcicc0005dwmdsmwxz0bk","_id":"cjwdlidzu000az0cbwlkqajom"}],"PostTag":[{"post_id":"cjuxqcibr0002dwmdoivcpumz","tag_id":"cjuxqcicj0006dwmdthp5imz1","_id":"cjuxqcicx000adwmdrkhrufu1"},{"post_id":"cjuxqcicv0009dwmd2oyawb69","tag_id":"cjuxqcicz000cdwmddkf1xkv5","_id":"cjuxqcid4000gdwmdzgt2fo42"},{"post_id":"cjuxqcicv0009dwmd2oyawb69","tag_id":"cjuxqcid1000edwmd08op2mtk","_id":"cjuxqcid4000hdwmdm0x5gmvw"},{"post_id":"cjvdq1lqy0000zsmdnbkfbccf","tag_id":"cjuxqcicj0006dwmdthp5imz1","_id":"cjvdq28g50001zsmdq5xbw09f"},{"post_id":"cjvdq1lqy0000zsmdnbkfbccf","tag_id":"cjvdq2vee0003zsmds52rea7f","_id":"cjvdq2veg0004zsmdl7velck8"},{"post_id":"cjvdq9h82000054mdx0tdm4ql","tag_id":"cjuxqcicj0006dwmdthp5imz1","_id":"cjvdqb8qh000354md4wvcvcue"},{"post_id":"cjvdq9h82000054mdx0tdm4ql","tag_id":"cjvdqb8qe000154mdq42rtlmz","_id":"cjvdqb8qi000454mdx9z0ivy3"},{"post_id":"cjvdq9h82000054mdx0tdm4ql","tag_id":"cjvdqbfet000554mdaww6shlv","_id":"cjvdqbfew000654mdic9s5beo"},{"post_id":"cjvdqijdi0001dcmdad2jsa6w","tag_id":"cjuxqcicj0006dwmdthp5imz1","_id":"cjvdqjss40002dcmdqb95qamq"},{"post_id":"cjvdqijdi0001dcmdad2jsa6w","tag_id":"cjvdqkik00006dcmdesxuk5u4","_id":"cjvdqkik40007dcmdn94x5lhp"},{"post_id":"cjvgqv5hb0000jscbl2ad56zt","tag_id":"cjvgqv5ht0002jscben2f185f","_id":"cjvgqv5i00007jscbs75kep6j"},{"post_id":"cjvgqv5hb0000jscbl2ad56zt","tag_id":"cjvgqv5hy0005jscb93iszmyg","_id":"cjvgqv5i10008jscbrqv18qww"},{"post_id":"cjvgqv5hi0001jscbcqhdl5ju","tag_id":"cjvgqv5hy0005jscb93iszmyg","_id":"cjvgqv5i20009jscb0730rl1i"},{"post_id":"cjwdlidyg0000z0cb48bbyeb6","tag_id":"cjwdlidyv0002z0cbif03f8wk","_id":"cjwdlidz10006z0cbhql9wu2t"},{"post_id":"cjwdlidyq0001z0cbi3g7gyb0","tag_id":"cjwdlidz00005z0cbgpo376xu","_id":"cjwdlidz20007z0cbz1kzeqts"},{"post_id":"cjwdlidzp0008z0cb97279y7t","tag_id":"cjwdlidzs0009z0cbd9t6412g","_id":"cjwdlie04000gz0cbkahj2kr6"},{"post_id":"cjwdlidzp0008z0cb97279y7t","tag_id":"cjwdlidzw000bz0cbrkg5apu6","_id":"cjwdlie05000hz0cb3kignjvf"},{"post_id":"cjwdlidzp0008z0cb97279y7t","tag_id":"cjwdlie00000cz0cbh0q90w62","_id":"cjwdlie05000iz0cbssiljkdi"},{"post_id":"cjwdlidzp0008z0cb97279y7t","tag_id":"cjwdlie01000dz0cbktzn9xnn","_id":"cjwdlie06000jz0cbg5cdawn8"},{"post_id":"cjwdlidzp0008z0cb97279y7t","tag_id":"cjwdlie02000ez0cbrmt5l1u4","_id":"cjwdlie06000kz0cbkwwbzh11"},{"post_id":"cjwdlidzp0008z0cb97279y7t","tag_id":"cjwdlie03000fz0cbhbdbg9f1","_id":"cjwdlie07000lz0cbklrx33we"}],"Tag":[{"name":"linux","_id":"cjuxqcicj0006dwmdthp5imz1"},{"name":"爱情","_id":"cjuxqcicz000cdwmddkf1xkv5"},{"name":"书评","_id":"cjuxqcid1000edwmd08op2mtk"},{"name":"docker","_id":"cjvdq2vee0003zsmds52rea7f"},{"name":"keepalived","_id":"cjvdqb8qe000154mdq42rtlmz"},{"name":"nginx","_id":"cjvdqbfet000554mdaww6shlv"},{"name":"mongodb","_id":"cjvdqkik00006dcmdesxuk5u4"},{"name":"mysql","_id":"cjvgqv5ht0002jscben2f185f"},{"name":"数据库","_id":"cjvgqv5hy0005jscb93iszmyg"},{"name":"JavaScript","_id":"cjwdlidyv0002z0cbif03f8wk"},{"name":"思想机制","_id":"cjwdlidz00005z0cbgpo376xu"},{"name":"mpush","_id":"cjwdlidzs0009z0cbd9t6412g"},{"name":"java","_id":"cjwdlidzw000bz0cbrkg5apu6"},{"name":"Apns","_id":"cjwdlie00000cz0cbh0q90w62"},{"name":"android","_id":"cjwdlie01000dz0cbktzn9xnn"},{"name":"ios","_id":"cjwdlie02000ez0cbrmt5l1u4"},{"name":"消息推送","_id":"cjwdlie03000fz0cbhbdbg9f1"}]}}